<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>sklearn - 线性回归(正规方程与梯度下降)</title>
      <link href="/2020/03/06/sklearn%20-%20%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92(%E6%AD%A3%E8%A7%84%E6%96%B9%E7%A8%8B%E4%B8%8E%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D)/"/>
      <url>/2020/03/06/sklearn%20-%20%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92(%E6%AD%A3%E8%A7%84%E6%96%B9%E7%A8%8B%E4%B8%8E%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D)/</url>
      
        <content type="html"><![CDATA[<p>Shell脚本，是一种为shell编写的脚本程序。</p><a id="more"></a><h1 id="一-线性回归方程"><a href="#一-线性回归方程" class="headerlink" title="一: 线性回归方程"></a>一: 线性回归方程</h1><p>​        <strong>线性回归</strong>（英语：linear regression）是利用称为线性回归方程的<strong>最小二乘函数</strong>对一个或多个自变量和因变量</p><p>之间关系进行建模的一种回归分析。这种函数是一个或多个称为回归系数的模型参数的线性组合。只有一个自变量</p><p>的情况称为简单回归，大于一个自变量情况的叫做多元回归</p><p>​        在线性回归中，数据使用线性预测函数来建模，并且未知的模型参数也是通过数据来估计。这些模型被叫做</p><p>线性模型。最常用的线性回归建模是给定X值的y的条件均值是X的仿射函数。不太一般的情况，线性回归模型可以</p><p>是一个中位数或一些其他的给定X的条件下y的条件分布的分位数作为X的线性函数表示。像所有形式的回归分析一</p><p>样，线性回归也把焦点放在给定X值的y的条件概率分布，而不是X和y的联合概率分布（多元分析领域）。</p><p>​        线性回归有很多实际用途。分为以下两大类：</p><ol><li><p>如果目标是预测或者映射，线性回归可以用来对观测数据集的和X的值拟合出一个预测模型。当完成这样一个</p><p>模型以后，对于一个新增的X值，在没有给定与它相配对的y的情况下，可以用这个拟合过的模型预测出一个y</p><p>值。</p></li><li><p>给定一个变量y和一些变量$${\displaystyle X_{1}}X_1,…,{\displaystyle X_{p}}X_p$$，这些变量有可能与y相关，线性回归分析可以用来量化y与Xj之</p><p>间相关性的强度，评估出与y不相关的，$${\displaystyle X_{j}}X_j$$并识别出哪些$${\displaystyle X_{j}}X_j$$的子集包含了关于y的冗余信息。</p></li></ol><h2 id="使用sklearn线性回归模型-jupyter"><a href="#使用sklearn线性回归模型-jupyter" class="headerlink" title="使用sklearn线性回归模型(jupyter)"></a>使用sklearn线性回归模型(jupyter)</h2><p><strong>这里我们以波士顿的房价数据来进行使用分析</strong></p><h3 id="一-导入sklearn"><a href="#一-导入sklearn" class="headerlink" title="(一): 导入sklearn"></a>(一): 导入sklearn</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 线性回归,拟合方程,求解系数, 一次幂</span></span><br><span class="line"><span class="comment"># 线性方程:直来直去,不拐弯</span></span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"><span class="comment"># 导入数据集</span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"><span class="comment"># 导入数据分离的方法(获取数据后,一部分数据用来让回归模型学习,另一部分用来预测)</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br></pre></td></tr></table></figure><h3 id="二-获取波士顿房价数据"><a href="#二-获取波士顿房价数据" class="headerlink" title="(二): 获取波士顿房价数据"></a>(二): 获取波士顿房价数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取的数据是numpy,ndarray类型</span></span><br><span class="line">data = datasets.load_boston()   </span><br><span class="line"><span class="comment"># 该数据内有完整的影响房价的因素和完整的房价信息,本次实验就是将数据分为两部分, 一部分用来训练模型,另一部分用来预测,最后将预测出来的数据和已有的完整信息进行对比,判断该模型是否适用于这组房价数据</span></span><br><span class="line"></span><br><span class="line">data   <span class="comment"># 查看data的数据结构</span></span><br><span class="line">data.feature_names   <span class="comment"># 查看影响房价的属性名</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># x是属性,特征,未知数</span></span><br><span class="line">X = data[<span class="string">'data'</span>]</span><br><span class="line">X.shape   <span class="comment"># 运行结果是(506, 13), 506表示样本是506个, 每个样本采集了13个属性特征;13个属性,需要构建构建了13元一次方程</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># y是房价的估值</span></span><br><span class="line">y = data[<span class="string">'target'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># !!!!!!!!!!</span></span><br><span class="line"><span class="comment"># X, y = datasets.load_boston(True) 获取到X, y的值和以上的一样</span></span><br></pre></td></tr></table></figure><h3 id="三-使用模型进行预测"><a href="#三-使用模型进行预测" class="headerlink" title="(三): 使用模型进行预测"></a>(三): 使用模型进行预测</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y)   <span class="comment"># 将数据进行分离(默认是3:1); train_test_split(X, y)函数会随机打乱顺序</span></span><br><span class="line"></span><br><span class="line">display(X_train.shape, X_test.shape)   <span class="comment"># (379, 13) ; (127, 13)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 声明算法</span></span><br><span class="line">linear = LinearRegression()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练模型</span></span><br><span class="line">linear.fit(X_train, y_train)   <span class="comment"># X_train, y_train是之前分离出来用来训练模型的数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测</span></span><br><span class="line">y_ = linear.predict(X_test).round(<span class="number">1</span>)   <span class="comment"># X_test是影响房价的因素,该预测模型能根据影响房价的因素预测剩余部分的房价</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 预估数据和实际数据比较</span></span><br><span class="line">print(y_)</span><br><span class="line">print(y_test)</span><br></pre></td></tr></table></figure><p><strong><font color=red>经过估计数据和实际数据对比,说明算法模型适用于数据</font></strong></p><h3 id="四-自建方程预测数据-与-使用线性模型得到的数据对比"><a href="#四-自建方程预测数据-与-使用线性模型得到的数据对比" class="headerlink" title="(四): 自建方程预测数据 与 使用线性模型得到的数据对比"></a>(四): 自建方程预测数据 与 使用线性模型得到的数据对比</h3><p>​        假设波士顿的房价数据符合线性回归的特性,则我们可以通过构建线性方程来预测波士顿剩余部分的房价信息</p><p>根据一次线性回归方程: $$f(X) = Xw+b$$ 可推导得出: $$ f(X) = w_1x_1+W_2x_2+…+w_{13}x_{13} +b$$   (有13个影响房</p><p>价的因素)</p><p>代码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过训练模型,可从模型中得出系数w</span></span><br><span class="line">w_ = linear.coef_</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过训练模型,可从模型中得出截距b</span></span><br><span class="line">b_ = linear.intercept_</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自建方程</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(w_, b_, X)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> np.dot(X, w_)+b_</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用方程得到预估的房价信息</span></span><br><span class="line">fun(w_, b_, X_test).round(<span class="number">1</span>)   <span class="comment"># round(1)保留一位小数</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">array([31.3, 13.4, 28.6, 20.5, 20.4, 19.4, 32.2, 24. , 25.8, 29.5, 24.5,</span></span><br><span class="line"><span class="string">       25.2, 31.9,  8.2, 20.9, 29.3, 22.3, 35.2, 16.4, 18.5, 30.8, 41.1,</span></span><br><span class="line"><span class="string">       16.2, 13.7, 17.7, 23.8,  7.8, 12. , 20.5, 15.3, 29.3, 26.8, 31.8,</span></span><br><span class="line"><span class="string">       26. , 30.4, 39.2, 25.3, 40.7, 11.6, 27.3, 16.7, 18.8, 19.5, 19.9,</span></span><br><span class="line"><span class="string">       20.7, 22.8, 17.4, 21.6, 23.3, 30. , 25.2, 23.7, 34.2, 18.2, 33.5,</span></span><br><span class="line"><span class="string">       16. , 28.3, 14.1, 24.2, 16.2, 16.7, 23.5, 16. , 21.4, 21.8, 28.2,</span></span><br><span class="line"><span class="string">       25.7, 31.2, 18.8, 26.4, 28.3, 21.9, 27.5, 27.1, 27.1, 15. , 26. ,</span></span><br><span class="line"><span class="string">       26.3, 13.2, 13.3, 26.1, 20.5, 16.8, 24.3, 36.6, 21.4,  8.3, 27.8,</span></span><br><span class="line"><span class="string">        3.6, 19.2, 27.5, 33.6, 28.4, 34.3, 28.2, 13.3, 18. , 23.5, 30.4,</span></span><br><span class="line"><span class="string">       32.9, 23.7, 30.5, 19.8, 19.5, 18.7, 30.9, 36.3,  8. , 18.2, 13.9,</span></span><br><span class="line"><span class="string">       15. , 26.4, 24. , 30.2, 20. ,  5.6, 21.4, 22.9, 17.6, 32.8, 22.1,</span></span><br><span class="line"><span class="string">       32.6, 20.9, 19.3, 23.1, 21. , 21.5])</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用sklesrn中的线性模型得到的预估房价信息</span></span><br><span class="line">linear.predict(X_test).round(<span class="number">1</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">array([31.3, 13.4, 28.6, 20.5, 20.4, 19.4, 32.2, 24. , 25.8, 29.5, 24.5,</span></span><br><span class="line"><span class="string">       25.2, 31.9,  8.2, 20.9, 29.3, 22.3, 35.2, 16.4, 18.5, 30.8, 41.1,</span></span><br><span class="line"><span class="string">       16.2, 13.7, 17.7, 23.8,  7.8, 12. , 20.5, 15.3, 29.3, 26.8, 31.8,</span></span><br><span class="line"><span class="string">       26. , 30.4, 39.2, 25.3, 40.7, 11.6, 27.3, 16.7, 18.8, 19.5, 19.9,</span></span><br><span class="line"><span class="string">       20.7, 22.8, 17.4, 21.6, 23.3, 30. , 25.2, 23.7, 34.2, 18.2, 33.5,</span></span><br><span class="line"><span class="string">       16. , 28.3, 14.1, 24.2, 16.2, 16.7, 23.5, 16. , 21.4, 21.8, 28.2,</span></span><br><span class="line"><span class="string">       25.7, 31.2, 18.8, 26.4, 28.3, 21.9, 27.5, 27.1, 27.1, 15. , 26. ,</span></span><br><span class="line"><span class="string">       26.3, 13.2, 13.3, 26.1, 20.5, 16.8, 24.3, 36.6, 21.4,  8.3, 27.8,</span></span><br><span class="line"><span class="string">        3.6, 19.2, 27.5, 33.6, 28.4, 34.3, 28.2, 13.3, 18. , 23.5, 30.4,</span></span><br><span class="line"><span class="string">       32.9, 23.7, 30.5, 19.8, 19.5, 18.7, 30.9, 36.3,  8. , 18.2, 13.9,</span></span><br><span class="line"><span class="string">       15. , 26.4, 24. , 30.2, 20. ,  5.6, 21.4, 22.9, 17.6, 32.8, 22.1,</span></span><br><span class="line"><span class="string">       32.6, 20.9, 19.3, 23.1, 21. , 21.5])</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p><strong><font color=red>通过自建模型获取预估数据与使用模型获取预估数据进行比较,两组数据完全一致;</font></strong></p><h3 id="五-使用线性回归-求解斜率和截距"><a href="#五-使用线性回归-求解斜率和截距" class="headerlink" title="(五): 使用线性回归,求解斜率和截距"></a>(五): 使用线性回归,求解斜率和截距</h3><ul><li>根据最小二乘法: $$\min_{w}||Xw-y||_2^2$$ 推到得出公式: $$w = (X^TX)^{-1}X^Ty$$</li></ul><p>以上公式只能求出w,我们可以先求出w再计算出b;</p><ul><li><p>但此处我们有更简单的方法:</p><p>根据线性回归方程 $$ f(x) = w_1x_1+w_2x_2+b$$ 我们可以将方程中的b看成是$$w_3x_3^0$$, </p></li></ul><p>所以可得: $$f(x) = w_1x_1^1+w_2x_2^1+w_3x_3^0$$</p><p>代码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"></span><br><span class="line">X, y = datasets.load_boston(<span class="literal">True</span>)</span><br><span class="line">linear = LinearRegression()</span><br><span class="line">linear.fit(X,y)</span><br><span class="line">w_ = linear.coef_</span><br><span class="line">b_ = linear.intercept_</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 向X中插入一列全是1的数据(任何数的0次方都是1)</span></span><br><span class="line">X = np.concatenate([X, np.ones(shape = (<span class="number">506</span>, <span class="number">1</span>))], axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据最小二乘法的推导公式:w和b的值为(最后一个值是b)</span></span><br><span class="line">w = ((np.linalg.inv(X.T.dot(X))).dot(X.T)).dot(y)</span><br><span class="line"><span class="comment"># 以上w的写法过于装逼,所以分解为:</span></span><br><span class="line"><span class="comment"># A = X.T.dot(X)   求X和转置后的X的内积(公式中的XTX)</span></span><br><span class="line"><span class="comment"># B = np.linalg.inv(A)   求A的逆矩阵(公式中的-1次方)</span></span><br><span class="line"><span class="comment"># C = B.dot(X.T)   求以上矩阵和X的转置矩阵的内积(公式中的XT)</span></span><br><span class="line"><span class="comment"># w = C.dot(y)   与y求内积,得出w和b</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">运行结果:</span></span><br><span class="line"><span class="string">array([-1.08011358e-01,  4.64204584e-02,  2.05586264e-02,  2.68673382e+00,</span></span><br><span class="line"><span class="string">       -1.77666112e+01,  3.80986521e+00,  6.92224640e-04, -1.47556685e+00,</span></span><br><span class="line"><span class="string">        3.06049479e-01, -1.23345939e-02, -9.52747232e-01,  9.31168327e-03,</span></span><br><span class="line"><span class="string">       -5.24758378e-01,  3.64594884e+01])</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">print(b_)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">运行结果:</span></span><br><span class="line"><span class="string">36.45948838509001</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h2 id="扩展一-最小二乘法和向量范数"><a href="#扩展一-最小二乘法和向量范数" class="headerlink" title="扩展一: 最小二乘法和向量范数"></a>扩展一: 最小二乘法和向量范数</h2><p>$$\min_{w}||Xw-y||_2^2$$</p><ul><li>右上角的2是平方</li><li>右下角的2是向量2范数</li><li>竖线内的表达式是向量</li></ul><p><strong>根据最小二乘法的公式, 推导得出</strong></p><p>$$w = (X^TX)^{-1}X^Ty$$</p><p><strong>向量的1-范数(表示各个元素的绝对值的和)</strong></p><p>$$||X||<em>1 = \sum\limits</em>{i=1}^n |x_i|$$</p><p><strong>向量的2-范数(表示每个元素的平方和再开平方)</strong></p><p>$$||X||<em>2 = \sqrt{\sum\limits</em>{i=1}^n x_i^2}$$</p><p><strong>向量的无穷范数(所有向量元素绝对值中的最大值)</strong></p><p>$$||X||<em>{\infty} = \max\limits</em>{1 \geq i \leq n}|X_i|$$</p><h2 id="扩展二-导数-偏导数"><a href="#扩展二-导数-偏导数" class="headerlink" title="扩展二: 导数, 偏导数"></a>扩展二: 导数, 偏导数</h2><p><strong>导数:</strong><br>对函数$$f(x) = x^2+3x+8$$ 求导得: $$f(x)’ = 2x+3$$</p><p>求导规则: </p><ul><li>参数求导为0</li><li>参数乘变量求导为常数</li><li>变量的次方求导: $$x^y$$求导为$$yx^{y-1}$$</li><li>复合函数求导:<ul><li>$$(x^2-x)^2$$求导: 先将括号看成一个整体求导, 结果再乘以括号内的求导结果</li><li>$$2(x^2-x)(2x-1)$$</li></ul></li></ul><p><strong>偏导数:</strong><br>有多个变量得函数求导:</p><p>对函数: $$f(x, y) = x^2+xy+y^2$$ 求导:</p><p>求导规则: 多变量函数只能针对某一个变量求导,此时将其他变量看成常数</p><p>将x看成常数a: $$f_a(y) = a^2+ay+y^2$$</p><p>求导得:$$f_a’(y) = a+2y$$</p><p>故求导得: $$\frac{\partial f}{\partial y}(x,y)=x+2y$$</p><p><strong>实现线性回归的两种方式:</strong></p><ol><li><p>正规方程</p></li><li><p>梯度下降</p></li></ol><h1 id="二-正规方程"><a href="#二-正规方程" class="headerlink" title="二: 正规方程"></a>二: 正规方程</h1><h2 id="一-损失函数"><a href="#一-损失函数" class="headerlink" title="(一): 损失函数"></a>(一): 损失函数</h2><p><strong>最小二乘法:</strong></p><p>$$\min\limits_{w}||Xw-y||_2^2$$</p><p><strong>当X和y都是常数时,按照向量2范数将上面的最小二乘法解开:</strong></p><p>$$f(w)=(Xw-y)^2$$</p><p><strong>将X,y替换成常数a,b</strong></p><p>$$f(w)=(aw-b)^2$$</p><p>$$f(w)=a^2w^2 - 2abw + b^2$$</p><p>​        由于最小二乘法方程的函数值都是大雨或等于0的,所以此时得到一个开口向</p><p>上的抛物线(一元二次方程)</p><p>​        此时的$$f(w)$$就是损失函数,在此时求该函数的导数(抛物线函数顶点的导数为0)</p><p>就能得到该函数的最小值,也就是最小损失</p><p>$$f’(w)=2a^2w-2ab=0$$</p><p><strong>此时即可算出最小的$$w$$,即最小损失</strong></p><h2 id="二-矩阵常用求导公式"><a href="#二-矩阵常用求导公式" class="headerlink" title="(二): 矩阵常用求导公式"></a>(二): 矩阵常用求导公式</h2><p><strong>X的转置矩阵对X矩阵求导, 求解出来是单位矩阵</strong></p><ul><li><p>$$\frac{dX^T}{dX} = I$$ </p></li><li><p>$$\frac{dX}{dX^T} = I$$</p></li></ul><p><strong>X的转置矩阵和一个常数矩阵相乘再对X矩阵求导, 求解出来就是改常数矩阵</strong></p><ul><li>$$\frac{dX^TA}{dX} = A$$ </li><li>$$\frac{dAX}{dX} = A^T$$</li><li>$$\frac{dXA}{dX} = A^T$$</li><li>$$\frac{dAX}{dX^T} = A$$</li></ul><h2 id="三-正规方程矩阵推导过程"><a href="#三-正规方程矩阵推导过程" class="headerlink" title="(三): 正规方程矩阵推导过程"></a>(三): 正规方程矩阵推导过程</h2><p><font color=red>此时X,w,y都是矩阵</font></p><h3 id="1-公式化简"><a href="#1-公式化简" class="headerlink" title="1: 公式化简"></a>1: 公式化简</h3><p><strong>1: 最小二乘法:</strong></p><p>$$f(w) = ||Xw-y||_2^2$$</p><p><strong>2: 向量2范数:</strong></p><p>$$||X||<em>2 = \sqrt{\sum\limits</em>{i = 1}^nx_i^2}$$</p><p><strong>3: 将向量2范数的公式带入到最小二乘法中得:</strong></p><p>$$f(w)=(\sqrt{(Xw-y)^2})^2$$</p><p><strong>4. 化简:</strong></p><p>$$f(w)=(Xw-y)^2$$</p><p><font color=red>由于X, w, y都是矩阵, 运算后还是矩阵; 矩阵得乘法是一个矩阵得行和另一个矩阵得列相乘; 所以矩阵的平方就是该矩阵乘以他本身的转置矩阵</font></p><p><strong>5. 所以:</strong></p><p>$$f(w)=(Xw-y)^T(Xw-y)$$</p><p><strong>6. 展开:</strong></p><p><font color=red>注意: 整体转置变成每个元素都转置时,若是有乘法, 则相乘的两个矩阵要交换位置; 如下所示!!!</font></p><p>$$f(w)=(w^TX^T-y^T)(Xw-y)$$</p><p>$$f(w)=w^TX^TXw-w^TX^Ty-y^TXw+y^Ty$$</p><p><font color=red>注意: 若想交换两个相乘的矩阵再算式中的位置,则交换之后双方都需要转置一次; 如下所示!!!</font></p><p>$$f(w)=w^TX^TXw-(X^Ty)^T(w^T)^T-y^TXw+y^Ty$$</p><p>$$f(w)=w^TX^TXw-y^TXw-y^TXw+y^Ty$$</p><p>$$f(w) = w^TX^TXw - 2y^TXw + y^Ty $$</p><h3 id="2-求导"><a href="#2-求导" class="headerlink" title="2: 求导"></a>2: 求导</h3><p>$$f(w) = w^TX^TXw - 2y^TXw + y^Ty $$</p><p><strong>这里 $$y^Ty$$ 是常数求导后为0</strong></p><p><strong>$$2y^TXw$$ 求导:</strong></p><p>$$\frac{d(2y^TX)w}{dw}=(2y^TX)^T=2X^T(y^T)^T=2X^Ty$$</p><p><strong>$$w^TX^TXw$$求导:</strong></p><p>$$\frac{dw^TX^TXw}{dw}=\frac{d(w^TX^TX)w}{dw}+\frac{dw^T(X^TXw)}{dw}=(w^TX^TX)^T+X^TXw=X^T(X^T)^T(w^T)^T+X^TXw=2X^TXw$$</p><p><strong>所以:</strong></p><p>$$f’(w) =  2X^TXw - 2X^Ty$$</p><p><strong>令$$f’(w)=0$$,则:</strong></p><p>$$2X^TXw - 2X^Ty = 0$$</p><p>$$X^TXw=X^Ty$$</p><p><strong>矩阵运算没有除法,可以用逆矩阵实现除法的效果</strong></p><p><strong>等式两边同时乘以$$X^TX$$的逆矩阵$$(X^TX)^{-1}$$</strong></p><p>$$(X^TX)^{-1}(X^TX)w=(X^TX)^{-1}X^Ty$$</p><p>$$Iw=(X^TX)^{-1}X^Ty$$  <strong>I是单位矩阵</strong></p><p><strong>得到正规方程:</strong></p><p>$$w=(X^TX)^{-1}X^Ty$$</p><h2 id="四-数据挖掘实例-预测2020年淘宝双十一交易额"><a href="#四-数据挖掘实例-预测2020年淘宝双十一交易额" class="headerlink" title="(四): 数据挖掘实例(预测2020年淘宝双十一交易额)"></a>(四): 数据挖掘实例(预测2020年淘宝双十一交易额)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"></span><br><span class="line">X = np.arange(<span class="number">2009</span>, <span class="number">2020</span>)   <span class="comment"># 年份</span></span><br><span class="line">X = X <span class="number">-2008</span>   <span class="comment"># 年份数值太大,差别不明显</span></span><br><span class="line">y = np.array([<span class="number">0.5</span>, <span class="number">9.36</span>, <span class="number">52</span>, <span class="number">191</span>, <span class="number">350</span>, <span class="number">571</span>, <span class="number">912</span>, <span class="number">1207</span>, <span class="number">1682</span>, <span class="number">2135</span>, <span class="number">2684</span>])   <span class="comment"># 09年到19年的交易额</span></span><br></pre></td></tr></table></figure><p><strong>假设X和y之间是一元三次的关系(按照前几年的数据走势提出的假设)</strong></p><p>$$f(x)=w_1x+w_2x^2+w_3x^3+b$$</p><p>$$f(x)=w_0x^0+w_1x^1+w_2x^2+w_3x^3$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># X_oo = np.concatenate([a,a])   # 横着级联</span></span><br><span class="line">X_train = np.c_[X**<span class="number">0</span>, X**<span class="number">1</span>, X**<span class="number">2</span>, X**<span class="number">3</span>]   <span class="comment"># 竖着级联</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">array([[   1,    1,    1,    1],</span></span><br><span class="line"><span class="string">       [   1,    2,    4,    8],</span></span><br><span class="line"><span class="string">       [   1,    3,    9,   27],</span></span><br><span class="line"><span class="string">       [   1,    4,   16,   64],</span></span><br><span class="line"><span class="string">       [   1,    5,   25,  125],</span></span><br><span class="line"><span class="string">       [   1,    6,   36,  216],</span></span><br><span class="line"><span class="string">       [   1,    7,   49,  343],</span></span><br><span class="line"><span class="string">       [   1,    8,   64,  512],</span></span><br><span class="line"><span class="string">       [   1,    9,   81,  729],</span></span><br><span class="line"><span class="string">       [   1,   10,  100, 1000],</span></span><br><span class="line"><span class="string">       [   1,   11,  121, 1331]], dtype=int32)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">linear = LinearRegression(fit_intercept=<span class="literal">False</span>)   <span class="comment"># 声明算法; fit_intercept=False将截距设置为0, w0就是截距</span></span><br><span class="line">linear.fit(X_train, y)   <span class="comment"># 训练</span></span><br><span class="line">w_ = linear.coef_</span><br><span class="line">print(linear.coef_.round(<span class="number">2</span>))   <span class="comment"># 获取系数</span></span><br><span class="line">print(linear.intercept_)   <span class="comment"># 获取截距</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[ 58.77 -84.06  27.95   0.13]</span></span><br><span class="line"><span class="string">0.0</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p><strong>可以得到方程:</strong></p><p>$$f(x)=58.77-84.06x+27.95x^2+0.13x^3$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">X_test = np.linspace(<span class="number">0</span>,<span class="number">12</span>,<span class="number">126</span>)   <span class="comment"># 线性分割(将0,12之间分成126分)等差数列包含1和12</span></span><br><span class="line">X_test = np.c_[X_test**<span class="number">0</span>, X_test**<span class="number">1</span>, X_test**<span class="number">2</span>, X_test**<span class="number">3</span>]   <span class="comment"># 和训练数据保持一致</span></span><br><span class="line">y_ = linear.predict(X_test)   <span class="comment"># 使用模型预测</span></span><br><span class="line">plt.plot(np.linspace(<span class="number">0</span>,<span class="number">12</span>,<span class="number">126</span>), y_, color=<span class="string">'g'</span>)   <span class="comment"># 绘制预测方程曲线</span></span><br><span class="line">plt.scatter(np.arange(<span class="number">1</span>,<span class="number">12</span>), y, color=<span class="string">'red'</span>)   <span class="comment"># 绘制每年的真实销量</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义函数</span></span><br><span class="line">fun = <span class="keyword">lambda</span> x : w_[<span class="number">0</span>] + w_[<span class="number">1</span>]*x + w_[<span class="number">2</span>]*x**<span class="number">2</span> + w_[<span class="number">-1</span>]*x**<span class="number">3</span></span><br><span class="line"></span><br><span class="line">fun(<span class="number">12</span>)</span><br><span class="line"><span class="string">'''3294.2775757576132'''</span></span><br></pre></td></tr></table></figure><h1 id="三-梯度下降"><a href="#三-梯度下降" class="headerlink" title="三: 梯度下降"></a>三: 梯度下降</h1><p>​        梯度下降法的基本思想可以类比为一个下山的过程。假设这样一个场景：一个人被困在山上，需要从山上下</p><p>来(i.e. 找到山的最低点，也就是山谷)。但此时山上的浓雾很大，导致可视度很低。因此，下山的路径就无法确</p><p>定，他必须利用自己周围的信息去找到下山的路径。这个时候，他就可以利用梯度下降算法来帮助自己下山。具体</p><p>来说就是，以他当前的所处的位置为基准，寻找这个位置最陡峭的地方，然后朝着山的高度下降的地方走，同理，</p><p>如果我们的目标是上山，也就是爬到山顶，那么此时应该是朝着最陡峭的方向往上走。然后每走一段距离，都反复</p><p>采用同一个方法，最后就能成功的抵达山谷。</p><h2 id="一-梯度下降"><a href="#一-梯度下降" class="headerlink" title="(一): 梯度下降"></a>(一): 梯度下降</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = <span class="keyword">lambda</span> w : (w <span class="number">-3.5</span>)**<span class="number">2</span> <span class="number">-4.5</span>*w +<span class="number">10</span></span><br><span class="line">d = <span class="keyword">lambda</span> w : <span class="number">2</span>*(w<span class="number">-3.5</span>)<span class="number">-4.5</span>   <span class="comment"># 梯度 == 导数</span></span><br><span class="line">step = <span class="number">0.1</span>   <span class="comment"># 梯度下降的步幅,比率,学习率(默认是1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 求当w(x值)为多少时,得到的函数值最小</span></span><br><span class="line"></span><br><span class="line">w = np.random.randint(<span class="number">0</span>,<span class="number">11</span>,size=<span class="number">1</span>)[<span class="number">0</span>]   <span class="comment"># 随机生成一个初始值数</span></span><br><span class="line">last_w = w + <span class="number">0.1</span>   <span class="comment"># 梯度下降,每走一步,目标值,都会更新</span></span><br><span class="line">precision = <span class="number">1e-4</span>   <span class="comment"># 精确率(误差率,越小越精确,并不是越小越好)</span></span><br><span class="line">print(<span class="string">'==============更新前的w:'</span>, w)</span><br><span class="line">w_ = [w]</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">if</span> np.abs(w - last_w) &lt; precision:    <span class="comment"># 退出条件</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    last_w = w    <span class="comment"># 更新</span></span><br><span class="line">    w -= step*d(w)   </span><br><span class="line">    <span class="comment"># 随机初始值在目标值的左边时, d(w)为负, w = w-step*d(w) 会使得w慢慢变大趋近目标值</span></span><br><span class="line">    <span class="comment"># 随机初始值在目标值的右边时, d(w)为正, w = w-step*d(w) 会使得w慢慢变小趋近目标值</span></span><br><span class="line">    w_.append(w)</span><br><span class="line">    print(<span class="string">'==============更新后的w:'</span>, w)</span><br></pre></td></tr></table></figure><h2 id="二-梯度下降实现线性回归"><a href="#二-梯度下降实现线性回归" class="headerlink" title="(二): 梯度下降实现线性回归"></a>(二): 梯度下降实现线性回归</h2><h3 id="1-构造数据"><a href="#1-构造数据" class="headerlink" title="1. 构造数据"></a>1. 构造数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">X = np.linspace(<span class="number">-2</span>, <span class="number">12</span>, <span class="number">40</span>).reshape(<span class="number">40</span>,<span class="number">1</span>)   </span><br><span class="line"><span class="comment"># reshape(40,1)改变形状; 40这个位置可以写成-1, 此时-1代表40; 当后面的1变为2时,此时-1代表20; 也就是说当后面的数值变化时,系统自动用前面规定的总数计算出相应的结果,而这些结果都可以用-1代替; </span></span><br><span class="line">w = np.random.randint(<span class="number">1</span>,<span class="number">9</span>,size = <span class="number">1</span>)   <span class="comment"># 系数</span></span><br><span class="line">b = np.random.randint(<span class="number">-5</span>,<span class="number">5</span>,size = <span class="number">1</span>)   <span class="comment"># 截距</span></span><br><span class="line">y = w*X + b + np.random.randn(<span class="number">40</span>,<span class="number">1</span>) * <span class="number">2</span>   <span class="comment"># 增加噪声</span></span><br><span class="line">plt.scatter(X, y)   <span class="comment"># 绘点</span></span><br></pre></td></tr></table></figure><h3 id="2-使用sklearn中的回归-梯度下降方法计算斜率和截距"><a href="#2-使用sklearn中的回归-梯度下降方法计算斜率和截距" class="headerlink" title="2. 使用sklearn中的回归 - 梯度下降方法计算斜率和截距"></a>2. 使用sklearn中的回归 - 梯度下降方法计算斜率和截距</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">linear = LinearRegression()   <span class="comment"># 定义算法</span></span><br><span class="line">linear.fit(X, y)  <span class="comment"># 训练</span></span><br><span class="line">X_test = np.linspace(<span class="number">-2</span>,<span class="number">12</span>,<span class="number">256</span>).reshape(<span class="number">-1</span>, <span class="number">1</span>)   <span class="comment"># 预测数据</span></span><br><span class="line">y_ = linear.predict(X_test)   <span class="comment"># 预测结果</span></span><br><span class="line">print(<span class="string">'真实斜率和截距'</span>, w, b)</span><br><span class="line">print(<span class="string">'算法计算的斜率和截距'</span>, linear.coef_, linear.intercept_)  <span class="comment"># 截距和斜率</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">真实斜率和截距 [5] [3]</span></span><br><span class="line"><span class="string">算法计算的斜率和截距 [[4.91521288]] [3.06426015]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">plt.plot(X_test, y_, color=<span class="string">'g'</span>)   <span class="comment"># 绘制线性回归方程</span></span><br><span class="line">plt.scatter(X, y, color=<span class="string">'r'</span>)   <span class="comment"># 绘制实际的点</span></span><br></pre></td></tr></table></figure><h3 id="3-自定义梯度下降的类实现sklearn中的回归-梯度功能"><a href="#3-自定义梯度下降的类实现sklearn中的回归-梯度功能" class="headerlink" title="3.自定义梯度下降的类实现sklearn中的回归 - 梯度功能"></a>3.自定义梯度下降的类实现sklearn中的回归 - 梯度功能</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinearModel</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span>   <span class="comment"># 初始化, 随机给定截距和斜率</span></span><br><span class="line">        self.w = np.random.randn(<span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line">        self.b = np.random.randn(<span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">model</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.w*x + self.b   <span class="comment"># 一元一次线性方程; 模型</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">loss</span><span class="params">(self,x,y)</span>:</span><span class="comment">#损失，最小二乘法</span></span><br><span class="line">        cost = (self.model(x) - y)**<span class="number">2</span> <span class="comment"># 损失函数越小越好</span></span><br><span class="line">        <span class="comment"># 求解梯度，两个未知数，所以，偏导</span></span><br><span class="line">        d_w = <span class="number">2</span>*(self.model(x) - y)*x <span class="comment"># 斜率w的偏导</span></span><br><span class="line">        d_b = <span class="number">2</span>*(self.model(x) - y)*<span class="number">1</span> <span class="comment"># 截距b的偏导</span></span><br><span class="line">        <span class="keyword">return</span> cost,d_w,d_b</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gradient_descent</span><span class="params">(self, step, d_w, d_b)</span>:</span>   <span class="comment"># 梯度下降</span></span><br><span class="line">        self.w -= step*d_w  <span class="comment"># 更新斜率</span></span><br><span class="line">        self.b -= step*d_b  <span class="comment"># 更新截距</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit</span><span class="params">(self, X, y)</span>:</span>   <span class="comment"># 训练模型, 将数据给模型,寻找规律</span></span><br><span class="line">        precision = <span class="number">1e-4</span>   <span class="comment"># 精确度</span></span><br><span class="line">        last_w = self.w + <span class="number">0.01</span></span><br><span class="line">        last_b = self.b + <span class="number">0.01</span></span><br><span class="line">        </span><br><span class="line">        print(<span class="string">'------------------------初始的截距和斜率:'</span>, self.w, self.b)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> (np.abs(self.w-last_w) &lt; precision) &amp; (np.abs(self.b-last_b) &lt; precision):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            last_w = self.w   <span class="comment"># 更新之前,先保留记录</span></span><br><span class="line">            last_b = self.b</span><br><span class="line">            </span><br><span class="line">            cost_ = <span class="number">0</span></span><br><span class="line">            dw_ = <span class="number">0</span></span><br><span class="line">            db_ = <span class="number">0</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">40</span>):   <span class="comment"># 计算40个，返回40个偏导数，求平均值</span></span><br><span class="line">                cost,dw,db = self.loss(X[i,<span class="number">0</span>],y[i,<span class="number">0</span>])</span><br><span class="line">                cost_ += cost/<span class="number">40</span></span><br><span class="line">                dw_ += dw/<span class="number">40</span></span><br><span class="line">                db_ += db/<span class="number">40</span></span><br><span class="line">                </span><br><span class="line">            self.gradient_descent(<span class="number">0.01</span>, dw_, db_)</span><br><span class="line">            print(<span class="string">'------------------------更新后的截距和斜率:'</span>, self.w, self.b)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(self, X)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.model(X)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">model = LinearModel()   <span class="comment"># 定义算法</span></span><br><span class="line">w, b = model.fit(X, y)   <span class="comment"># 获取斜率和截距</span></span><br><span class="line">y_ = model.predict(X_test)   <span class="comment"># 用测试数据获取目标值</span></span><br><span class="line">plt.plot(X_test, y_, color=<span class="string">'g'</span>)   <span class="comment"># 绘制线性方程</span></span><br><span class="line">plt.scatter(X, y, color=<span class="string">'r'</span>)   <span class="comment"># 绘制目标点</span></span><br></pre></td></tr></table></figure><h2 id="扩展-3西格玛剔除异常值"><a href="#扩展-3西格玛剔除异常值" class="headerlink" title="扩展: 3西格玛剔除异常值"></a>扩展: 3西格玛剔除异常值</h2><p>$$3\sigma$$</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> 机器学习 </tag>
            
            <tag> sklearn </tag>
            
            <tag> 线性回归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django进阶</title>
      <link href="/2020/01/12/Django%E8%BF%9B%E9%98%B6%E7%94%A8%E6%B3%95/"/>
      <url>/2020/01/12/Django%E8%BF%9B%E9%98%B6%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>Django进阶和API接口</p><a id="more"></a><h1 id="一丶-工欲善其事必先利其器"><a href="#一丶-工欲善其事必先利其器" class="headerlink" title="一丶 工欲善其事必先利其器"></a>一丶 工欲善其事必先利其器</h1><h2 id="1-pip全局使用豆瓣镜像设置"><a href="#1-pip全局使用豆瓣镜像设置" class="headerlink" title="1. pip全局使用豆瓣镜像设置"></a>1. pip全局使用豆瓣镜像设置</h2><h3 id="windows系统中"><a href="#windows系统中" class="headerlink" title="windows系统中"></a>windows系统中</h3><p>①在c盘—&gt;用户—&gt;anjhon—&gt;文件夹中创建pip文件夹<br>②在pip文件夹中创建pip.ini文件<br>③在pip.ini文件中添加以下代码</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">global</span>]</span><br><span class="line"><span class="built_in">index</span>-url=http<span class="variable">s:</span>//pypi.doubanio.<span class="keyword">com</span>/simple</span><br></pre></td></tr></table></figure><h3 id="git中"><a href="#git中" class="headerlink" title="git中"></a>git中</h3><p>cd ~   (进入用户组目录)<br>进入.pip文件夹(没有就创建)<br>创建pip.conf文件<br>在文件内添加以下代码</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">global</span>]</span><br><span class="line"><span class="built_in">index</span>-url=http<span class="variable">s:</span>//pypi.doubanio.<span class="keyword">com</span>/simple</span><br></pre></td></tr></table></figure><h2 id="2-调试工具Debug-Tool-Bar安装"><a href="#2-调试工具Debug-Tool-Bar安装" class="headerlink" title="2. 调试工具Debug-Tool-Bar安装"></a>2. 调试工具Debug-Tool-Bar安装</h2><ol><li>安装：<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install </span>django-<span class="built_in">debug</span>-toolbar</span><br></pre></td></tr></table></figure></li><li>添加app<figure class="highlight diff"><figcaption><span>settings.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">'debug_toolbar',</span><br></pre></td></tr></table></figure></li><li>添加中间键<figure class="highlight diff"><figcaption><span>settings.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">'debug_toolbar.middleware.DebugToolbarMiddleware',</span><br></pre></td></tr></table></figure></li><li>配置前端效果：<figure class="highlight diff"><figcaption><span>setting.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DEBUG_TOOLBAR_CONFIG = &#123;</span><br><span class="line">    # 引入jQuery库</span><br><span class="line">    'JQUERY_URL': 'https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js',</span><br><span class="line">    # 工具栏是否折叠</span><br><span class="line">    'SHOW_COLLAPSED': True,</span><br><span class="line">    # 是否显示工具栏</span><br><span class="line">    'SHOW_TOOLBAR_CALLBACK': lambda x: True,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>路由配置<figure class="highlight diff"><figcaption><span>urls.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if settings.DEBUG:</span><br><span class="line">    import debug_toolbar</span><br><span class="line">urlpatterns.insert(0, path('__debug__/', include(debug_toolbar.urls)))</span><br></pre></td></tr></table></figure></li></ol><h1 id="二丶-Django用法进阶"><a href="#二丶-Django用法进阶" class="headerlink" title="二丶 Django用法进阶"></a>二丶 Django用法进阶</h1><h2 id="1-django自带分页器"><a href="#1-django自带分页器" class="headerlink" title="1. django自带分页器"></a>1. django自带分页器</h2><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 导入分页工具</span><br><span class="line">from django.core.paginator <span class="keyword">import</span> Paginator</span><br><span class="line"></span><br><span class="line"># 调用分页器函数会返回一个对象</span><br><span class="line">page_obj = = Paginator(obj_list, per_page)</span><br><span class="line">obj_list是需要分页的内容</span><br><span class="line">per_page是每页的内容数量,一般为int类型</span><br><span class="line"></span><br><span class="line"># 对象的使用方法</span><br><span class="line"><span class="function"><span class="title">page_obj</span>.has_previous  ---&gt;</span>  是否存在前一页（布尔值）</span><br><span class="line"><span class="function"><span class="title">page_obj</span>.has_next  ---&gt;</span>  是否存在下一页（布尔值）</span><br><span class="line"><span class="function"><span class="title">page_obj</span>.previous_page_number  ---&gt;</span>  前一页的页码（数值）</span><br><span class="line"><span class="function"><span class="title">page_obj</span>.next_page_number  ---&gt;</span>  下一页的页码（数值）</span><br><span class="line"><span class="function"><span class="title">page_obj</span>.number  ---&gt;</span>  当前页的页码（数值）</span><br><span class="line"><span class="function"><span class="title">page_obj</span>.get_page(<span class="built_in">page</span>)  ---&gt;</span>  ???</span><br><span class="line"><span class="function"><span class="title">page_obj</span>.<span class="built_in">page</span>(3)  ---&gt;</span>  访问指定页面</span><br><span class="line"><span class="function"><span class="title">page2</span>.start_index()  ---&gt;</span>  从<span class="number">1</span>开始计数的当前页的第一个对象</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="function"><span class="title">page2</span>.end_index()  ---&gt;</span>  从<span class="number">1</span>开始计数的当前页最后<span class="number">1</span>个对象</span><br><span class="line"><span class="function"><span class="title">paginator</span>.page_range  ---&gt;</span>  页码范围（迭代对象）</span><br><span class="line"><span class="function"><span class="title">paginator</span>.num_pages  ---&gt;</span>  页面总数量（数值）</span><br></pre></td></tr></table></figure><h2 id="2-查询-查询结果是集合类型的对象"><a href="#2-查询-查询结果是集合类型的对象" class="headerlink" title="2. 查询(查询结果是集合类型的对象)"></a>2. 查询(查询结果是集合类型的对象)</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">Entry.objects.all()   ---&gt;   查询所有记录</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定查询:only</span></span><br><span class="line">queryset = Teacher.objects.filter(<span class="attribute">subject__no</span>=sno).only('', <span class="string">''</span>, <span class="string">''</span>)</span><br><span class="line"><span class="comment"># 排除查询:defer</span></span><br><span class="line">queryset = Teacher.objects.filter(<span class="attribute">subject__no</span>=sno).defer('', <span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 空值查询:</span></span><br><span class="line">District.objects.filter(<span class="attribute">pid__null</span>=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 条件查询:</span></span><br><span class="line">Entry.objects.filter(<span class="attribute">num</span>=3)   ---&gt;   查询<span class="attribute">num</span>=3的数据记录</span><br><span class="line">Entry.objects.exclude(<span class="attribute">num</span>=3)   ---&gt;   查询<span class="attribute">num</span>=3的数据记录</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用切片的方法可以进行范围取值,相当于SQL语句中的LIMIT和OFFSET子句</span></span><br><span class="line">Entry.objects.all()[:5]   ---&gt;   返回前5个对象</span><br><span class="line">Entry.objects.all()[5:10]   ---&gt;   返回第6个到第10个对象</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关键字查询:</span></span><br><span class="line">1) 精确查询: __exact (默认就是精准查询,可以不写)</span><br><span class="line">Entry.objects.<span class="builtin-name">get</span>(<span class="attribute">headline__exact</span>=<span class="string">"Cat bites dog"</span>)</span><br><span class="line">2) 模糊查询</span><br><span class="line">__contains：是否包含</span><br><span class="line">__startswith: 以指定值开头</span><br><span class="line">__endswith：以指定值结尾</span><br><span class="line">3) 空查询</span><br><span class="line">isnull：是否为<span class="literal">null</span></span><br><span class="line">4) 范围查询</span><br><span class="line"><span class="keyword">in</span>：是否包含在范围内</span><br><span class="line">5) 比较查询</span><br><span class="line">gt、gte、lt、lte：大于、大于等于、小于、小于等于</span><br><span class="line">6) 日期查询</span><br><span class="line">year、month、day、week_day、hour、minute、second：对日期时间类型的属性进行运算</span><br><span class="line">7) 不区分大小写: __iexact</span><br><span class="line">Entry.objects.<span class="builtin-name">get</span>(<span class="attribute">name__iexact</span>=<span class="string">"beatles blog"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Q对象查询</span></span><br><span class="line">在查询的条件中需要组合条件时(例如两个条件“且”或者“或”)。我们可以使用Q()查询对象</span><br><span class="line"><span class="keyword">from</span> django.db.models import Q</span><br><span class="line">Q(<span class="attribute">question__startswith</span>=<span class="string">'What'</span>)</span><br><span class="line">可以在Q()对象的前面使用字符“~”来代表意义“非”</span><br><span class="line">可以使用 “&amp;”或者“|”还有括号来对条件进行分组从而组合成更加复杂的查询逻辑</span><br><span class="line">Q(<span class="attribute">question__startswith</span>=<span class="string">'Who'</span>) | Q(<span class="attribute">question__startswith</span>=<span class="string">'What'</span>)</span><br><span class="line">例:</span><br><span class="line">queryset = Record.objects.filter(Q(<span class="attribute">car__carno__startswith</span>=carno) | Q(<span class="attribute">car__owner__contains</span>=carno)).select_related('car').order_by('-offend_time')[(page - 1) * size:page * size]</span><br><span class="line">context[<span class="string">'records'</span>] = queryset</span><br><span class="line"># .select_related(<span class="string">'car'</span>)   在Q对象中car__carno已经实现连表查询,这时再用.select_related(<span class="string">'car'</span>)语法连同car一起查询</span><br><span class="line"></span><br><span class="line">.prefetch_related(<span class="string">'...'</span>)   ---&gt;   多对多顺带查询</span><br><span class="line">.select_related(<span class="string">'...'</span>)   ---&gt;   一对多顺带查询</span><br><span class="line">避免1+n出现</span><br></pre></td></tr></table></figure><h2 id="3-Vue"><a href="#3-Vue" class="headerlink" title="3. Vue"></a>3. Vue</h2><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">1. 属性:</span></span><br><span class="line"><span class="xml">1) el属性  -   字符串，传选择器(一般写id选择器), 将当前创建的Vue对象和html中的标签进行关联</span></span><br><span class="line"><span class="xml">2) data属性  -  通过对象的属性提供数据</span></span><br><span class="line"><span class="xml">3) methods属性 -  通过对象属性提供方法</span></span><br><span class="line"><span class="xml">4) computed属性 -  属性值必须函数, 函数的返回值就是使用属性的值</span></span><br><span class="line"><span class="xml">5) created钩子 - 在实例被创建之后被调用</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">2. Vue指令</span></span><br><span class="line"><span class="xml">1) 标签内容  -  </span><span class="template-variable">&#123;&#123;Vue属性名&#125;&#125;</span></span><br><span class="line"><span class="xml">2) 标签属性  -  v-bind:标签属性 = 'Vue属性名'</span></span><br><span class="line"><span class="xml">3) if语句   -  v-if='Vue属性名' (如果Vue属性值是true对应的标签就显示，否则就隐藏)</span></span><br><span class="line"><span class="xml">4) 循环结构  -  v-for = '变量 in 类型是数组的Vue属性'</span></span><br><span class="line"><span class="xml">5) 双向绑定  -  v-model='Vue属性名' (一般在表单标签中有效)</span></span><br><span class="line"><span class="xml">6) 事件绑定  -  v-on:事件名</span></span><br><span class="line"></span><br><span class="line"><span class="xml">3. 补充</span></span><br><span class="line"><span class="xml">1) 可以直接在标签内用 @事件名 的方法绑定事件,并直接调用事件函数</span></span><br><span class="line"><span class="xml">例:<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"prevPage()"</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">2) 缩写</span></span><br><span class="line"><span class="xml">v-bind 缩写</span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 完整语法 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"url"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 缩写 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">"url"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">v-on 缩写</span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 完整语法 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">"doSomething"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 缩写 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">"doSomething"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="4-字段映射器bpmapper-将数据库的查询对象转换成字典"><a href="#4-字段映射器bpmapper-将数据库的查询对象转换成字典" class="headerlink" title="4. 字段映射器bpmapper:  将数据库的查询对象转换成字典"></a>4. 字段映射器bpmapper:  将数据库的查询对象转换成字典</h2><p>1) 在应用文件夹下新建映射器文件 : mappers.py</p><figure class="highlight diff"><figcaption><span>app/mappers.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">from bpmappers import RawField, DelegateField</span><br><span class="line">from bpmappers.djangomodel import ModelMapper</span><br><span class="line">from polls.models import Subject, Teacher</span><br><span class="line"></span><br><span class="line">class SubjectMapper(ModelMapper):</span><br><span class="line">    """学科映射器"""</span><br><span class="line">    isHot = RawField('is_hot')</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        model = Subject</span><br><span class="line">        exclude = ('is_hot', )</span><br><span class="line">        </span><br><span class="line">    exclude = ()   ---&gt;   排除某些字段</span><br><span class="line">fields = ()   ---&gt;   包含某些字段</span><br><span class="line">fields = '__all__'   ---&gt;   序列化所有字段</span><br><span class="line">isHot = RawField('is_hot')   ---&gt;   将后端的is_hot映射成前端的isHot</span><br><span class="line">car = DelegateField(Car)   ---&gt;   将car字段委托Car类查询映射</span><br></pre></td></tr></table></figure><p>2) 调用映射器</p><figure class="highlight diff"><figcaption><span>app/views.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from polls.mappers import SubjectMapper</span><br><span class="line"></span><br><span class="line">def show_subjects(request):</span><br><span class="line">    """获取所有学科"""</span><br><span class="line">    queryset = Subject.objects.all()</span><br><span class="line">    subjects = [SubjectMapper(subject).as_dict()   # 调用映射器函数将查询对象变成有序字典</span><br><span class="line">                for subject in queryset]</span><br><span class="line">    return JsonResponse(subjects, safe=False)</span><br></pre></td></tr></table></figure><p>JsonResponse默认只能返回字典,若想返回列表需要给一个参数safe=False</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return <span class="constructor">JsonResponse(<span class="params">subjects</span>, <span class="params">safe</span>=False)</span></span><br></pre></td></tr></table></figure><p>列表生成式语法: (性能比列表追加元素要好)</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">records = [RecordMapper(<span class="keyword">record</span>).as_dict()</span><br><span class="line">           <span class="keyword">for</span> <span class="keyword">record</span> <span class="keyword">in</span> page_obj.object_list]</span><br><span class="line"># 从page_obj.object_list中取元素<span class="keyword">record</span>, 将<span class="keyword">record</span>传给RecordMapper().as_dict()转换成字典再添加到records里面</span><br></pre></td></tr></table></figure><h2 id="5-fetch请求"><a href="#5-fetch请求" class="headerlink" title="5.  fetch请求"></a>5.  fetch请求</h2><p>基本语法:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'http://example.com/movies.json'</span>)   <span class="comment"># 返回一个包含响应结果的promise</span></span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span><span class="params">(response)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> response.json();</span><br><span class="line">  &#125;)   <span class="comment"># 用.json()方法获取到的包含json数据的对象</span></span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span><span class="params">(myJson)</span> </span>&#123;</span><br><span class="line">    console.log(myJson);</span><br><span class="line">  &#125;);   <span class="comment"># 获取到json文件里的真实数据</span></span><br></pre></td></tr></table></figure><p>实例:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">let app = new Vue(&#123;</span><br><span class="line">el: <span class="string">'#app'</span>,</span><br><span class="line"><span class="keyword">data</span>: &#123;</span><br><span class="line"><span class="string">'searched'</span>: <span class="literal">false</span>,</span><br><span class="line">records: [],</span><br><span class="line">current_page: <span class="number">1</span>,</span><br><span class="line">total_page: <span class="number">0</span>,</span><br><span class="line">carno: <span class="string">''</span></span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">search()&#123;</span><br><span class="line">let url = <span class="string">'/search/?carno='</span> + <span class="keyword">this</span>.carno + <span class="string">'&amp;page='</span> + <span class="keyword">this</span>.current_page</span><br><span class="line">fetch(url).then(resp =&gt; resp.json()).then(json =&gt; &#123;</span><br><span class="line"><span class="keyword">this</span>.searched = json.searched;</span><br><span class="line"><span class="keyword">this</span>.records = json.records;</span><br><span class="line"><span class="keyword">this</span>.current_page = json.current_page;</span><br><span class="line"><span class="keyword">this</span>.total_page = json.total_page</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 注:<span class="keyword">this</span>代表app对象</span><br></pre></td></tr></table></figure><h2 id="6-配置redis数据库作为缓存"><a href="#6-配置redis数据库作为缓存" class="headerlink" title="6. 配置redis数据库作为缓存"></a>6. 配置redis数据库作为缓存</h2><h3 id="1-redis配置-添加以下代码"><a href="#1-redis配置-添加以下代码" class="headerlink" title="1. redis配置(添加以下代码)"></a>1. redis配置(添加以下代码)</h3><figure class="highlight diff"><figcaption><span>project/settings.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"># 添加缓存(可以配多组)</span><br><span class="line">CACHES = &#123;</span><br><span class="line">    # 默认缓存</span><br><span class="line">    'default': &#123;</span><br><span class="line">        # 用什么来做缓存</span><br><span class="line">        'BACKEND': 'django_redis.cache.RedisCache',</span><br><span class="line">        'LOCATION': [</span><br><span class="line">            # 可以一主多从</span><br><span class="line">            'redis://49.233.152.190:6379/0',   # 主机用来写</span><br><span class="line">            'redis://49.233.152.190:6379/0',   # 从机用来读(可以有多个)</span><br><span class="line">        ],</span><br><span class="line">        # 区别命名</span><br><span class="line">        'KEY_PREFIX': 'django19062',</span><br><span class="line">        'OPTIONS': &#123;</span><br><span class="line">            'CLIENT_CLASS': 'django_redis.client.DefaultClient',</span><br><span class="line"></span><br><span class="line">            # 池化技术(提前连接好,要用时借出去,用完还回来)用空间换时间</span><br><span class="line">            'CONNECTION_POOL_KWARGS': &#123;</span><br><span class="line">                # 最大连接数</span><br><span class="line">                'max_connections': 512,</span><br><span class="line">            &#125;,</span><br><span class="line">            'PASSWORD': '119148',</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # 会话缓存(会话放到缓存的好处:  性能好,不用手动清理,利于水平扩展)</span><br><span class="line">    'session': &#123;</span><br><span class="line">        # 用什么来做缓存</span><br><span class="line">        'BACKEND': 'django_redis.cache.RedisCache',</span><br><span class="line">        'LOCATION': [</span><br><span class="line">            # 可以一主多从</span><br><span class="line">            'redis://49.233.152.190:6379/1',   # 主机用来写</span><br><span class="line">            # 'redis://49.233.152.190:6379/0',   # 从机用来读(可以有多个)</span><br><span class="line">        ],</span><br><span class="line">        # 键的前缀</span><br><span class="line">        'KEY_PREFIX': 'django19062',</span><br><span class="line">        'OPTIONS': &#123;</span><br><span class="line">            'CLIENT_CLASS': 'django_redis.client.DefaultClient',</span><br><span class="line"></span><br><span class="line">            # 池化技术(提前连接好,要用时借出去,用完还回来)用空间换时间</span><br><span class="line">            'CONNECTION_POOL_KWARGS': &#123;</span><br><span class="line">                # 最大连接数</span><br><span class="line">                'max_connections': 1024,</span><br><span class="line">            &#125;,</span><br><span class="line">            'PASSWORD': '119148',</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 配置使用缓存来支持用户会话</span><br><span class="line">SESSION_ENGINE = 'django.contrib.sessions.backends.cache'</span><br><span class="line"># 会话数据放在哪一组缓存中</span><br><span class="line">SESSION_CACHE_ALIAS = 'session'</span><br><span class="line"># 设置会话保存的时长(单位秒)</span><br><span class="line">SESSION_CACHE_AGE = 86400  # 86400秒为1天</span><br></pre></td></tr></table></figure><h3 id="2-为视图函数-添加缓存机制"><a href="#2-为视图函数-添加缓存机制" class="headerlink" title="2. 为视图函数 添加缓存机制"></a>2. 为视图函数 添加缓存机制</h3><figure class="highlight diff"><figcaption><span>app/views.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ @cache_page(timeout=3600, cache='default')</span></span><br><span class="line">    def show_subjects(request):</span><br><span class="line">        """获取所有学科"""</span><br><span class="line">        queryset = Subject.objects.all()</span><br><span class="line">        subjects = [SubjectMapper(subject).as_dict()</span><br><span class="line">                    for subject in queryset]</span><br><span class="line">        return JsonResponse(subjects, safe=False)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="addition">+   @cache_page(timeout=300, cache='default')</span></span><br><span class="line">    def show_teachers(request):</span><br><span class="line">        """获取指定学科的老师"""</span><br><span class="line">        try:</span><br><span class="line">            sno = request.GET['sno']</span><br><span class="line">            subject = Subject.objects.get(no=sno)</span><br><span class="line">            queryset = Teacher.objects\</span><br><span class="line">                .filter(subject__no=sno).defer('subject')</span><br><span class="line">            teachers = [TeacherMapper(teacher).as_dict()</span><br><span class="line">                        for teacher in queryset]</span><br><span class="line">            data = &#123;</span><br><span class="line">                'subject': SubjectSimpleMapper(subject).as_dict(),</span><br><span class="line">                'teachers': teachers</span><br><span class="line">            &#125;</span><br><span class="line">            return JsonResponse(data)</span><br><span class="line">        except (KeyError, ValueError, Subject.DoesNotExist):</span><br><span class="line">            pass</span><br></pre></td></tr></table></figure><p>如你所见,添加缓存机制只需调用一个装饰器函数即可;在调用时需要传参,timeout为超时时间,在固定时间后缓存自动清除;cache选择缓存组;</p><h3 id="3-测试"><a href="#3-测试" class="headerlink" title="3. 测试"></a>3. 测试</h3><p>开启django服务,访问前端页面,然后观察控制台</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 第一次请求时在控制台中会使用<span class="keyword">select</span>语句在mysql中查询数据</span><br><span class="line">(<span class="number">0.289</span>) <span class="keyword">SELECT</span> <span class="symbol">`tb_subject`</span>.<span class="symbol">`no`</span>, <span class="symbol">`tb_subject`</span>.<span class="symbol">`name`</span>, <span class="symbol">`tb_subject`</span>.<span class="symbol">`intro`</span>, <span class="symbol">`tb_subject`</span>.<span class="symbol">`is_hot`</span> <span class="keyword">FROM</span> <span class="symbol">`tb_subject`</span> <span class="keyword">WHERE</span> <span class="symbol">`tb_subject`</span>.<span class="symbol">`no`</span> = <span class="number">1</span>; args=(1,)</span><br><span class="line">(0.358) <span class="keyword">SELECT</span> <span class="symbol">`tb_teacher`</span>.<span class="symbol">`no`</span>, <span class="symbol">`tb_teacher`</span>.<span class="symbol">`name`</span>, <span class="symbol">`tb_teacher`</span>.<span class="symbol">`sex`</span>, <span class="symbol">`tb_teacher`</span>.<span class="symbol">`birth`</span>, <span class="symbol">`tb_teacher`</span>.<span class="symbol">`photo`</span>, <span class="symbol">`tb_teacher`</span>.<span class="symbol">`intro`</span>, <span class="symbol">`tb_teacher`</span>.<span class="symbol">`good_count`</span>, <span class="symbol">`tb_teacher`</span>.<span class="symbol">`bad_count`</span> <span class="keyword">FROM</span> <span class="symbol">`tb_teacher`</span> <span class="keyword">WHERE</span> <span class="symbol">`tb_teacher`</span>.<span class="symbol">`sno`</span> = <span class="number">1</span>; args=(1,)</span><br><span class="line"></span><br><span class="line"># 再次刷新页面时直接从缓存中获取数据</span><br><span class="line">[08/Jan/2020 22:02:14] "GET /teachers/?sno=1 HTTP/1.1" 200 5605</span><br><span class="line">[08/Jan/2020 22:02:14] "GET /media/images/yuting.png HTTP/1.1" 304 0</span><br><span class="line">[08/Jan/2020 22:02:14] "GET /media/images/luohao.png HTTP/1.1" 304 0</span><br></pre></td></tr></table></figure><p>实时数据缓存到redis<br>在需要实时显示并且并发量较大时(例如简单的投票),若直接从sql数据库中取值则会大大增加数据库的压力,同时有一条请求在操作数据库的时候就会锁定该数据,完成后下一个请求才能操作.<br>此时将投票信息添加到缓存,再在缓存内添加定时任务,定时推送缓存的数据到数据库保存,这是一种牺牲暂时一致性,获取最终一致性和提高性能的方法</p><h1 id="三丶-API-应用程序编程接口"><a href="#三丶-API-应用程序编程接口" class="headerlink" title="三丶 API  -  应用程序编程接口"></a>三丶 API  -  应用程序编程接口</h1><p>自己定义的函数也是一种API接口<br>网络API   -   通过HTT请求一个URL获得数据</p><p>RESTful API</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">REpresentational State Transfer   <span class="comment">---&gt;   表述性状态转移</span></span><br><span class="line">REST架构两大特点: 无状态和幂等性</span><br><span class="line">HTTP协议请求行 <span class="keyword">GET</span> / POST / <span class="keyword">DELETE</span> / PUT / PATCH</span><br><span class="line">新建   <span class="comment">---&gt;   POST-不需要幂等性</span></span><br><span class="line">查看   <span class="comment">---&gt;   GET</span></span><br><span class="line">更新   <span class="comment">---&gt;   PUT/PATCH</span></span><br><span class="line">删除   <span class="comment">---&gt;   DELETE</span></span><br></pre></td></tr></table></figure><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作:"></a>1. 准备工作:</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>) 安装djangorestframework</span><br><span class="line">pip <span class="keyword">install </span>djangorestframework</span><br><span class="line">pip <span class="keyword">install </span>drf-<span class="keyword">extensions</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">2) </span>在<span class="keyword">INSTALLED_APPS注册rest_framework</span></span><br><span class="line"><span class="keyword">INSTALLED_APPS </span>= [</span><br><span class="line">    <span class="string">'rest_framework'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="2-API接口"><a href="#2-API接口" class="headerlink" title="2. API接口"></a>2. API接口</h2><h3 id="1-FBV-基于函数的视图"><a href="#1-FBV-基于函数的视图" class="headerlink" title="1) FBV   -   基于函数的视图"></a>1) FBV   -   基于函数的视图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># urls.py   控制器</span></span><br><span class="line">path(<span class="string">'agent/'</span>, get_agent),</span><br><span class="line"></span><br><span class="line"><span class="comment"># serializers.py  映射器</span></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> common.models <span class="keyword">import</span> Agent</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AgentSimpleSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Agent</span><br><span class="line">        exclude = (<span class="string">'estates'</span>, )</span><br><span class="line">        </span><br><span class="line"><span class="comment"># view视图函数:</span></span><br><span class="line"><span class="meta">@api_view(('GET', ))   # 指定请求,其他请求没效果</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_agent</span><span class="params">(request)</span>:</span></span><br><span class="line">    queryset = Agent.objects.all().defer(<span class="string">'estates'</span>)</span><br><span class="line">    serializer = AgentSimpleSerializer(queryset, many=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> Response(serializer.data)</span><br></pre></td></tr></table></figure><h3 id="2-CBV-基于类的视图"><a href="#2-CBV-基于类的视图" class="headerlink" title="2) CBV   -   基于类的视图"></a>2) CBV   -   基于类的视图</h3><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># urls.py   控制器</span></span><br><span class="line">path('estate/', EstatesView.as_view()),</span><br><span class="line">path('estate/<span class="variable">&lt;int:pk&gt;</span>/', EstatesView.as_view())   <span class="comment"># pk参数是一种约定,不能修改</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># serializers.py  映射器</span></span><br><span class="line"><span class="keyword">from</span> rest_framework import serializers</span><br><span class="line"><span class="keyword">from</span> common.models import E<span class="keyword">state</span></span><br><span class="line">class E<span class="keyword">state</span>Serializer(serializers.ModelSerializer):</span><br><span class="line">    class Meta:</span><br><span class="line">        model = E<span class="keyword">state</span></span><br><span class="line">        exclude = ('agents', 'district')</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># exclude = ()   ---&gt;   排除某些字段</span></span><br><span class="line"><span class="comment"># fields = ()   ---&gt;   包含某些字段</span></span><br><span class="line"><span class="comment"># fields = '__all__'   ---&gt;   序列化所有字段</span></span><br><span class="line"><span class="comment"># isHot = RawField('is_hot')   ---&gt;   将后端的is_hot映射成前端的isHot</span></span><br><span class="line"><span class="comment"># car = DelegateField(Car)   ---&gt;   将car字段委托Car类查询映射</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="comment"># view.py :</span></span><br><span class="line">class EstatesView(ListAPIView, RetrieveAPIView):</span><br><span class="line">    queryset = E<span class="keyword">state</span>.objects.<span class="literal">all</span>().defer('district', 'agents')</span><br><span class="line">    serializer_class = E<span class="keyword">state</span>Serializer</span><br><span class="line">    <span class="comment"># 将请求单个数据和请求多个数据分开</span></span><br><span class="line">    def get(<span class="literal">self</span>, request, *args, **kwargs):</span><br><span class="line">        if 'pk' <span class="keyword">in</span> kwargs:</span><br><span class="line">            cls = RetrieveAPIView   <span class="comment"># 单</span></span><br><span class="line">        else:</span><br><span class="line">            cls = ListAPIView   <span class="comment"># 多</span></span><br><span class="line">        return cls.get(<span class="literal">self</span>, request, *args, **kwargs)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 父类的选择       </span></span><br><span class="line">        CreateAPIView   ---&gt;   新增</span><br><span class="line">        ListAPIView   ---&gt;   查询所有</span><br><span class="line">        RetrieveAPIView   ---&gt;   查询单个</span><br><span class="line">        DestroyAPIView   ---&gt;   删除</span><br><span class="line">        UpdateAPIView   ---&gt;   修改</span><br><span class="line">        ListCreateAPIView</span><br><span class="line">        RetrieveUpdateAPIView</span><br><span class="line">        RetrieveDestroyAPIView</span><br><span class="line">        RetrieveUpdateDestroyAPIView</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">🚩 全套接口视图集</span><br><span class="line">📌 view.py : </span><br><span class="line"><span class="keyword">from</span> rest_framework.viewsets import ModelViewSet</span><br><span class="line">class HouseTypeViewSet(ModelViewSet):</span><br><span class="line">    queryset = HouseType.objects.<span class="literal">all</span>()</span><br><span class="line">    serializer_class = HouseTypeSerializer</span><br><span class="line">    </span><br><span class="line">📌 urls.py : </span><br><span class="line">urlpatterns = [</span><br><span class="line">...</span><br><span class="line">]</span><br><span class="line"><span class="comment"># 路由器</span></span><br><span class="line">router = SimpleRouter()   <span class="comment"># 简单路由</span></span><br><span class="line">router.register('housetypes', HouseTypeViewSet)   <span class="comment"># 注册</span></span><br><span class="line">urlpatterns += router.urls   <span class="comment"># 添加</span></span><br></pre></td></tr></table></figure><h4 id="接口测试"><a href="#接口测试" class="headerlink" title="接口测试:"></a>接口测试:</h4><p>1:  三方库: requests </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="type">json</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">resp = requests.<span class="keyword">get</span>(<span class="string">'http://localhost:8000/api/estates/'</span>)</span><br><span class="line">estates = <span class="type">json</span>.loads(resp.text)</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">index</span>, estate <span class="keyword">in</span> enumerate(estates):</span><br><span class="line">    print(<span class="keyword">index</span>, estate)</span><br></pre></td></tr></table></figure><p>2: Postman和Postwomam软件</p><h2 id="3-DRF-分页"><a href="#3-DRF-分页" class="headerlink" title="3. DRF 分页"></a>3. DRF 分页</h2><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">P<span class="function"><span class="title">ageNumberPagination</span>   ---&gt;</span>   按页码分页</span><br><span class="line">L<span class="function"><span class="title">imitoffsetPagination</span>   ---&gt;</span>   跳过N条,查第N+<span class="number">1</span>条</span><br><span class="line">CursorPagination</span><br></pre></td></tr></table></figure><p>1) 自定义分页</p><figure class="highlight diff"><figcaption><span>setting.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">中间键后面添加以下代码(全部实现分页)</span><br><span class="line"></span><br><span class="line"># DRF配置文件</span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    # 按页码分页</span><br><span class="line">'DEFAULT_PAGINATION_CLASS':'rest_framework.pagination.PageNumberPagination',</span><br><span class="line">    'PAGE_SIZE': 5,</span><br><span class="line">&#125;</span><br><span class="line"># 若单个视图类不想分页可以加以下代码:</span><br><span class="line">pagination_class = None</span><br></pre></td></tr></table></figure><p>2) 游标分页</p><figure class="highlight diff"><figcaption><span>app/views.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 定义游标分页类</span><br><span class="line">class EstatePagination(CursorPagination):</span><br><span class="line">    page_size_query_param = 'size' # 自定义单页显示记录数</span><br><span class="line">    max_page_size = 20   # 单页最多记录数</span><br><span class="line">    ordering = 'estateid'   # 按楼盘id分页</span><br><span class="line"># 在视图类里面调用</span><br><span class="line">pagination_class = EstatePagination</span><br></pre></td></tr></table></figure><h2 id="4-DRF缓存"><a href="#4-DRF缓存" class="headerlink" title="4. DRF缓存"></a>4. DRF缓存</h2><p>依赖项drf-extensions==0.5.0 为DRF提供缓存扩展</p><p>1)  django里的装饰器@method_decorator可以将装饰函数的装饰器变成可以装饰类方法的装饰器</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@method_decorator</span>(decorator=cache_page(<span class="number">500</span>), name=<span class="string">'list'</span>)</span><br><span class="line"><span class="variable">@method_decorator</span>(decorator=cache_page(<span class="number">120</span>), name=<span class="string">'retrieve'</span>)</span><br><span class="line">class HouseTypeViewSet(ModelViewSet):</span><br><span class="line">    queryset = HouseType.objects.all()</span><br><span class="line">    serializer_class = HouseTypeSerializer</span><br><span class="line">    # 拒绝分页</span><br><span class="line">    pagination_class = None</span><br></pre></td></tr></table></figure><p>2)  导入混入类做缓存</p><figure class="highlight diff"><figcaption><span>setting.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 缓存混入类</span><br><span class="line">REST_FRAMEWORK_EXTENSIONS = &#123;</span><br><span class="line">    'DEFAULT_CACHE_RESPONSE_TIMEOUT': 120,</span><br><span class="line">    'DEFAULT_USE_CACHE': 'default',</span><br><span class="line">    'DEFAULT_OBJECT_CACHE_KEY_FUNC': 'rest_framework_extensions.utils.default_object_cache_key_func',</span><br><span class="line">    'DEFAULT_LIST_CACHE_KEY_FUNC': 'rest_framework_extensions.utils.default_list_cache_key_func',</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight diff"><figcaption><span>app/views.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 导入混入类:</span><br><span class="line">from rest_framework_extensions.cache.mixins import CacheResponseMixin</span><br><span class="line"></span><br><span class="line"># 让视图类继承混入类:</span><br><span class="line">class EstatesView(CacheResponseMixin):   </span><br><span class="line"># 带Mixin的类是混入类,混入类必须写在前面</span><br></pre></td></tr></table></figure><h2 id="5-接口数据的筛选和排序"><a href="#5-接口数据的筛选和排序" class="headerlink" title="5. 接口数据的筛选和排序"></a>5. 接口数据的筛选和排序</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装django filter</span></span><br><span class="line">pip <span class="keyword">install</span> django-filter</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置文件添加应用</span></span><br><span class="line"><span class="string">'django_filters'</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入DjangoFilterBackend</span></span><br><span class="line"><span class="keyword">from</span> django_filters.rest_framework <span class="keyword">import</span> DjangoFilterBackend</span><br><span class="line"></span><br><span class="line"><span class="comment"># DjangoFilterBackend帮忙筛数据</span></span><br><span class="line">filter_backends = (DjangoFilterBackend, OrderingFilter)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--------------- 直接查询 ------------------</span></span><br><span class="line"><span class="comment"># 设置筛选条件</span></span><br><span class="line">filter_fields = (<span class="string">'district'</span>, )</span><br><span class="line"><span class="comment"># 设置排序字段</span></span><br><span class="line">ordering_fields = (<span class="string">'hot'</span>, <span class="string">'estateid'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">--------- 自定义一个类来指定查询条件-----------</span></span><br><span class="line"><span class="comment"># ①: 自定义类:</span></span><br><span class="line"><span class="keyword">class</span> EstateFilterSet(django_filters.FilterSet):</span><br><span class="line">    minhot = django_filters.NumberFilter(field_name=<span class="string">'hot'</span>, lookup_expr=<span class="string">'gte'</span>)</span><br><span class="line">    maxhot = django_filters.NumberFilter(field_name=<span class="string">'hot'</span>, lookup_expr=<span class="string">'lte'</span>)</span><br><span class="line">    keyword = django_filters.CharFilter(method=<span class="string">'filter_by_keyword'</span>)</span><br><span class="line"></span><br><span class="line">    @staticmethod</span><br><span class="line">    <span class="keyword">def</span> filter_by_keyword(queryset, <span class="keyword">key</span>, <span class="keyword">value</span>):</span><br><span class="line">        queryset = queryset.filter(Q(name__contains=<span class="keyword">value</span>) | Q(intro__contains=<span class="keyword">value</span>))</span><br><span class="line">        <span class="keyword">return</span> queryset</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="comment"># ②: 导入定义好的类</span></span><br><span class="line"><span class="keyword">from</span> common.utils <span class="keyword">import</span> EstateFilterSet</span><br><span class="line"></span><br><span class="line"><span class="comment"># ③: 在视图类里面使用(注,使用时要放到filter_backends后面)</span></span><br><span class="line">filter_backends = (DjangoFilterBackend, OrderingFilter)</span><br><span class="line">filterset_class = EstateFilterSet</span><br></pre></td></tr></table></figure><h2 id="6-接口限流-限制接口的访问频率"><a href="#6-接口限流-限制接口的访问频率" class="headerlink" title="6. 接口限流:  限制接口的访问频率"></a>6. 接口限流:  限制接口的访问频率</h2><p>原理: 在缓存(Redis)内记录IP地址,并记录访问次数,当请求超过阈值则限制访问</p><figure class="highlight diff"><figcaption><span>settings.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    # 限流配置</span><br><span class="line">    'DEFAULT_THROTTLE_CLASSES': (</span><br><span class="line">        'rest_framework.throttling.AnonRateThrottle',</span><br><span class="line">    ),</span><br><span class="line">    'DEFAULT_THROTTLE_RATES': &#123;</span><br><span class="line">        'anon': '5/min',</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若不想限流,可以在视图类里面加入以下代码:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">throttle_classes</span> = ()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> 后端 </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django入门之选课系统</title>
      <link href="/2020/01/05/Django%E5%85%A5%E9%97%A8%E4%B9%8B%E9%80%89%E8%AF%BE%E7%B3%BB%E7%BB%9F/"/>
      <url>/2020/01/05/Django%E5%85%A5%E9%97%A8%E4%B9%8B%E9%80%89%E8%AF%BE%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<p>Django是高水准的Python编程语言驱动的一个开源框架</p><a id="more"></a><h1 id="一丶Django简述"><a href="#一丶Django简述" class="headerlink" title="一丶Django简述"></a>一丶Django简述</h1><p>Django 最初由2003年到2005年间由负责创建和维护报纸网站的网络团队开发。它是一个高级的 Python 网络框架，可以快速开发安全和可维护的网站。</p><h2 id="Django框架基本工作流程"><a href="#Django框架基本工作流程" class="headerlink" title="Django框架基本工作流程"></a>Django框架基本工作流程</h2><p>在传统的数据驱动网站中，Web应用程序会等待来自Web浏览器（或其他客户端）的 HTTP 请求。当接收到请求时，应用程序根据 URL 和可能的 POST 数据或 GET 数据中的信息确定需要的内容。根据需要，可以从数据库读取或写入信息，或执行满足请求所需的其他任务。然后，该应用程序将返回对Web浏览器的响应，通常通过将检索到的数据插入 HTML模板中的占位符来动态创建用于浏览器显示的 HTML 页面。</p><p>MVC架构模式<br>架构规范: 数据和显示要分离(模型和视图解耦合)<br>同一个模型可以渲染成不同的视图,同一个视图可以加载不同的模型</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">M</span>   --<span class="literal">-</span>&gt;   <span class="comment">model</span>          --<span class="literal">-</span>&gt;   <span class="comment">模型</span>     --<span class="literal">-</span>&gt;   <span class="comment">数据</span></span><br><span class="line"><span class="comment">V</span>   --<span class="literal">-</span>&gt;   <span class="comment">View</span>           --<span class="literal">-</span>&gt;   <span class="comment">视图</span>     --<span class="literal">-</span>&gt;   <span class="comment">数据显示</span></span><br><span class="line"><span class="comment">C</span>   --<span class="literal">-</span>&gt;   <span class="comment">Contyoller</span>     --<span class="literal">-</span>&gt;   <span class="comment">控制器</span>    --<span class="literal">-</span>&gt;   <span class="comment">连接数据和显示的中间商</span></span><br></pre></td></tr></table></figure><p>Django (MTV架构模式)网络应用程序通常将处理每个步骤的代码分组到单独的文件中;如图所示:</p><p><img src="https://github.com/anjhon1994/some_image/blob/master/Django-MTV%E6%A8%A1%E5%BC%8F%E5%9B%BE.png?raw=true" alt="DjangoMTV架构"></p><p>📌 URL映射器用于根据请求URL将HTTP请求重定向到相应的视图。URL映射器还可以匹配出现在URL中的字符串或数字的特定模式，并将其作为数据传递给视图功能。<br>📌 View:  视图 是一个请求处理函数，它接收HTTP请求并返回HTTP响应。视图通过模型访问满足请求所需的数据，并将响应的格式委托给  模板。<br>📌 Models:  模型 是定义应用程序数据结构的Python对象，并提供在数据库中管理（添加，修改，删除）和查询记录的机制。<br>📌 Templates: 模板 是定义文件（例如HTML页面）的结构或布局的文本文件，用于表示实际内容的占位符。一个视图可以使用HTML模板，从数据填充它动态地创建一个HTML页面模型。可以使用模板来定义任何类型的文件的结构; 它不一定是HTML！</p><br><hr><h1 id="二丶Django简单页面生成"><a href="#二丶Django简单页面生成" class="headerlink" title="二丶Django简单页面生成"></a>二丶Django简单页面生成</h1><h2 id="1-创建一个Django项目"><a href="#1-创建一个Django项目" class="headerlink" title="1. 创建一个Django项目"></a>1. 创建一个Django项目</h2><p>创建Django项目的方式很多,这里简单介绍三种</p>  <!-- tab 方法一 --><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">   django-admin   -   django包管理员工具</span><br><span class="line"></span><br><span class="line">1. 在命令提示符内(我用了Git)输入</span><br><span class="line">~ django-admin startproject polls   # 创建一个新项目</span><br><span class="line">2. 使用PyCharm打开项目并创建虚拟环境</span><br><span class="line">~ cd polls   # 进入项目文件夹</span><br><span class="line">~ python3 -m venv venv   # 新建虚拟环境</span><br><span class="line">~ <span class="string">"venv/Scripts/activate"</span>   # 激活虚拟环境</span><br><span class="line">3. 安装项目依赖项:</span><br><span class="line">打开Pycharm底部的Terminal,输入</span><br><span class="line">~ pip install django mysqlclient django-redis pillow requests</span><br><span class="line">使用pip安装三方库时，可以通过如<span class="attribute">django</span>==1.11.27的方式来指定三方库的版本。</span><br><span class="line">4. 运行django项目</span><br><span class="line">~ python manage.py runserver</span><br><span class="line">~ python manage.py runserver 127.0.0.1:80   # 指定端口为80</span><br><span class="line">5. 添加项目运行快捷方式</span><br><span class="line"><span class="builtin-name">Add</span> Configuration  ---&gt;  +  ---&gt;  Python  ---&gt; <span class="built_in"> Script </span>Path (manage.py)  --&gt;  Parameters (runserver)</span><br></pre></td></tr></table></figure>  <!-- endtab -->  <!-- tab 方法二 --><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 用PyCharm创建一个普通的Python项目</span><br><span class="line"><span class="number">2.</span> 安装Django所需的依赖项</span><br><span class="line">    ~ pip install django==<span class="number">2.1</span><span class="number">.14</span> -i https:<span class="comment">//pypi.doubanio.com/simple</span></span><br><span class="line"><span class="number">3.</span> 把Python项目变成Django项目</span><br><span class="line">    ~ django-admin startproject polls .</span><br><span class="line"><span class="number">4.</span> 运行项目</span><br><span class="line">~ python manage.py runserver</span><br></pre></td></tr></table></figure>  <!-- endtab -->  <!-- tab 方法三 --><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">存在远端仓库时需要克隆项目到本地</span><br><span class="line"><span class="number">1</span>. 克隆</span><br><span class="line">    使用PyCharm新建页面的<span class="string">"get from version control"</span></span><br><span class="line">    ~ git <span class="keyword">clone</span> <span class="title">git</span>@gitee.com:anjhon/polls.git   <span class="comment"># 地址需要自行更换</span></span><br><span class="line"><span class="number">2</span>. 创建虚拟环境(项目中一般不会将虚拟环境纳入版本控制)</span><br><span class="line">    ~ Linux/macOS: source venv/bin/activate</span><br><span class="line">    ~ Windows: <span class="string">"venv/Scripts/activate"</span></span><br><span class="line"><span class="number">3</span>. 重建依赖项</span><br><span class="line">    ~ pip install -r requirements.txt   <span class="comment"># requirements文件为依赖项清单</span></span><br></pre></td></tr></table></figure>  <!-- endtab --><p>创建好新项目之后就能看到飞升的小火箭了</p><p><img src="https://github.com/anjhon1994/some_image/blob/master/Django%E8%BF%90%E8%A1%8C%E5%9B%BE.Png?raw=true" alt="运行图"></p><h2 id="2-简单的文件配置"><a href="#2-简单的文件配置" class="headerlink" title="2. 简单的文件配置"></a>2. 简单的文件配置</h2><h3 id="设置语言时区"><a href="#设置语言时区" class="headerlink" title="设置语言时区"></a>设置语言时区</h3><figure class="highlight diff"><figcaption><span>polls/setting.py </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- LANGUAGE_CODE = 'en-us'</span></span><br><span class="line"><span class="addition">+ LANGUAGE_CODE = 'zh-hans'</span></span><br><span class="line"><span class="deletion">- TIME_ZONE = 'UTC'</span></span><br><span class="line"><span class="addition">+ TIME_ZONE = 'Asia/Chongqing'</span></span><br></pre></td></tr></table></figure><h3 id="设置tamplates文件夹路径"><a href="#设置tamplates文件夹路径" class="headerlink" title="设置tamplates文件夹路径"></a>设置tamplates文件夹路径</h3><figure class="highlight diff"><figcaption><span>polls/setting.py </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        'BACKEND': 'django.template.backends.django.DjangoTemplates',</span><br><span class="line"><span class="deletion">-       'DIRS': [],</span></span><br><span class="line"><span class="addition">+       'DIRS': [os.path.join(BASE_DIR, 'templates')],</span></span><br><span class="line">        'APP_DIRS': True,</span><br><span class="line">...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="3-创建Django应用"><a href="#3-创建Django应用" class="headerlink" title="3. 创建Django应用"></a>3. 创建Django应用</h2><p>在控制台输入:</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">方法一</span><br><span class="line">~ python manage.py startapp app</span><br><span class="line">方法二</span><br><span class="line">~ django-admin startapp app</span><br><span class="line">在新建好的应用文件夹下创建templates文件夹(用来存放前端页面)</span><br></pre></td></tr></table></figure><p>创建好应用后,应用文件夹视图如下:</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-- <span class="string">app</span></span><br><span class="line"><span class="string"> </span>    |<span class="built_in">--migrations</span></span><br><span class="line"><span class="built_in"></span>     ||<span class="built_in">--__init__.py</span>   <span class="comment"># 一个空文件，告诉Python解释器这个目录应该被视为一个Python的包。</span></span><br><span class="line">     |<span class="built_in">--__init__.py</span>   </span><br><span class="line">     |<span class="built_in">--admin.py</span>   <span class="comment"># 可以用来注册模型，用于在Django的管理界面管理模型。</span></span><br><span class="line">     |<span class="built_in">--apps.py</span>   <span class="comment"># 当前应用的配置文件。</span></span><br><span class="line">     |<span class="built_in">--models.py</span>   <span class="comment"># 存放应用的数据模型，即实体类及其之间的关系（MVC/MTV中的M）。</span></span><br><span class="line">     |<span class="built_in">--tests.py</span>   <span class="comment"># 包含测试应用各项功能的测试类和测试函数。</span></span><br><span class="line">     |<span class="built_in">--views.py</span>   <span class="comment"># 处理请求并返回响应的函数（MVC中的C，MTV中的V）。</span></span><br></pre></td></tr></table></figure><p>最后别忘了配置一下新建的应用</p><figure class="highlight diff"><figcaption><span>polls/setting.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    'django.contrib.admin',</span><br><span class="line">    'django.contrib.auth',</span><br><span class="line">    'django.contrib.contenttypes',</span><br><span class="line">    'django.contrib.sessions',</span><br><span class="line">    'django.contrib.messages',</span><br><span class="line">    'django.contrib.staticfiles',</span><br><span class="line"><span class="addition">+   'polls',</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="4-要怎样自定义一个页面呢"><a href="#4-要怎样自定义一个页面呢" class="headerlink" title="4. 要怎样自定义一个页面呢?"></a>4. 要怎样自定义一个页面呢?</h2><p>第一步: 配置url控制器</p><figure class="highlight diff"><figcaption><span>polls/urls.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from django.contrib import admin</span><br><span class="line">from django.urls import path</span><br><span class="line">from app.views import index   # 这里导入了视图里的函数index</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path('admin/', admin.site.urls),</span><br><span class="line"><span class="addition">+   path('', index)   # 这里调用了视图里的函数index</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>第二部: 写视图函数</p><figure class="highlight diff"><figcaption><span>app/views.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from random import sample</span><br><span class="line">from django.http import HttpRequest</span><br><span class="line">from django.shortcuts import render</span><br><span class="line"></span><br><span class="line">def index(request: HttpRequest):   # 定义一个index函数</span><br><span class="line">    musics = ['嚣张', '让世间美好与你环环相扣', '无问', '膨胀', '野孩子', '海阔天空', '爱情买卖', '快乐男孩', ]</span><br><span class="line">    context = &#123;</span><br><span class="line">        'musics': sample(musics, 3),</span><br><span class="line">        'greeting': 'Hello, Django'</span><br><span class="line">    &#125;</span><br><span class="line">    return render(request, "index.html", context)   # 返回了一个html页面</span><br></pre></td></tr></table></figure><p>第三步: 编写前端模板页</p><figure class="highlight diff"><figcaption><span>templates/index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;title&gt;首页&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; greeting &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;hr/&gt;</span><br><span class="line">&lt;!--    django模板页,可以使用django模板语法和模板指令生成动态内容  --&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &#123;% for music in musics %&#125;</span><br><span class="line">        &lt;li&gt;&#123;&#123; music &#125;&#125;&lt;/li&gt;</span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>好了,一个简单的网页产生了!</p><br><hr><h1 id="三丶Django制作简单的选课系统"><a href="#三丶Django制作简单的选课系统" class="headerlink" title="三丶Django制作简单的选课系统"></a>三丶Django制作简单的选课系统</h1><p>邓爷爷说: 实践才是检验真理的唯一标准</p><p>在第二节我们实现了简单网页,但是只是用到了视图和模板,并没有涉及到数据; 要知道,在真正的项目中,这是不可能存在的,所以本节我们将通过实操一个小型的项目来带大家快速熟悉Django框架</p><h2 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1.  环境准备"></a>1.  环境准备</h2><p>①: 安装Python操作MySQL的依赖库</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~ pip <span class="keyword">install</span> pymysql</span><br></pre></td></tr></table></figure><p>②: 设置数据库连接参数</p><figure class="highlight diff"><figcaption><span>polls/setting.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    'default': &#123;</span><br><span class="line"><span class="deletion">-       'ENGINE': 'django.db.backends.sqlite3',</span></span><br><span class="line"><span class="addition">+       'ENGINE': 'django.db.backends.mysql',</span></span><br><span class="line"><span class="deletion">-       'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),</span></span><br><span class="line"><span class="addition">+       'NAME': 'anjhon',</span></span><br><span class="line"><span class="addition">+       'HOST': '0.0.0.0',   # 这里地址需要自行更改,可以连接本地数据库,参数为:localhost</span></span><br><span class="line"><span class="addition">+       'PORT': 3306,</span></span><br><span class="line"><span class="addition">+       'USER': 'anjhon',</span></span><br><span class="line"><span class="addition">+       'PASSWORD': '123456',</span></span><br><span class="line"><span class="addition">+       'CHARSET': 'utf8',</span></span><br><span class="line"><span class="addition">+       'TIME_ZONE': 'Asia/Chongqing',</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-创建数据模型"><a href="#2-创建数据模型" class="headerlink" title="2. 创建数据模型"></a>2. 创建数据模型</h2><h3 id="创建数据模型"><a href="#创建数据模型" class="headerlink" title="创建数据模型"></a>创建数据模型</h3><figure class="highlight diff"><figcaption><span>app/models.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line"></span><br><span class="line">class Subject(models.Model):</span><br><span class="line">    """学科模型类"""</span><br><span class="line">    nums = models.AutoField(primary_key=True, verbose_name='编号')   # 自增,主键</span><br><span class="line">    name = models.CharField(max_length=20, verbose_name='名称')   # 20长度的字符串</span><br><span class="line">    intro = models.CharField(max_length=1000, verbose_name='介绍')   # 1000长度的字符串</span><br><span class="line">    is_hot = models.BooleanField(default=False, verbose_name='是否热门')</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.name</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        db_table = 'tb_subject'</span><br><span class="line">        verbose_name = '学科'</span><br><span class="line">        verbose_name_plural = '学科'</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Teacher(models.Model):</span><br><span class="line">    """老师模型"""</span><br><span class="line">    nums = models.AutoField(primary_key=True, verbose_name='教师编号')</span><br><span class="line">    name = models.CharField(max_length=20, verbose_name='教师姓名')</span><br><span class="line">    sex = models.BooleanField(default=True, verbose_name='性别')</span><br><span class="line">    birth = models.DateField(verbose_name='教师生日')</span><br><span class="line">    photo = models.ImageField(upload_to='images', default='', max_length=512, verbose_name='头像')</span><br><span class="line">    intro = models.CharField(default='', max_length=1000, verbose_name='教师介绍')</span><br><span class="line">    good_count = models.PositiveIntegerField(default=0, verbose_name='好评数')</span><br><span class="line">    bad_count = models.IntegerField(default=0, verbose_name='差评数')</span><br><span class="line">    subject  = models.ForeignKey(to=Subject, on_delete=models.PROTECT, db_column='snums', verbose_name='所属学科')   # 该教师学科的名字</span><br><span class="line"></span><br><span class="line">    class Meta:   # 元信息,元数据(描述数据的数据)</span><br><span class="line">        db_table = 'tb_teacher'</span><br><span class="line">        verbose_name = '教师'</span><br><span class="line">        verbose_name_plural = '教师'</span><br></pre></td></tr></table></figure><p>参数小结:<br>    IntegerField   对应数据库中的integer类型，<br>    CharField   对应数据库的varchar类型，<br>    DecimalField   对应数据库的decimal类型，<br>    ForeignKey   用来建立多对一外键关联。<br>    primary_key   用于设置主键，<br>    max_length   用来设置字段的最大长度，<br>    db_column   用来设置数据库中与字段对应的列，<br>    verbose_name   则设置了Django后台管理系统中该字段显示的名称。</p><h3 id="将模型变成数据库内的表格"><a href="#将模型变成数据库内的表格" class="headerlink" title="将模型变成数据库内的表格"></a>将模型变成数据库内的表格</h3><figure class="highlight diff"><figcaption><span>Pycharm内的Terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 生成迁移文件</span><br><span class="line">~ python manage.py makemigrations polls</span><br><span class="line"># 执行迁移</span><br><span class="line">~ python manage.py migrate</span><br></pre></td></tr></table></figure><p>到这一步,我们的数据库里就已经生成好了学科和老师的数据表格,这时我们需要进入到Django自带的后台管理系统,管理数据;</p><p>扩展:<br>数据表建好以后,反向建模型到models.py文件:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">python</span> manage.<span class="keyword">py</span> inspectdb &gt; common/models.<span class="keyword">py</span></span><br></pre></td></tr></table></figure><h3 id="远端数据库设置"><a href="#远端数据库设置" class="headerlink" title="远端数据库设置"></a>远端数据库设置</h3><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">create database djangocase default charset utf8 collate utf8_bin;   ---&gt;   创建数据库</span><br><span class="line">grant all privileges on djangocase.<span class="symbol">*</span> to 'anjhon'<span class="meta">@'%';</span>   ---&gt;   给用户权限</span><br><span class="line"></span><br><span class="line">(venv) C:\djangocase&gt;</span><br><span class="line">    python manage.py migrate   ---&gt;   执行迁移</span><br><span class="line"></span><br><span class="line">use djangocase;   ---&gt;   切换数据库</span><br><span class="line">show tables;   ---&gt;   显示表格</span><br><span class="line">+----------------------------+</span><br><span class="line">|<span class="string"> Tables_in_djangocase       </span>|</span><br><span class="line">+----------------------------+</span><br><span class="line">|<span class="string"> auth_group                 </span>|</span><br><span class="line">|<span class="string"> auth_group_permissions     </span>|</span><br><span class="line">|<span class="string"> auth_permission            </span>|</span><br><span class="line">|<span class="string"> auth_user                  </span>|</span><br><span class="line">|<span class="string"> auth_user_groups           </span>|</span><br><span class="line">|<span class="string"> auth_user_user_permissions </span>|</span><br><span class="line">|<span class="string"> django_admin_log           </span>|</span><br><span class="line">|<span class="string"> django_content_type        </span>|</span><br><span class="line">|<span class="string"> django_migrations          </span>|</span><br><span class="line">|<span class="string"> django_session             </span>|</span><br><span class="line">|<span class="string"> jet_bookmark               </span>|</span><br><span class="line">|<span class="string"> jet_pinnedapplication      </span>|</span><br><span class="line">+----------------------------+</span><br><span class="line">12 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">(venv) C:\polls&gt;</span><br><span class="line">python manage.py createsuperuser   ---&gt;   创建超级管理员</span><br></pre></td></tr></table></figure><h2 id="3-后台管理"><a href="#3-后台管理" class="headerlink" title="3. 后台管理"></a>3. 后台管理</h2><p>①:  创建超级管理员账号</p><figure class="highlight diff"><figcaption><span>Pycharm内的Terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">~ python manage.py createsuperuser</span><br><span class="line">Username : anjhon</span><br><span class="line">Email address: anjhon@163.com</span><br><span class="line">Password:       # 密码不显示</span><br><span class="line">Password (again): </span><br><span class="line">Superuser created successfully.</span><br></pre></td></tr></table></figure><p>②:  注册模型</p><figure class="highlight diff"><figcaption><span>polls/admin.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">from django.contrib import admin</span><br><span class="line">from polls.models import Subject, Teacher</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class SubjectAdmin(admin.ModelAdmin):</span><br><span class="line">    list_display = ('nums', 'name', 'intro', 'is_hot')   # 默认显示学科对象,该语句可以显示学科编号,名称,介绍.</span><br><span class="line">    list_display_links = ('name', 'nums', )</span><br><span class="line">    search_fields = ('name', )   # 可以按名字搜索</span><br><span class="line">    ordering = ('nums', )   # 根据nums排升序</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TeacherAdmin(admin.ModelAdmin):</span><br><span class="line">    list_display = ('nums', 'name', 'sex', 'birth', 'intro', 'good_count', 'bad_count', 'subject')</span><br><span class="line">    search_fields = ('name', )</span><br><span class="line">    ordering = ('nums',)</span><br></pre></td></tr></table></figure><p>③: 登录管理员后台</p><figure class="highlight diff"><figcaption><span>Pycharm内的Terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 开启服务器</span><br><span class="line">~ python manage.py runserver</span><br><span class="line"># 访问</span><br><span class="line">http://127.0.0.1:8000/admin</span><br></pre></td></tr></table></figure><p>这里输入刚刚的超级管理员的密码就能登录了;不过由于界面实在不忍直视,所以我决定给他换个jet主题!</p><ol><li><p>安装jet</p><figure class="highlight diff"><figcaption><span>Pycharm内的Terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~ pip install django-jet -i https://pypi.doubanio.com/simple</span><br></pre></td></tr></table></figure></li><li><p>添加应用</p><figure class="highlight diff"><figcaption><span>polls/settings.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line"><span class="addition">+   'jet',</span></span><br><span class="line">    'django.contrib.admin',</span><br><span class="line">    'django.contrib.auth',</span><br><span class="line">    'django.contrib.contenttypes',</span><br><span class="line">    'django.contrib.sessions',</span><br><span class="line">    'django.contrib.messages',</span><br><span class="line">    'django.contrib.staticfiles',</span><br><span class="line">    'polls',</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>注: jet要加到最前面,不然Django会先加载自带的主题,这样就没什么效果了</p></li><li><p>执行迁移：</p><figure class="highlight diff"><figcaption><span>Pycharm内的Terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~ python manage.py migrate jet</span><br></pre></td></tr></table></figure></li><li><p>配置URL</p><figure class="highlight diff"><figcaption><span>polls/urls.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path('admin/', admin.site.urls),</span><br><span class="line"><span class="addition">+   path('jet/', include('jet.urls', 'jet')),</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>大功告成!</p></li></ol><p>进入后台之后就可以添加老师和学科的数据了;<br>至此,数据准备完成!</p><h2 id="4-网页成型"><a href="#4-网页成型" class="headerlink" title="4. 网页成型"></a>4. 网页成型</h2><p>①: 同样的,先配置url</p><figure class="highlight diff"><figcaption><span>polls/urls.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">from django.conf import settings</span><br><span class="line">from django.conf.urls.static import static</span><br><span class="line">from django.contrib import admin</span><br><span class="line">from django.urls import path, include</span><br><span class="line">from polls.views import index, show_teachers, praise_or_criticize, \</span><br><span class="line">    login, get_captcha, logout</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path('jet/', include('jet.urls', 'jet')),</span><br><span class="line">    path('admin/', admin.site.urls),</span><br><span class="line">    path('', index),</span><br><span class="line"><span class="addition">+   path('teachers/', show_teachers),   # 教师信息页面</span></span><br><span class="line"><span class="addition">+   path('praise/', praise_or_criticize),   # 好评</span></span><br><span class="line"><span class="addition">+   path('criticize/', praise_or_criticize),   # 差评</span></span><br><span class="line"><span class="addition">+   path('login/', login),   # 登录</span></span><br><span class="line"><span class="addition">+   path('logout/', logout),   # 注销</span></span><br><span class="line"><span class="addition">+   path('captcha/', get_captcha),   # 验证码</span></span><br><span class="line">] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)</span><br></pre></td></tr></table></figure><p>②: 写视图函数</p><figure class="highlight diff"><figcaption><span>app/views.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">from base64 import b64decode</span><br><span class="line">from django.http import JsonResponse, HttpResponse</span><br><span class="line">from django.shortcuts import render, redirect</span><br><span class="line">from polls.captcha import Captcha</span><br><span class="line">from polls.models import Subject, Teacher, User</span><br><span class="line">from polls.utils import random_text, to_md5_hex, check_username, check_password</span><br><span class="line"></span><br><span class="line">def index(request):</span><br><span class="line">    """首页（获取所有学科）"""</span><br><span class="line">    queryset = Subject.objects.all()</span><br><span class="line">    context = &#123;</span><br><span class="line">        'subjects': queryset</span><br><span class="line">    &#125;</span><br><span class="line">    return render(request, 'subjects.html', context)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def show_teachers(request):</span><br><span class="line">    """显示指定学科的老师"""</span><br><span class="line">    try:</span><br><span class="line">        sno = request.GET['sno']</span><br><span class="line">        subject = Subject.objects.get(no=sno)</span><br><span class="line">        queryset = Teacher.objects.filter(subject__no=sno)</span><br><span class="line">        context = &#123;</span><br><span class="line">            'subject': subject,</span><br><span class="line">            'teachers': queryset</span><br><span class="line">        &#125;</span><br><span class="line">        return render(request, 'teachers.html', context)</span><br><span class="line">    except (KeyError, ValueError, Subject.DoesNotExist):</span><br><span class="line">        return redirect('/')</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def praise_or_criticize(request):</span><br><span class="line">    """好评或差评"""</span><br><span class="line">    if request.session.get('userid') is None:</span><br><span class="line">        data = &#123;'code': 10002, 'message': '请先登录'&#125;</span><br><span class="line">    else:</span><br><span class="line">        tno = request.GET.get('tno', '0')</span><br><span class="line">        try:</span><br><span class="line">            teacher = Teacher.objects.get(no=tno)</span><br><span class="line">            if request.path.startswith('/praise'):</span><br><span class="line">                teacher.good_count += 1</span><br><span class="line">            else:</span><br><span class="line">                teacher.bad_count += 1</span><br><span class="line">            teacher.save()</span><br><span class="line">            data = &#123;'code': 10000, 'message': '操作成功'&#125;</span><br><span class="line">        except (ValueError, Teacher.DoesNotExist):</span><br><span class="line">            data = &#123;'code': 10001, 'message': '操作失败'&#125;</span><br><span class="line">    return JsonResponse(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def login(request):</span><br><span class="line">    """登录"""</span><br><span class="line">    backurl = request.GET.get('backurl', '')</span><br><span class="line">    hint = ''</span><br><span class="line">    if request.method == 'POST':</span><br><span class="line">        # 获取用户输入的验证码</span><br><span class="line">        code_from_user = request.POST.get('captcha', '0').lower()</span><br><span class="line">        # 获取用户输入的验证码</span><br><span class="line">        code_from_serv = request.session.get('code', '1').lower()</span><br><span class="line">        # 若用户验证码和服务器验证码相同,则进入登录流程</span><br><span class="line">        if code_from_user == code_from_serv:</span><br><span class="line">            # 获取用户输入的用户名</span><br><span class="line">            username = request.POST.get('username', '')</span><br><span class="line">            # 获取用户输入的密码</span><br><span class="line">            password = request.POST.get('password', '')</span><br><span class="line">            # 检查用户名和密码是否复合规范</span><br><span class="line">            if check_username(username) and check_password(password):</span><br><span class="line">                # 生成密码摘要</span><br><span class="line">                password = to_md5_hex(password)</span><br><span class="line">                # 从数据库获取用户信息对象保存到user中</span><br><span class="line">                user = User.objects.filter(username=username, password=password).first()</span><br><span class="line"></span><br><span class="line">                if user:   # 若匹配成功,将用户的信息保存到session对象中,方便cookie连接</span><br><span class="line">                    # 登录成功后为了记住这个登录成功的用户</span><br><span class="line">                    # 我们可以在服务器端保存和用户相关的信息</span><br><span class="line">                    # 我们可以将这些信息保存在Django框架提供的session对象中</span><br><span class="line">                    request.session['userid'] = user.no</span><br><span class="line">                    request.session['username'] = user.username</span><br><span class="line">                    backurl = request.POST.get('backurl')</span><br><span class="line">                    if backurl:</span><br><span class="line">                        backurl = b64decode(backurl).decode()</span><br><span class="line">                    else:</span><br><span class="line">                        backurl = '/'</span><br><span class="line">                    return redirect(backurl)</span><br><span class="line">                else:</span><br><span class="line">                    hint = '用户登录信息错误!'</span><br><span class="line">            else:</span><br><span class="line">                hint = '请输入登录信息!'</span><br><span class="line">        else:</span><br><span class="line">            hint = '请输入正确的验证码!'</span><br><span class="line">    context = &#123;</span><br><span class="line">        'hint': hint,</span><br><span class="line">        'backurl': backurl</span><br><span class="line">    &#125;</span><br><span class="line">    return render(request, 'login.html', context)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def logout(request):</span><br><span class="line">    # 清空session对象中的数据</span><br><span class="line">    request.session.flush()</span><br><span class="line">    # 重定向到主页面</span><br><span class="line">    return redirect('/')</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_captcha(request):</span><br><span class="line">    """获取验证码图片"""</span><br><span class="line">    code = random_text()</span><br><span class="line">    image_data = Captcha.instance().generate(code)</span><br><span class="line">    request.session['code'] = code</span><br><span class="line">    return HttpResponse(image_data, content_type='image/png')</span><br></pre></td></tr></table></figure><p>③: 网页模板<br>首页学科页</p><figure class="highlight diff"><figcaption><span>templates/subjects.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;title&gt;首页&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        body &#123;</span><br><span class="line">            width: 920px;</span><br><span class="line">            margin: 0 auto;</span><br><span class="line">        &#125;</span><br><span class="line">        .subject &#123;</span><br><span class="line">            margin: 20px 20px;</span><br><span class="line">        &#125;</span><br><span class="line">        .sname &#123;</span><br><span class="line">            font: bold 28px Arial;</span><br><span class="line">        &#125;</span><br><span class="line">        a &#123;</span><br><span class="line">            color: blue;</span><br><span class="line">            text-decoration: none;</span><br><span class="line">        &#125;</span><br><span class="line">        .nav &#123;</span><br><span class="line">            float: right;</span><br><span class="line">            margin-top: 20px;</span><br><span class="line">        &#125;</span><br><span class="line">        .nav+h2 &#123;</span><br><span class="line">            clear: both;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class="nav"&gt;</span><br><span class="line">        &#123;% if request.session.userid %&#125;</span><br><span class="line">        &#123;&#123; request.session.username &#125;&#125;</span><br><span class="line">        &lt;a href="/logout/"&gt;注销&lt;/a&gt;</span><br><span class="line">        &#123;% else %&#125;</span><br><span class="line">        &lt;a href="/login/"&gt;登录&lt;/a&gt;&amp;nbsp;</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">        &lt;a href=""&gt;注册&lt;/a&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;h2&gt;所有学科&lt;/h2&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &#123;% for subject in subjects %&#125;</span><br><span class="line">    &lt;div class="subject"&gt;</span><br><span class="line">        &lt;p class="sname"&gt;</span><br><span class="line">            &lt;a href="/teachers/?sno=&#123;&#123; subject.no &#125;&#125;"&gt;&#123;&#123; subject.name &#125;&#125;&lt;/a&gt;</span><br><span class="line">            &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class="line">            &#123;% if subject.is_hot %&#125;</span><br><span class="line">            &lt;img src='/static/images/hot-icon-small.png'&gt;</span><br><span class="line">            &#123;% endif %&#125;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123; subject.intro &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>教师信息页</p><figure class="highlight diff"><figcaption><span>templates/teachers.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;title&gt;老师信息&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        body &#123;</span><br><span class="line">            width: 920px;</span><br><span class="line">            margin: 0 auto;</span><br><span class="line">        &#125;</span><br><span class="line">        .teacher &#123;</span><br><span class="line">            clear: both;</span><br><span class="line">        &#125;</span><br><span class="line">        .photo &#123;</span><br><span class="line">            margin-top: 20px;</span><br><span class="line">            width: 140px;</span><br><span class="line">            height: 140px;</span><br><span class="line">            border-radius: 70px 70px 70px 70px;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line">        .content &#123;</span><br><span class="line">            margin-left: 60px;</span><br><span class="line">            width: 580px;</span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line">        .keyinfo &#123;</span><br><span class="line">            font: bold 18px Arial;</span><br><span class="line">        &#125;</span><br><span class="line">        .back &#123;</span><br><span class="line">            float: right;</span><br><span class="line">            margin-top: 20px;</span><br><span class="line">        &#125;</span><br><span class="line">        .back&gt;a &#123;</span><br><span class="line">            text-decoration: none;</span><br><span class="line">            color: blue;</span><br><span class="line">        &#125;</span><br><span class="line">        .back+h2 &#123;</span><br><span class="line">            clear: both;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class="back"&gt;</span><br><span class="line">        &lt;a href="/"&gt;返回首页&lt;/a&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; subject.name &#125;&#125;学科老师信息&lt;/h2&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &#123;% for teacher in teachers %&#125;</span><br><span class="line">    &lt;div class="teacher"&gt;</span><br><span class="line">        &lt;div class="photo"&gt;</span><br><span class="line">            &lt;img src="&#123;&#123; teacher.photo.url &#125;&#125;" width="140"&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class="content"&gt;</span><br><span class="line">            &lt;p class="keyinfo"&gt;</span><br><span class="line">                &#123;&#123; teacher.name &#125;&#125;&amp;nbsp;&amp;nbsp;</span><br><span class="line">                &#123;&#123; teacher.sex | yesno:"男, 女" &#125;&#125;&amp;nbsp;&amp;nbsp;</span><br><span class="line">                &#123;&#123; teacher.birth &#125;&#125;</span><br><span class="line">            &lt;/p&gt;</span><br><span class="line">            &lt;p&gt;</span><br><span class="line">                &#123;&#123; teacher.intro &#125;&#125;</span><br><span class="line">            &lt;/p&gt;</span><br><span class="line">            &lt;p class="comment"&gt;</span><br><span class="line">                &lt;a href="/praise/?tno=&#123;&#123; teacher.no &#125;&#125;"&gt;好评&lt;/a&gt;（&lt;span&gt;&#123;&#123; teacher.good_count &#125;&#125;&lt;/span&gt;）&amp;nbsp;&amp;nbsp;</span><br><span class="line">                &lt;a href="/criticize/?tno=&#123;&#123; teacher.no &#125;&#125;"&gt;差评&lt;/a&gt;（&lt;span&gt;&#123;&#123; teacher.bad_count &#125;&#125;&lt;/span&gt;）</span><br><span class="line">            &lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    &lt;script src="https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js"&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">    // $()函数中的箭头函数是页面加载完成之后要执行的回调函数</span><br><span class="line">    $(() =&gt; &#123;</span><br><span class="line">        let flag = true</span><br><span class="line">        // 通过$(选择器)获取页面元素绑定点击事件</span><br><span class="line">        // on方法的第一个参数是事件名 第二个参数是事件回调函数</span><br><span class="line">        // 事件回调函数的参数evt是代表事件的对象</span><br><span class="line">        $('.comment&gt;a').on('click', (evt) =&gt; &#123;</span><br><span class="line">            // 阻止事件默认行为（避免直接刷新页面）</span><br><span class="line">            evt.preventDefault()</span><br><span class="line">            if (flag) &#123;</span><br><span class="line">                // 实现函数节流</span><br><span class="line">                flag = false</span><br><span class="line">                setTimeout(() =&gt; &#123; flag = true &#125;, 2000)</span><br><span class="line">                // 通过事件对象获取事件源并由$函数转成jQuery对象</span><br><span class="line">                let anchor = $(evt.target)</span><br><span class="line">                // 通过jQuery对象的getJSON方法发起Ajax请求</span><br><span class="line">                // 第一个参数是请求的URL</span><br><span class="line">                // 第二个参数是请求完成之后要执行的回调函数</span><br><span class="line">                $.getJSON(anchor.attr('href'), (json) =&gt; &#123;</span><br><span class="line">                    if (json.code == 10000) &#123; // 投票成功</span><br><span class="line">                        // 获取与a标签相邻的span标签</span><br><span class="line">                        let span = anchor.next()</span><br><span class="line">                        // 将span标签的值加1再写回span标签</span><br><span class="line">                        span.text(parseInt(span.text()) + 1)</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        alert(json.message)</span><br><span class="line">                        if (json.code == 10002) &#123;</span><br><span class="line">                            location.href = '/login/?backurl=' + btoa('/teachers/?sno=&#123;&#123; subject.no &#125;&#125;')</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                alert('操作太频繁')</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>登录页</p><figure class="highlight diff"><figcaption><span>templates/login.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;title&gt;用户登录&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        #container &#123;</span><br><span class="line">            width: 920px;</span><br><span class="line">            margin: 0 auto;</span><br><span class="line">        &#125;</span><br><span class="line">        .input, form+a &#123;</span><br><span class="line">            margin: 30px 10px;</span><br><span class="line">            width: 400px;</span><br><span class="line">            height: 32px;</span><br><span class="line">        &#125;</span><br><span class="line">        .input&gt;input &#123;</span><br><span class="line">            border: none;</span><br><span class="line">            outline: none;</span><br><span class="line">            border-bottom: 1px dotted darkgray;</span><br><span class="line">            width: 180px;</span><br><span class="line">        &#125;</span><br><span class="line">        .input:last-child&gt;input &#123;</span><br><span class="line">            border: none;</span><br><span class="line">            background-color: red;</span><br><span class="line">            color: white;</span><br><span class="line">            width: 80px;</span><br><span class="line">            height: 25px;</span><br><span class="line">        &#125;</span><br><span class="line">        .input&gt;label &#123;</span><br><span class="line">            display: inline-block;</span><br><span class="line">            width: 80px;</span><br><span class="line">            text-align: right;</span><br><span class="line">        &#125;</span><br><span class="line">        .input:last-child &#123;</span><br><span class="line">            text-align: center;</span><br><span class="line">            border: none;</span><br><span class="line">            margin-left: -20px;</span><br><span class="line">        &#125;</span><br><span class="line">        .input&gt;img &#123;</span><br><span class="line">            vertical-align: middle;</span><br><span class="line">        &#125;</span><br><span class="line">        a &#123;</span><br><span class="line">            text-decoration: none;</span><br><span class="line">            color: blue;</span><br><span class="line">        &#125;</span><br><span class="line">        .hint &#123;</span><br><span class="line">            font-size: 12px;</span><br><span class="line">            color: red;</span><br><span class="line">            height: 20px;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id="container"&gt;</span><br><span class="line">        &lt;h2&gt;用户登录&lt;/h2&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;p class="hint"&gt;&#123;&#123; hint &#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;form action="/login/?backurl=&#123;&#123; backurl &#125;&#125;" method="post"&gt;</span><br><span class="line">            &#123;% csrf_token %&#125;</span><br><span class="line">            &lt;div class="input"&gt;</span><br><span class="line">                &lt;label&gt;用户名：&lt;/label&gt;</span><br><span class="line">                &lt;input type="text" name="username"&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class="input"&gt;</span><br><span class="line">                &lt;label&gt;密码：&lt;/label&gt;</span><br><span class="line">                &lt;input type="password" name="password"&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class="input"&gt;</span><br><span class="line">                &lt;label&gt;验证码：&lt;/label&gt;</span><br><span class="line">                &lt;input type="text" name="captcha"&gt;</span><br><span class="line">                &lt;img id="code" src="/captcha/" height="33"&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class="input"&gt;</span><br><span class="line">                &lt;input type="submit" value="登录"&gt;</span><br><span class="line">                &lt;input type="reset" value="重置"&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">        &lt;a href="/"&gt;返回首页&lt;/a&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script src="https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js"&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">    $(() =&gt; &#123;</span><br><span class="line">        $('#code').on('click', (evt) =&gt; &#123;</span><br><span class="line">            $(evt.target).attr('src', '/captcha/?' + Math.random())</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>页面布局完成!</p><p>④:  补充<br>在项目目录下新建文件夹static, 专门用来存放静态资源,在static下创建css, js, image文件夹,分别用来存放样式表, js文件, 图片资源<br>为了让html文件能够找到保存静态资源的文件夹，还需要修改Django项目的配置文件settings.py</p><figure class="highlight diff"><figcaption><span>polls/settings.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static'), ]</span></span><br><span class="line">  STATIC_URL = '/static/'</span><br></pre></td></tr></table></figure><p>最后在使用时需要在html文件中较前的位置加入代码</p><figure class="highlight diff"><figcaption><span>引用本地静态文件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"><span class="addition">+&#123;% load staticfiles %&#125;</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset="utf-8"&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="5-再补充一点"><a href="#5-再补充一点" class="headerlink" title="5. 再补充一点"></a>5. 再补充一点</h2><h3 id="cookie和session的关系"><a href="#cookie和session的关系" class="headerlink" title="cookie和session的关系"></a>cookie和session的关系</h3><p>HTTP协议是无连接无状态协议   —&gt;<br>两次请求之间不会保存用户的任何数据;<br>再次请求服务器的时候服务器无法得知请求是来自哪个用户的请求;<br>一般情况下服务器应用都需要记住用户来为用户提供更好的服务;<br>如果希望服务器记住用户可以使用以下三种辅助方式:</p><ol><li>URL重写<a href="http://www.baidu.com/?uid=xxxxxx" target="_blank" rel="noopener">http://www.baidu.com/?uid=xxxxxx</a></li><li>隐藏域(隐式表单域)   —&gt;   埋点<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">    &lt;<span class="keyword">input</span> <span class="keyword">type</span>="hidden"<span class="type">name</span>="uid"<span class="keyword">value</span>="xxxxxx"&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure></li><li>浏览器本地存储<br> ~ cookie   —&gt;   浏览器中的零食文件,可以保存键值对;cookie中的数据在发起HTTP请求时会自动加载到请求头中<br> ~ window.localStorage / window.sessionStorage</li></ol><p>request.session   —&gt;   存储登录成功的用户信息,session是服务器内的一个对象<br>cookie   -—-&gt;   用户浏览器临时文件   -—-&gt;   cookie中保存了session的ID</p><h3 id="编码小知识"><a href="#编码小知识" class="headerlink" title="编码小知识"></a>编码小知识</h3><p>通常如果一样东西需要编码，说明这样东西并不适合传输。原因多种多样，如Size过大，包含隐私数据，对于Url来说，之所以要进行编码，是因为Url中有些字符会引起歧义。</p><h4 id="BASE64编码"><a href="#BASE64编码" class="headerlink" title="BASE64编码"></a>BASE64编码</h4><p>用64个文字符号表示任意二进制数据<br>原理：将原来的三字节每6个比特一组变成四个字节<br>用A-Z、a-z、0-9、+和/一共64个字符来代表一个字节</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">base64编码:</span><br><span class="line">python内</span><br><span class="line">from base64 import b64encode, b64decode</span><br><span class="line"><span class="function"><span class="title">b64encode</span><span class="params">(<span class="string">'...'</span>.encode()</span></span>) ---&gt;  base64编码</span><br><span class="line"><span class="function"><span class="title">b64decode</span><span class="params">(b<span class="string">'...'</span>)</span></span>  ---&gt;  base64解码</span><br><span class="line"></span><br><span class="line">JavaScript内</span><br><span class="line"><span class="function"><span class="title">btoa</span><span class="params">(<span class="string">'url'</span>)</span></span>   ---&gt;   编码</span><br><span class="line"><span class="function"><span class="title">atob</span><span class="params">(<span class="string">'...'</span>)</span></span>   ---&gt;   解码</span><br></pre></td></tr></table></figure><h4 id="百分号编码-Url编码"><a href="#百分号编码-Url编码" class="headerlink" title="百分号编码(Url编码)"></a>百分号编码(Url编码)</h4><p>使用%百分号加上两位的字符(十六进制0~F)。URL编码默认使用的字符集是US-ASCII。例如 a 在US-ASCII码中对应的字节是0x61，那么URL编码之后得到的就 是%61，我们在地址栏上输入;又如@符号在ASCII字符集中对应的字节为0x40，经过URL编码之后得到的是%40。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from urllib<span class="selector-class">.parse</span> import quote</span><br><span class="line"><span class="function"><span class="title">quote</span><span class="params">(<span class="string">'经理人数据统计表.xls'</span>)</span></span>  编码</span><br><span class="line"><span class="function"><span class="title">unquote</span><span class="params">(<span class="string">'...'</span>)</span></span>   解码</span><br></pre></td></tr></table></figure><h4 id="常用知识点"><a href="#常用知识点" class="headerlink" title="常用知识点"></a>常用知识点</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver   <span class="comment">---&gt;   运行django服务器</span></span><br><span class="line">python manage.py createsuperuser   <span class="comment">---&gt;   创建超级管理员账号</span></span><br><span class="line">python manage.py makemigrations polls   <span class="comment">---&gt;  迁移文件</span></span><br><span class="line">python manage.py migrate   <span class="comment">---&gt;  执行迁移</span></span><br><span class="line"></span><br><span class="line">Teacher.objects.<span class="keyword">filter</span>(nums=tnums).first()   <span class="comment">---&gt;   获取nums和tnums相等的教师的所有信息</span></span><br><span class="line"></span><br><span class="line">request.path   <span class="comment">---&gt;   得到请求路径</span></span><br><span class="line">request.<span class="keyword">method</span>   <span class="comment">---&gt;   得到请求方法</span></span><br><span class="line">request.POST.<span class="keyword">get</span>(<span class="string">'username'</span>, <span class="string">''</span>)   <span class="comment">---&gt;   获取post请求提供的username对应的值,若没有username对应的值则获取空串</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> JsonResponse(data)   <span class="comment">---&gt;   直接返回json格式的数据</span></span><br><span class="line">render(request, )   <span class="comment">---&gt;   渲染页面,必定有request参数</span></span><br><span class="line">redirect()   <span class="comment">---&gt;   页面重定向</span></span><br><span class="line"></span><br><span class="line">pip install -r requirements.txt   <span class="comment">---&gt;   根据依赖项文件安装依赖</span></span><br><span class="line">pip <span class="keyword">freeze</span> &gt; requirements.txt   <span class="comment">---&gt;    重写依赖项清单</span></span><br></pre></td></tr></table></figure><h2 id="6-最后小结"><a href="#6-最后小结" class="headerlink" title="6. 最后小结"></a>6. 最后小结</h2><h3 id="项目流程"><a href="#项目流程" class="headerlink" title="项目流程"></a>项目流程</h3><p>django-admin startproject 项目名称   —&gt;   创建项目<br>git init   —&gt;   将项目文件夹初始化成git仓库<br>vim .gitignore   —&gt;   创建.gitignore文件,将不进行版本控制的文件名放进去,<br>gitignore.io   —&gt;   版本忽略文件生成网站<br>vim requirements.txt   —&gt;   创建项目依赖项文件</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">加入项目需要的依赖项</span><br><span class="line"><span class="attribute">Django</span>==2.2.9</span><br><span class="line"><span class="attribute">django-jet</span>==1.0.8</span><br><span class="line"><span class="attribute">django-redis</span>==4.11.0</span><br><span class="line"><span class="attribute">mysqlclient</span>==1.4.6</span><br><span class="line"><span class="attribute">pytz</span>==2019.3</span><br><span class="line"><span class="attribute">redis</span>==3.3.11</span><br><span class="line"><span class="attribute">sqlparse</span>==0.3.0</span><br></pre></td></tr></table></figure><h3 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h3><pre><code>git add .git statusgit commit -m &apos;项目初始版本&apos;git statusgit loggit tag v0.1git remote add origin git@gitee.com:anjhon1994/djangocase.git   # 地址关联git remote remove origin   # 取消关联rm -rf .git   # 取消仓库初始化git push -u origin master   # 推送git remote -v   # 查看远端仓库的地址</code></pre><br><hr><p>🌞相关文档连接:<br>    <a href="https://gitee.com/anjhon1994/Django1906" target="_blank" rel="noopener">点击下载本文完整代码</a><br>    <a href="https://developer.mozilla.org/zh-CN/docs/learn/Server-side/Django/Introduction" target="_blank" rel="noopener">MDN-Django介绍</a><br>    <a href="https://github.com/jackfrued/Python-100-Days/blob/master/Day91-100/95.%E4%BD%BF%E7%94%A8Django%E5%BC%80%E5%8F%91%E5%95%86%E4%B8%9A%E9%A1%B9%E7%9B%AE.md" target="_blank" rel="noopener">大佬详细教程</a></p>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> 后端 </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅浅浅谈数据库</title>
      <link href="/2019/12/28/%E6%B5%85%E6%B5%85%E6%B5%85%E8%B0%88%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2019/12/28/%E6%B5%85%E6%B5%85%E6%B5%85%E8%B0%88%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>数据库一周小结</p><a id="more"></a><p>数据库主要分为两大类,分别是关系型数据库(SQL)和非关系型数据库(NOSQL);在关系型数据库中Oracle和MySQL是最具有代表性的两个,在非关系型数据库中MongoDB和Redis也是榜上有名. 而本周的学习中,主要对MySQL和Redis进行了深入的学习.</p><p><img src="https://github.com/anjhon1994/some_image/blob/master/%E6%95%B0%E6%8D%AE%E5%BA%9319%E5%B9%B412%E6%9C%88%E4%BD%BF%E7%94%A8%E6%8E%92%E8%A1%8C.png?raw=true" alt=""></p><h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><p>MySQL主要使用SQL语言进行增删查改操作;<br>SQL是一种结构化查询语言,SQL语言又分为DDL(数据定义语言), DML(数据操作语言), DCL(数据控制语言)</p><h2 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h2><h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><p>1.创建数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span> utf8;   <span class="comment">--若dbname不存在,则按编码方式为utf8来新建数据库</span></span><br></pre></td></tr></table></figure><p>2.删除数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> dbname;  <span class="comment">-- 若数据库dbname存在就删除该数据库</span></span><br></pre></td></tr></table></figure><p>3.切换/使用数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> dbname;  <span class="comment">-- 切换后执行的操作均只对当前数据库有效</span></span><br></pre></td></tr></table></figure><h3 id="数据表操作"><a href="#数据表操作" class="headerlink" title="数据表操作"></a>数据表操作</h3><p>1.创建数据表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> tablname(filed1 <span class="keyword">type</span> constraint1, filed2 <span class="keyword">type</span> constraint2, ...);   <span class="comment">-- 创建以field1,filed2..为表头的数据表</span></span><br><span class="line"><span class="comment">-- 在SQL中常见的type: int, float, varchar/text, bit, date   (varchar后通常需要限制字符串的长度)</span></span><br><span class="line"><span class="comment">-- 常见的constraint: not null, unique, default, primary key, foreign key, auto_increment</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--注:外键约束的类型有一对一,一对多,多对多三种, 外键添加的方式各不相同</span></span><br><span class="line"><span class="comment">-- 一对一: 可以添加到任意一方;</span></span><br><span class="line"><span class="comment">-- 一对多和多对一: 添加到多的一方;</span></span><br><span class="line"><span class="comment">-- 多对多: 两张表没有办法直接建立多对多的对应关系,需要第三张表辅助</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 示例:</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> tb_student</span><br><span class="line">(</span><br><span class="line">stuid <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> auto_increment,</span><br><span class="line">stuname <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">stubirth <span class="built_in">DATE</span>,</span><br><span class="line">stugender <span class="built_in">bit</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>,</span><br><span class="line">stutel <span class="built_in">VARCHAR</span>(<span class="number">11</span>) <span class="keyword">UNIQUE</span></span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (stuid)  主键约束还可以单独设置</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>2.删除表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> tablname;</span><br></pre></td></tr></table></figure><p>3.修改表</p><p>①:添加字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tablname <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> <span class="keyword">field</span> <span class="keyword">type</span> <span class="keyword">constraint</span>;</span><br></pre></td></tr></table></figure><p>②:删除字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tablname <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> <span class="keyword">field</span>;</span><br></pre></td></tr></table></figure><p>③:修改字段名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tablname <span class="keyword">CHANGE</span> <span class="keyword">field</span> new_filed new_type;</span><br></pre></td></tr></table></figure><p>④:添加约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tablname <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> consname <span class="keyword">constraint</span>(filed);</span><br></pre></td></tr></table></figure><p>⑤:删除约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tablname <span class="keyword">DROP</span> <span class="keyword">INDEX</span> <span class="keyword">constraint</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tablname <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> <span class="keyword">constraint</span>;</span><br></pre></td></tr></table></figure><h2 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h2><p>1.INSERT(增)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tablname(field1, field2, ...) <span class="keyword">VALUES</span>(value1, value2, ...),(value11, value22, ...), (value111, value222, ...), ...;</span><br></pre></td></tr></table></figure><p>2.DELETE(删)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> tablename <span class="keyword">WHERE</span> 条件语句;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 补充:</span></span><br><span class="line">sq1条件语句的写法(筛选)(条件语句在写的时候可以通过加()改变运算顺序)</span><br><span class="line"><span class="comment">-- 比较运算:=(等于),&lt;&gt;(不等于),&gt;,&lt;,&gt;=,&lt;=</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> tb_student <span class="keyword">WHERE</span> stuname=<span class="string">'真刚'</span>;</span><br><span class="line"><span class="comment">-- 逻辑运算:and(逻辑与),or(逻辑或),not(逻辑非);</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> tb_student <span class="keyword">WHERE</span> stuid&gt;=<span class="number">35</span> <span class="keyword">AND</span> stugender&lt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="comment">-- 集合包含:in</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> tb_student <span class="keyword">WHERE</span> stuname <span class="keyword">in</span> (<span class="string">'逍遥子'</span>, <span class="string">'韩信'</span>, <span class="string">'断水'</span>);</span><br><span class="line"><span class="comment">-- 范围:between...and</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> tb_student <span class="keyword">WHERE</span> stubirth <span class="keyword">BETWEEN</span> <span class="string">'1976-8-21'</span> <span class="keyword">AND</span> <span class="string">'1976-8-31'</span>;</span><br><span class="line"><span class="comment">-- 判断是否为空:is null,is not null</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> tb_student <span class="keyword">WHERE</span> (stubirth <span class="keyword">IS</span> <span class="literal">NULL</span>) <span class="keyword">AND</span> (stutel <span class="keyword">IS</span> <span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">-- 筛选:like(% -&gt; 任意个任意字符; _  -&gt;  表示单个任意字符)</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> tb_student <span class="keyword">WHERE</span> stuname <span class="keyword">LIKE</span> <span class="string">'盖_ '</span>;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> tb_student <span class="keyword">WHERE</span> stutel <span class="keyword">LIKE</span> <span class="string">'%2_'</span>;</span><br></pre></td></tr></table></figure><p>3.UPDATE(改)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> tablname <span class="keyword">SET</span> field1=value1, field1=value2, ... <span class="keyword">WHERE</span> 条件语句;</span><br></pre></td></tr></table></figure><p>4.SELECT(查)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tablname;  <span class="comment">--查询表内所有内容</span></span><br><span class="line"><span class="keyword">SELECT</span> field1, field2, field3, ... <span class="keyword">FROM</span> tablname;  <span class="comment">--获取表中所有记录指定字段的数据</span></span><br><span class="line"><span class="keyword">SELECT</span> field1 <span class="keyword">AS</span> <span class="string">'new_filed1'</span>, field2, field3 <span class="keyword">AS</span> <span class="string">'new_field3'</span>, ... <span class="keyword">FROM</span> tablname;   <span class="comment">--列重名</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">IF</span>(field1, value1, value2) <span class="keyword">FROM</span> tablname;   <span class="comment">--如果if中对应的字段的值是1,最后结果是value1,否则是value2(mysql特有写法)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CASE</span> <span class="keyword">field</span> <span class="keyword">WHEN</span> <span class="number">1</span> <span class="keyword">THEN</span> new_value1 <span class="keyword">ELSE</span> new_value2 <span class="keyword">END</span> <span class="keyword">FROM</span> tablname;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CONCAT</span>(field1, field2, ...) <span class="keyword">FROM</span> tablname;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tablname <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">field</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tablname <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">field</span> <span class="keyword">DESC</span>;   <span class="comment">-- 倒序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> <span class="keyword">field</span> <span class="keyword">FROM</span> tablname;   <span class="comment">-- 去重</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tablname <span class="keyword">LIMIT</span> N;   <span class="comment">-- 限制(获取前N条数据)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 跳过前N条数据获取M条数据(从第N+1条数据开始,获取M条数据)</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tablname <span class="keyword">LIMIT</span> M <span class="keyword">OFFSET</span> N;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tablname <span class="keyword">LIMIT</span> N, M; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 聚合</span></span><br><span class="line"><span class="comment">-- MAX(), MIN(), SUM(), AVG(), COUNT()   -&gt;   MySQL专用</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MAX</span>(score) <span class="keyword">AS</span> <span class="string">'最高分'</span> <span class="keyword">FROM</span> tb_record;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MIN</span>(score) <span class="keyword">AS</span> <span class="string">'最低分'</span> <span class="keyword">FROM</span> tb_record;</span><br><span class="line">SELECT SUM(score) AS '总分' FROM tb_record;   -&gt;   -- 求和所有分数的和,如果某一个记录的分数是空,那么这条记录不存与运算</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AVG</span>(score) <span class="keyword">AS</span> <span class="string">'平均分'</span> <span class="keyword">FROM</span> tb_record;  </span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(score) <span class="keyword">AS</span> <span class="string">'个数'</span> <span class="keyword">FROM</span> tb_record; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 分组</span></span><br><span class="line"><span class="keyword">SELECT</span> 聚合操作 <span class="keyword">FROM</span> tablname <span class="keyword">GROUP</span> <span class="keyword">BY</span> (<span class="keyword">field</span>);   <span class="comment">-- 分组后要加条件,则用having代替where</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 子查询</span></span><br><span class="line"><span class="comment">-- ①:将一个查询的结果作为另外一个查询的条件</span></span><br><span class="line"><span class="comment">-- ②:将一个查询的结果作为另外一个查询的对象(注: 若将查询结果作为查询对象,则必须在使用时用as重命名)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 连接查询</span></span><br><span class="line"><span class="comment">--①:内连接</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tablname1, tablname2, ... <span class="keyword">WHERE</span> 连接条件 查询条件;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tablname1 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> tablname2 <span class="keyword">ON</span> 连接条件<span class="number">1</span> <span class="keyword">INNER</span> <span class="keyword">JOIN</span> tablname3 <span class="keyword">ON</span> 连接条件<span class="number">2</span>;(注意:如果有中间表,中间表放在最前面)</span><br><span class="line"><span class="comment">--注意:如果既有连接条件又有查询条件,查询条件必须放在连接条件的后面</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--②:外连接</span></span><br><span class="line"><span class="comment">--在MySQL中只支持左外连接(LEFT JOIN)和右外连接(right join)</span></span><br><span class="line">左连接: <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> 表<span class="number">1</span> <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> 表<span class="number">2</span> : 先将表<span class="number">1</span>中的记录全部取出来,按连接条件依次连接表<span class="number">2</span>中的记录,表<span class="number">1</span>中的记录找不到满足条件,则表<span class="number">2</span>记录那么连接的内容就是空</span><br><span class="line">右连接: <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> 表<span class="number">1</span> <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> 表<span class="number">2</span> : 先将表<span class="number">2</span>中的记录全部取出来,按连接条件依次连接表<span class="number">1</span>中的记录,表<span class="number">2</span>中的记录找不到满足条件,则表<span class="number">1</span>记录那么连接的内容就是空</span><br></pre></td></tr></table></figure><h2 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h2><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><p>1.创建用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">'username'</span>@<span class="string">'登陆地址'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'password'</span>;</span><br><span class="line"><span class="comment">-- 注:登录地址有三种写法:</span></span><br><span class="line"><span class="comment">-- ip地址</span></span><br><span class="line"><span class="comment">-- localhost(本机)</span></span><br><span class="line"><span class="comment">-- %(任意位置)</span></span><br></pre></td></tr></table></figure><p>2.删除用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">'username'</span>;</span><br></pre></td></tr></table></figure><h3 id="授权管理"><a href="#授权管理" class="headerlink" title="授权管理"></a>授权管理</h3><p>1.授权</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> 权限类型 <span class="keyword">ON</span> dataname.tablname <span class="keyword">TO</span> <span class="string">'username'</span>@<span class="string">'登陆地址'</span>;</span><br></pre></td></tr></table></figure><p>2.召回权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span> 权限类型 <span class="keyword">ON</span> dataname.tablname <span class="keyword">FROM</span> username;</span><br></pre></td></tr></table></figure><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>若完成一个任务需要多个操作,但只要有一个失败则任务不完成,数据回到任务开始前的状态;只有所有操作都成功了,数据库才更新;此时用事务语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;   <span class="comment">-- 开启事务环境 </span></span><br><span class="line"><span class="keyword">UPDATE</span> tb_student <span class="keyword">SET</span> stubirth=<span class="string">'1993-1-1'</span> <span class="keyword">WHERE</span> stusex=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> tb_student <span class="keyword">WHERE</span> stuname <span class="keyword">LIKE</span> <span class="string">'杨%'</span></span><br><span class="line"><span class="keyword">COMMIT</span>;   <span class="comment">-- 提交事务环境中的操作结果</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br></pre></td></tr></table></figure><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> 视图名 <span class="keyword">AS</span> <span class="keyword">sql</span>查询语句;</span><br></pre></td></tr></table></figure><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--①:添加索引</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> 索引名 <span class="keyword">ON</span> 表名(字段);   <span class="comment">-- 给指定字段添加索引</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> 索引名 <span class="keyword">ON</span> 表名(字段);    <span class="comment">-- 给指定字段添加唯一索引</span></span><br><span class="line"><span class="comment">--②:删除索引</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tablname <span class="keyword">DROP</span> <span class="keyword">INDEX</span> 索引名;</span><br></pre></td></tr></table></figure><h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="Redis命令"><a href="#Redis命令" class="headerlink" title="Redis命令"></a>Redis命令</h2><p>ttl key ——&gt; 查看key的存活时间<br>set key value ex N ——&gt; 设置key的存活时间为N秒<br>set key value px N ——&gt; 设置key的存活时间为N毫秒<br>shutdown  ——&gt; 关闭redis服务器<br>shutdown save ——&gt; 保存并关闭redis服务器<br>save ——&gt; 保存<br>bgsave ——&gt; 后台保存<br>dbsize ——&gt; 查看数据库大小<br>keys *  ——&gt; 获取所有的key<br>keys ta*  ——&gt; 获取ta开头的key</p><p><strong>redis默认开启了16个数据库</strong><br>select 0-15 ——&gt; 切换数据库<br>flushdb ——&gt; 清空当前数据库<br>flushall ——&gt; 清空所有数据库</p><p>type keyp ——&gt; 判断key的类型</p><h2 id="Redis的数据类型"><a href="#Redis的数据类型" class="headerlink" title="Redis的数据类型"></a>Redis的数据类型</h2><h3 id="1-字符串-string"><a href="#1-字符串-string" class="headerlink" title="1.字符串 - string"></a>1.字符串 - string</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">key</span> <span class="keyword">value</span></span><br><span class="line"><span class="keyword">get</span> <span class="keyword">key</span></span><br><span class="line">strlen <span class="keyword">key</span></span><br><span class="line">append <span class="keyword">key</span> <span class="keyword">value</span> <span class="comment">------&gt; 追加</span></span><br><span class="line">mset key1 value1 key2 value2 ... <span class="comment">------&gt; 同时设置多组值</span></span><br><span class="line">mget key1 key2 ...</span><br><span class="line">incr <span class="keyword">key</span> <span class="comment">------&gt; 当key的值为数字时,数值加一</span></span><br><span class="line">incrby <span class="keyword">key</span> N <span class="comment">------&gt; 为key的值加N</span></span><br><span class="line">decr <span class="keyword">key</span> <span class="comment">------&gt; 减一</span></span><br><span class="line">decrby <span class="keyword">key</span> N <span class="comment">------&gt; 减N</span></span><br><span class="line">getrange <span class="keyword">key</span> m n <span class="comment">------&gt; 从m取到n</span></span><br><span class="line">setrange <span class="keyword">key</span> N <span class="keyword">value</span> <span class="comment">------&gt; 从n开始用value覆盖key的value值</span></span><br></pre></td></tr></table></figure><h3 id="2-哈希-hash"><a href="#2-哈希-hash" class="headerlink" title="2.哈希 - hash"></a>2.哈希 - hash</h3><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hset <span class="built_in">key</span> field <span class="built_in">value</span> 设置键和值</span><br><span class="line">hmset <span class="built_in">key</span> field1 value1 field2 value2 同时设置多个键和值</span><br><span class="line">hget <span class="built_in">key</span> field  查看指定的键对应的值</span><br><span class="line">hmget <span class="built_in">key</span> fieldl field2 同时查看多个键和值</span><br><span class="line">hgetall <span class="built_in">key</span> 获取所有的值和键</span><br><span class="line">hkeys <span class="built_in">key</span> 获取所有的键</span><br><span class="line">hvals <span class="built_in">key</span> 获取所有的值</span><br><span class="line">hexists <span class="built_in">key</span> filed 判断是否存在对应的值</span><br></pre></td></tr></table></figure><h3 id="3-列表-list"><a href="#3-列表-list" class="headerlink" title="3.列表 - list"></a>3.列表 - list</h3><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">lpush <span class="keyword">list</span> value1 value2 ... 插入到最左边</span><br><span class="line">rpush <span class="keyword">list</span> value1 value2 ... 插入到最右边</span><br><span class="line">lpop <span class="keyword">list</span> 取最左边</span><br><span class="line">rpop <span class="keyword">list</span> 取最右边</span><br><span class="line"><span class="keyword">lrange</span> <span class="keyword">list</span> start end 查看列表片段</span><br><span class="line"><span class="keyword">lindex</span> <span class="keyword">list</span> index 查看指定下标对应的元素</span><br><span class="line">llen <span class="keyword">list</span> 列表长度</span><br><span class="line">lrem <span class="keyword">list</span> count value 删除指定个数的元素</span><br></pre></td></tr></table></figure><h3 id="4-集合-set"><a href="#4-集合-set" class="headerlink" title="4.集合 - set"></a>4.集合 - set</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sadd <span class="keyword">set</span> value1 value2 <span class="string">...</span> 添加元素</span><br><span class="line">srem <span class="keyword">set</span> value 移除元素</span><br><span class="line">spop <span class="keyword">set</span> 获取随机元素</span><br><span class="line">smembers <span class="keyword">set</span> 查看所有元素</span><br><span class="line">sismember <span class="keyword">set</span> value 查看元素是否在集合内</span><br><span class="line">scard <span class="keyword">set</span> 查看元素个数</span><br><span class="line">sinter <span class="keyword">set</span>1 <span class="keyword">set</span>2 交集</span><br><span class="line">sunion <span class="keyword">set</span>1 <span class="keyword">set</span>2 并集</span><br><span class="line">sdiff <span class="keyword">set</span>1 <span class="keyword">set</span>2 差集</span><br></pre></td></tr></table></figure><h3 id="5-有序集合-zset-元素自带一个值-可以修改"><a href="#5-有序集合-zset-元素自带一个值-可以修改" class="headerlink" title="5.有序集合 - zset(元素自带一个值,可以修改)"></a>5.有序集合 - zset(元素自带一个值,可以修改)</h3><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">zadd zset score1 mem1 score2 mem2 ... 添加</span><br><span class="line">zrem zset mem 移除</span><br><span class="line">zrange zset start <span class="keyword">end</span> 按<span class="symbol">score</span>升序查看</span><br><span class="line">zrevrange zset start <span class="keyword">end</span> 按<span class="symbol">score</span>降序查看</span><br><span class="line">zscore zset mem 查看<span class="symbol">score</span>值</span><br><span class="line">zincrby zset value mem 改变<span class="symbol">score</span>的值</span><br></pre></td></tr></table></figure><h3 id="6-地理位置-LBS应用-Location-Based-Service-基于位置的服务"><a href="#6-地理位置-LBS应用-Location-Based-Service-基于位置的服务" class="headerlink" title="6.地理位置(LBS应用-Location-Based Service - 基于位置的服务)"></a>6.地理位置(LBS应用-Location-Based Service - 基于位置的服务)</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">geoadd zset longitude1 latitude1 member1 longitude2 latitude2 member2 <span class="built_in">..</span>.   添加经纬度信息</span><br><span class="line">geopos zset member1 member2 <span class="built_in">..</span>. 获取指定的位置的经纬度</span><br><span class="line">geodist zset member1 member2 [unit] 计算两点间的距离,默认单位是米,[unit]是单位,可以修改为m,km,mi英里,ft英尺</span><br><span class="line">georadius zset longitude1 latitude1<span class="built_in"> radius </span>m/km/mi/ft 获取以点zset为圆心,radius为半径的圆的范围内的所有的坐标点;后面加withdist,可同时获取距离,加withcoord,可同时获取点的经纬度</span><br></pre></td></tr></table></figure><h1 id="Python中使用数据库"><a href="#Python中使用数据库" class="headerlink" title="Python中使用数据库"></a>Python中使用数据库</h1><h2 id="连接MySQL数据库"><a href="#连接MySQL数据库" class="headerlink" title="连接MySQL数据库"></a>连接MySQL数据库</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">连接对象 = pymysql.connect(host, port, user, password) - 和指定的数据库进行连接并返回一个连接对象</span></span><br><span class="line"><span class="string">参数说明:</span></span><br><span class="line"><span class="string">    host - MySQL主机地址: localhost表示当前设备上的MySQL,服务器的公网IP</span></span><br><span class="line"><span class="string">    port - MySQL服务端口,3306</span></span><br><span class="line"><span class="string">    user - MySQL用户</span></span><br><span class="line"><span class="string">    password - 用户对应的密码(如果创建用户的时候没有设置密码,这个参数可以不用赋值)</span></span><br><span class="line"><span class="string">    database - 建立连接后默认操作的数据库</span></span><br><span class="line"><span class="string">    charset - 设置连接的数据库文件的编码方式</span></span><br><span class="line"><span class="string">    autocommit - 是否自动提交(布尔值)  </span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">with 连接对象.cursor(查询返回值类型(默认值是none)) as 游标对象:</span></span><br><span class="line"><span class="string">    数据库操作上下文</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">说明:</span></span><br><span class="line"><span class="string">    查询返回值类型   -   None: 查询结果以元组的形式返回;</span></span><br><span class="line"><span class="string">                      pymysql.cursors.dictcursor: 查询结果以字典的形式返回;</span></span><br><span class="line"><span class="string">    数据库操作上下文   -   游标对象(数据库操作)只有在数据库操作上下文才有效</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">con = pymysql.connect(</span><br><span class="line">    host=<span class="string">'localhost'</span>,</span><br><span class="line">    port=<span class="number">3306</span>,</span><br><span class="line">    user=<span class="string">'root'</span>,</span><br><span class="line">    password=<span class="string">'123456'</span>,</span><br><span class="line">    database=<span class="string">'school'</span>,</span><br><span class="line">    charset=<span class="string">'utf8'</span>,</span><br><span class="line">    autocommit=<span class="string">'True'</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">with</span> con.cursor() <span class="keyword">as</span> cursor:</span><br><span class="line">    <span class="comment"># 数据库操作上下文</span></span><br><span class="line">    <span class="comment"># 3.执行sql语句: 游标对象.execute(sql语句)</span></span><br><span class="line">    cursor.execute(<span class="string">'create database if not exists pyschool;'</span>)</span><br><span class="line"><span class="comment"># 关闭连接</span></span><br><span class="line">con.close()</span><br></pre></td></tr></table></figure><h2 id="连接Redis服务器"><a href="#连接Redis服务器" class="headerlink" title="连接Redis服务器"></a>连接Redis服务器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">redis.Redis(host=<span class="string">''</span>, password=<span class="string">''</span>, prot=<span class="string">''</span>)</span><br><span class="line">host : redis所在服务器公网地址;</span><br><span class="line">password : 登录口令;</span><br><span class="line">port : redis的服务端口</span><br><span class="line"></span><br><span class="line">连接时会返回一个连接对象:</span><br><span class="line">redis_cli = redis.Redis(host=<span class="string">''</span>, password=<span class="string">''</span>, prot=<span class="string">''</span>)</span><br><span class="line">使用redis完成相应的操作</span><br></pre></td></tr></table></figure><p><strong>扩展:</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">freeze</span> &gt; requirement.txt   将虚拟环境依赖项写入到文件</span><br><span class="line">pip install -r requirement.txt   按照文件安装依赖项</span><br><span class="line"></span><br><span class="line">序列化:  把一个对象变成字符串(str)或字节串(bytes)</span><br><span class="line">反序列化:  把字符串或者字节串还原成对象</span><br><span class="line"><span class="type">json</span>.dumps()   序列化(字符串转换成字节串)</span><br><span class="line"><span class="type">json</span>.loads()   反序列化(字节串转换成字符串)</span><br><span class="line">pickle.dumps()   序列化(字符串转换成字节串)</span><br><span class="line">pickle.loads()   反序列化(字节串转换成字符串)</span><br></pre></td></tr></table></figure><h2 id="将Redis作为用户请求和MySQL数据库之间的缓存介质"><a href="#将Redis作为用户请求和MySQL数据库之间的缓存介质" class="headerlink" title="将Redis作为用户请求和MySQL数据库之间的缓存介质"></a>将Redis作为用户请求和MySQL数据库之间的缓存介质</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_depts_from_db</span><span class="params">()</span>:</span></span><br><span class="line">    conn = pymysql.connect(</span><br><span class="line">        host=<span class="string">'localhost'</span>,</span><br><span class="line">        port=<span class="number">3306</span>,</span><br><span class="line">        user=<span class="string">'root'</span>,</span><br><span class="line">        password=<span class="string">'119148'</span>,</span><br><span class="line">        charset=<span class="string">'utf8'</span>,</span><br><span class="line">        autocommit=<span class="literal">True</span>,</span><br><span class="line">        database=<span class="string">'hrs'</span></span><br><span class="line">    )</span><br><span class="line">    depts = ()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> conn.cursor() <span class="keyword">as</span> cursor:</span><br><span class="line">            cursor.execute(<span class="string">'select dno, dname, dloc from tb_dept'</span>)</span><br><span class="line">            depts = cursor.fetchall()</span><br><span class="line">    <span class="keyword">except</span> pymysql.MySQLError <span class="keyword">as</span> err:</span><br><span class="line">        print(err)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        conn.close()</span><br><span class="line">    <span class="keyword">return</span> depts</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    redis_cli = redis.Redis(host=<span class="string">'49.233.152.190'</span>, port=<span class="number">6379</span>, password=<span class="string">'119148'</span>)</span><br><span class="line">    start = time.time()</span><br><span class="line">    data = redis_cli.get(<span class="string">'depts'</span>)</span><br><span class="line">    <span class="keyword">if</span> data:</span><br><span class="line">        depts = pickle.loads(data)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        depts = load_depts_from_db()</span><br><span class="line">        redis_cli.set(<span class="string">'depts'</span>, pickle.dumps(depts))</span><br><span class="line"></span><br><span class="line">    end = time.time()</span><br><span class="line">    print(depts)</span><br><span class="line">    print(<span class="string">f'执行时间: <span class="subst">&#123;end - start&#125;</span>秒'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 数据库 </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis及其应用</title>
      <link href="/2019/12/27/radis/"/>
      <url>/2019/12/27/radis/</url>
      
        <content type="html"><![CDATA[<p>非关系型数据库Redis<br>Redis是为了实现高速缓存服务,减小MySQL数据库的压力</p><a id="more"></a><h1 id="Linux服务起停"><a href="#Linux服务起停" class="headerlink" title="Linux服务起停"></a>Linux服务起停</h1><p>CentOS<br>    systemctl start 服务名   -&gt;   启动<br>    systemctl stop 服务名   -&gt;   停止<br>    systemctl restart 服务名   -&gt;   重启<br>    systemctl status 服务名   -&gt;   查看状态<br>    systemctl enable 服务名   -&gt;   开机自启<br>    systemctl disable 服务名   -&gt;   禁止自启</p><p>Ubuntu<br>    service 服务名 start   -&gt;   启动</p><h1 id="进程查杀"><a href="#进程查杀" class="headerlink" title="进程查杀"></a>进程查杀</h1><p>ps -ef | grep “”  -&gt;  搜索全部包含字符串的内容<br>ps -ef | grep “” | grep -v “grep” -&gt;  搜索全部包含字符串的内容并且过滤掉包含grep的内容<br>ps -ef | grep -E正则表达式  -&gt;  搜索全部包含符合正则表达式的内容<br>xargs  -&gt;  将列变成行<br>ps -ef | grep “redis-server” | grep -v “grep” | awk ‘{print $2}’ | xargs kill  -&gt;  精准查杀进程</p><p>pkill 进程名  -&gt;  根据名字杀掉进程<br>killall 进程名  -&gt;  根据名字杀掉进程</p><h1 id="redis命令"><a href="#redis命令" class="headerlink" title="redis命令"></a>redis命令</h1><p>ttl key ——&gt; 查看key的存活时间<br>set key value ex N ——&gt; 设置key的存活时间为N秒<br>set key value px N ——&gt; 设置key的存活时间为N毫秒<br>shutdown  ——&gt; 关闭redis服务器<br>shutdown save ——&gt; 保存并关闭redis服务器<br>save ——&gt; 保存<br>bgsave ——&gt; 后台保存<br>dbsize ——&gt; 查看数据库大小<br>keys *  ——&gt; 获取所有的key<br>keys ta*  ——&gt; 获取ta开头的key</p><p><strong>redis默认开启了16个数据库</strong><br>select 0-15 ——&gt; 切换数据库<br>flushdb ——&gt; 清空当前数据库<br>flushall ——&gt; 清空所有数据库</p><p>type keyp ——&gt; 判断key的类型</p><h1 id="redis的数据类型"><a href="#redis的数据类型" class="headerlink" title="redis的数据类型"></a>redis的数据类型</h1><h2 id="1-字符串-string"><a href="#1-字符串-string" class="headerlink" title="1.字符串 - string"></a>1.字符串 - string</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">key</span> <span class="keyword">value</span></span><br><span class="line"><span class="keyword">get</span> <span class="keyword">key</span></span><br><span class="line">strlen <span class="keyword">key</span></span><br><span class="line">append <span class="keyword">key</span> <span class="keyword">value</span> <span class="comment">------&gt; 追加</span></span><br><span class="line">mset key1 value1 key2 value2 ... <span class="comment">------&gt; 同时设置多组值</span></span><br><span class="line">mget key1 key2 ...</span><br><span class="line">incr <span class="keyword">key</span> <span class="comment">------&gt; 当key的值为数字时,数值加一</span></span><br><span class="line">incrby <span class="keyword">key</span> N <span class="comment">------&gt; 为key的值加N</span></span><br><span class="line">decr <span class="keyword">key</span> <span class="comment">------&gt; 减一</span></span><br><span class="line">decrby <span class="keyword">key</span> N <span class="comment">------&gt; 减N</span></span><br><span class="line">getrange <span class="keyword">key</span> m n <span class="comment">------&gt; 从m取到n</span></span><br><span class="line">setrange <span class="keyword">key</span> N <span class="keyword">value</span> <span class="comment">------&gt; 从n开始用value覆盖key的value值</span></span><br></pre></td></tr></table></figure><h2 id="2-哈希-hash"><a href="#2-哈希-hash" class="headerlink" title="2.哈希 - hash"></a>2.哈希 - hash</h2><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hset <span class="built_in">key</span> field <span class="built_in">value</span> 设置键和值</span><br><span class="line">hmset <span class="built_in">key</span> field1 value1 field2 value2 同时设置多个键和值</span><br><span class="line">hget <span class="built_in">key</span> field  查看指定的键对应的值</span><br><span class="line">hmget <span class="built_in">key</span> fieldl field2 同时查看多个键和值</span><br><span class="line">hgetall <span class="built_in">key</span> 获取所有的值和键</span><br><span class="line">hkeys <span class="built_in">key</span> 获取所有的键</span><br><span class="line">hvals <span class="built_in">key</span> 获取所有的值</span><br><span class="line">hexists <span class="built_in">key</span> filed 判断是否存在对应的值</span><br></pre></td></tr></table></figure><h2 id="3-列表-list"><a href="#3-列表-list" class="headerlink" title="3.列表 - list"></a>3.列表 - list</h2><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">lpush <span class="keyword">list</span> value1 value2 ... 插入到最左边</span><br><span class="line">rpush <span class="keyword">list</span> value1 value2 ... 插入到最右边</span><br><span class="line">lpop <span class="keyword">list</span> 取最左边</span><br><span class="line">rpop <span class="keyword">list</span> 取最右边</span><br><span class="line"><span class="keyword">lrange</span> <span class="keyword">list</span> start end 查看列表片段</span><br><span class="line"><span class="keyword">lindex</span> <span class="keyword">list</span> index 查看指定下标对应的元素</span><br><span class="line">llen <span class="keyword">list</span> 列表长度</span><br><span class="line">lrem <span class="keyword">list</span> count value 删除指定个数的元素</span><br></pre></td></tr></table></figure><h2 id="4-集合-set"><a href="#4-集合-set" class="headerlink" title="4.集合 - set"></a>4.集合 - set</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sadd <span class="keyword">set</span> value1 value2 <span class="string">...</span> 添加元素</span><br><span class="line">srem <span class="keyword">set</span> value 移除元素</span><br><span class="line">spop <span class="keyword">set</span> 获取随机元素</span><br><span class="line">smembers <span class="keyword">set</span> 查看所有元素</span><br><span class="line">sismember <span class="keyword">set</span> value 查看元素是否在集合内</span><br><span class="line">scard <span class="keyword">set</span> 查看元素个数</span><br><span class="line">sinter <span class="keyword">set</span>1 <span class="keyword">set</span>2 交集</span><br><span class="line">sunion <span class="keyword">set</span>1 <span class="keyword">set</span>2 并集</span><br><span class="line">sdiff <span class="keyword">set</span>1 <span class="keyword">set</span>2 差集</span><br></pre></td></tr></table></figure><h2 id="5-有序集合-zset-元素自带一个值-可以修改"><a href="#5-有序集合-zset-元素自带一个值-可以修改" class="headerlink" title="5.有序集合 - zset(元素自带一个值,可以修改)"></a>5.有序集合 - zset(元素自带一个值,可以修改)</h2><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">zadd zset score1 mem1 score2 mem2 ... 添加</span><br><span class="line">zrem zset mem 移除</span><br><span class="line">zrange zset start <span class="keyword">end</span> 按<span class="symbol">score</span>升序查看</span><br><span class="line">zrevrange zset start <span class="keyword">end</span> 按<span class="symbol">score</span>降序查看</span><br><span class="line">zscore zset mem 查看<span class="symbol">score</span>值</span><br><span class="line">zincrby zset value mem 改变<span class="symbol">score</span>的值</span><br></pre></td></tr></table></figure><h2 id="6-地理位置-LBS应用-Location-Based-Service-基于位置的服务"><a href="#6-地理位置-LBS应用-Location-Based-Service-基于位置的服务" class="headerlink" title="6.地理位置(LBS应用-Location-Based Service - 基于位置的服务)"></a>6.地理位置(LBS应用-Location-Based Service - 基于位置的服务)</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">geoadd zset longitude1 latitude1 member1 longitude2 latitude2 member2 <span class="built_in">..</span>.   添加经纬度信息</span><br><span class="line">geopos zset member1 member2 <span class="built_in">..</span>. 获取指定的位置的经纬度</span><br><span class="line">geodist zset member1 member2 [unit] 计算两点间的距离,默认单位是米,[unit]是单位,可以修改为m,km,mi英里,ft英尺</span><br><span class="line">georadius zset longitude1 latitude1<span class="built_in"> radius </span>m/km/mi/ft 获取以点zset为圆心,radius为半径的圆的范围内的所有的坐标点;后面加withdist,可同时获取距离,加withcoord,可同时获取点的经纬度</span><br></pre></td></tr></table></figure><h1 id="加密技术"><a href="#加密技术" class="headerlink" title="加密技术"></a>加密技术</h1><p><strong>对称加密 : 加密和解密使用相同的密钥 - AES<br>非对称加密 : 加密和解密使用不同的密钥(公钥和私钥)  -  适合互连网 - RSA</strong></p><p><strong>免密操作</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ssh-keygen</span> <span class="selector-tag">-t</span> <span class="selector-tag">rsa</span> <span class="selector-tag">-b</span> 2048 <span class="selector-tag">-c</span> <span class="selector-tag">anjhon</span><span class="keyword">@163</span>.com   -   生成公钥和私钥</span><br><span class="line">t 指定算法; <span class="selector-tag">b</span> 指定强度; <span class="selector-tag">c</span> 指定邮箱</span><br><span class="line"></span><br><span class="line">进入到<span class="selector-class">.ssh</span>文件,</span><br><span class="line"><span class="selector-tag">id_rsa</span>  <span class="selector-tag">-</span>   私钥</span><br><span class="line"><span class="selector-tag">id_rsa</span><span class="selector-class">.pub</span>  <span class="selector-tag">-</span>   公钥</span><br><span class="line"></span><br><span class="line">将公钥复制到网站的公钥设置</span><br><span class="line"></span><br><span class="line">若有<span class="selector-tag">known-hosts</span>文件,且网站链接不上,直接删除<span class="selector-tag">known-hosts</span>文件</span><br></pre></td></tr></table></figure><h1 id="Python中的redis"><a href="#Python中的redis" class="headerlink" title="Python中的redis"></a>Python中的redis</h1><p><strong>连接redis服务器:</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">redis.Redis(<span class="attribute">host</span>=<span class="string">''</span>, <span class="attribute">password</span>=<span class="string">''</span>, <span class="attribute">prot</span>=<span class="string">''</span>)</span><br><span class="line">host : redis所在服务器公网地址;</span><br><span class="line">password : 登录口令;</span><br><span class="line"><span class="built_in">port </span>: redis的服务端口</span><br><span class="line"></span><br><span class="line">连接时会返回一个连接对象:</span><br><span class="line">redis_cli = redis.Redis(<span class="attribute">host</span>=<span class="string">''</span>, <span class="attribute">password</span>=<span class="string">''</span>, <span class="attribute">prot</span>=<span class="string">''</span>)</span><br><span class="line">使用redis完成相应的操作</span><br></pre></td></tr></table></figure><p><strong>python中使用redis的数据类型:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis   <span class="comment"># 导入redis模块</span></span><br><span class="line"></span><br><span class="line">redis_cli = redis.Redis(host=<span class="string">'10.10.10.10'</span>, password=<span class="string">'123456'</span>, port=<span class="string">'6379'</span>)   <span class="comment"># 连接redis服务器</span></span><br><span class="line"><span class="comment"># print(redis_cli)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> redis_cli.ping():</span><br><span class="line">    <span class="comment"># hash的使用</span></span><br><span class="line">    redis_cli.hmset(<span class="string">'stu1'</span>, &#123;</span><br><span class="line">        <span class="string">'stuname'</span>: <span class="string">'xiaoming'</span>,</span><br><span class="line">        <span class="string">'stuid'</span>: <span class="string">'001'</span>,</span><br><span class="line">        <span class="string">'stusex'</span>: <span class="string">'1'</span>,</span><br><span class="line">        <span class="string">'stuaddr'</span>: <span class="string">'肖家河'</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    print(redis_cli.hget(<span class="string">'stu1'</span>, <span class="string">'stuname'</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 有序集合的使用</span></span><br><span class="line">    redis_cli.zadd(<span class="string">'zset1'</span>, &#123;</span><br><span class="line">        <span class="string">'an'</span>: <span class="number">100</span>,</span><br><span class="line">        <span class="string">'yong'</span>: <span class="number">200</span>,</span><br><span class="line">        <span class="string">'duan'</span>: <span class="number">300</span></span><br><span class="line">    &#125;)</span><br><span class="line">    items = redis_cli.zrevrange(<span class="string">'zset1'</span>, <span class="number">0</span>, <span class="number">-1</span>)</span><br><span class="line">    print(list(map(bytes.decode, items)))</span><br><span class="line">    print(redis_cli.zscore(<span class="string">'zset1'</span>, <span class="string">'an'</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 列表的使用</span></span><br><span class="line">    redis_cli.rpush(<span class="string">'list1'</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">    list1 = redis_cli.lrange(<span class="string">'list1'</span>, <span class="number">0</span>, <span class="number">-1</span>)</span><br><span class="line">    print(list(map(int, list1)))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 字符串的使用</span></span><br><span class="line">    redis_cli.set(<span class="string">'username'</span>, <span class="string">'an'</span>)</span><br><span class="line">    print(redis_cli.ttl(<span class="string">'username'</span>))</span><br><span class="line">    print(redis_cli.get(<span class="string">'username'</span>).decode(<span class="string">'utf-8'</span>))</span><br><span class="line">    redis_cli.set(<span class="string">'user_age'</span>, <span class="string">'25'</span>)</span><br><span class="line">    redis_cli.set(<span class="string">'user_tel'</span>, <span class="string">'133'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'连接失败'</span>)</span><br></pre></td></tr></table></figure><p><strong>扩展:</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">freeze</span> &gt; requirement.txt   将虚拟环境依赖项写入到文件</span><br><span class="line">pip install -r requirement.txt   按照文件安装依赖项</span><br><span class="line"></span><br><span class="line">序列化:  把一个对象变成字符串(str)或字节串(bytes)</span><br><span class="line">反序列化:  把字符串或者字节串还原成对象</span><br><span class="line"><span class="type">json</span>.dumps()   序列化(字符串转换成字节串)</span><br><span class="line"><span class="type">json</span>.loads()   反序列化(字节串转换成字符串)</span><br><span class="line">pickle.dumps()   序列化(字符串转换成字节串)</span><br><span class="line">pickle.loads()   反序列化(字节串转换成字符串)</span><br></pre></td></tr></table></figure><p><strong>数据上传redis服务器并从redis获取数据</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, sex, addr)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.sex = sex</span><br><span class="line">        self.addr = addr</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span>   <span class="comment"># 魔法方法(将数据显示出来)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'%s, %d, %s, %s'</span> % (self.name, self.age, self.sex, self.addr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stu1 = Student(<span class="string">'小明'</span>, <span class="number">20</span>, <span class="string">'男'</span>, <span class="string">'昆明'</span>)</span><br><span class="line">stu2 = Student(<span class="string">'小黄'</span>, <span class="number">30</span>, <span class="string">'女'</span>, <span class="string">'上海'</span>)</span><br><span class="line"></span><br><span class="line">list1 = [stu1, stu2]   <span class="comment"># 将学生对象添加到列表中</span></span><br><span class="line"></span><br><span class="line">redis_cli = redis.Redis(host=<span class="string">'10.10.10.10'</span>, password=<span class="string">'123456'</span>, port=<span class="string">'6379'</span>)   <span class="comment"># 连接redis服务器</span></span><br><span class="line"><span class="keyword">if</span> redis_cli.ping():</span><br><span class="line">    <span class="comment"># redis_cli.set('student_all', pickle.dumps(list1))   -   将本地的数据添加到redis</span></span><br><span class="line">    redis_stu = pickle.loads(redis_cli.get(<span class="string">'student_all'</span>))   <span class="comment"># 获取redis内的数据并进行反序列化</span></span><br><span class="line">    print(redis_stu)</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'连接失败'</span>)</span><br></pre></td></tr></table></figure><p><strong>将redis作为用户请求和数据库之间的缓存介质</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_depts_from_db</span><span class="params">()</span>:</span></span><br><span class="line">    conn = pymysql.connect(   <span class="comment"># 连接本地的MySQL服务器</span></span><br><span class="line">        host=<span class="string">'localhost'</span>,</span><br><span class="line">        port=<span class="number">3306</span>,</span><br><span class="line">        user=<span class="string">'root'</span>,</span><br><span class="line">        password=<span class="string">'123456'</span>,</span><br><span class="line">        charset=<span class="string">'utf8'</span>,</span><br><span class="line">        autocommit=<span class="literal">True</span>,</span><br><span class="line">        database=<span class="string">'hrs'</span></span><br><span class="line">    )</span><br><span class="line">    depts = ()</span><br><span class="line">    <span class="keyword">try</span>:   <span class="comment"># 异常捕获</span></span><br><span class="line">        <span class="keyword">with</span> conn.cursor() <span class="keyword">as</span> cursor:</span><br><span class="line">            cursor.execute(<span class="string">'select dno, dname, dloc from tb_dept'</span>)   <span class="comment"># 获取数据</span></span><br><span class="line">            depts = cursor.fetchall()</span><br><span class="line">    <span class="keyword">except</span> pymysql.MySQLError <span class="keyword">as</span> err:</span><br><span class="line">        print(err)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        conn.close()</span><br><span class="line">    <span class="keyword">return</span> depts</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    redis_cli = redis.Redis(host=<span class="string">'10.10.10.10'</span>, password=<span class="string">'123456'</span>, port=<span class="string">'6379'</span>)</span><br><span class="line">    start = time.time()</span><br><span class="line">    data = redis_cli.get(<span class="string">'depts'</span>)   <span class="comment"># 获取redis的depts对应的数据</span></span><br><span class="line">    <span class="keyword">if</span> data:</span><br><span class="line">        depts = pickle.loads(data)   <span class="comment"># 若获取到数据,将数据反序列化并保存下来</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        depts = load_depts_from_db()   <span class="comment"># 若没有数据,从数据库获取数据,并将数据保存到redis中,以便下次使用时优先从redis中获取,以减轻服务器的压力并且提高数据获取效率</span></span><br><span class="line">        redis_cli.set(<span class="string">'depts'</span>, pickle.dumps(depts))</span><br><span class="line"></span><br><span class="line">    end = time.time()</span><br><span class="line">    print(depts)</span><br><span class="line">    print(<span class="string">f'执行时间: <span class="subst">&#123;end - start&#125;</span>秒'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL基础</title>
      <link href="/2019/12/25/SQL%E5%9F%BA%E7%A1%80/"/>
      <url>/2019/12/25/SQL%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>关系型数据库之MySQL</p><a id="more"></a><h1 id="SQL基础"><a href="#SQL基础" class="headerlink" title="SQL基础"></a>SQL基础</h1><p>SQL又叫结构化查询语言,分为三大类,分别是:DDL(数据定义语言),DML(数据操作语言),DCL(数据控制语言)<br>DDL:create(创建数据库和表)、drop(删除数据库和表)、alter(修改表)<br>DML:insert(增)、delete(删)、update(改)、select(查)<br>DCL:grant(授权)、revoke(召回授权)</p><p>sql的注释是在注释前加–<br>sql中sql的关键字不区分大小写<br>sq语句结束后需要加分号</p><h1 id="DDL-数据定义"><a href="#DDL-数据定义" class="headerlink" title="DDL(数据定义)"></a>DDL(数据定义)</h1><h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><h3 id="1-创建数据库"><a href="#1-创建数据库" class="headerlink" title="1.创建数据库"></a>1.创建数据库</h3><p>CREATE DATABASE 数据库名称;   —&gt; 创建指定数据库，如果这个数据库已经存在，会报错<br><strong>CREATE DATABASE IF NOT EXISTS 数据库名称;    —&gt; 当指定数据库不存在的时候创建对应的数据库</strong><br>CREATE DATABASE IF NOT EXISTS 数据库名称 DEFAULT CHARSET utf8;    —&gt; 创建数据库的时候指定数据文件编码方式<br>CREATE DATABASE school;</p><h3 id="2-删除数据库"><a href="#2-删除数据库" class="headerlink" title="2.删除数据库"></a>2.删除数据库</h3><p><strong>DROP DATABASE 数据库名称;</strong><br><strong>DROP DATABASE IF EXISTS 数据库名;</strong><br>DROP DATABASE school;<br>DROP DATABASE IF EXISTS school;</p><h3 id="3-切换-使用数据库"><a href="#3-切换-使用数据库" class="headerlink" title="3.切换/使用数据库"></a>3.切换/使用数据库</h3><p><strong>USE 数据库;  -&gt;   切换/使用指定数据库；切换后所有数据库相关操作都是针对这个数据库</strong><br>USE school;</p><h2 id="数据表操作"><a href="#数据表操作" class="headerlink" title="数据表操作"></a>数据表操作</h2><h3 id="1-创建表（数据库文件是通过表来存数据）"><a href="#1-创建表（数据库文件是通过表来存数据）" class="headerlink" title="1.创建表（数据库文件是通过表来存数据）"></a>1.创建表（数据库文件是通过表来存数据）</h3><p><strong>CREATE TABLE IF NOT EXISTS 表名(字段名1 类型1 约束1, 字段名2 类型2 约束2, …);</strong><br><strong>说明:</strong><br>①:表名:程序员自己命名,见名知义,一般需要加前缀t_/tb_示表<br>②:字段名:程序员自己命名,见名知义;注意:字段中一定要有一个字段来作为主键(可以表示唯一一条记录);主键要求不为空,并且是唯一的,而且数据类型是整型<br>③:类型名:必须是当前数据库支持的数据类型,mysql中常用的数据类型:int(整型),float(浮点型),varchar(字符串)/text(字符串),bit(布尔),date/datet ime(日期和时间)<br>④:约束:not null(非空约束)、unique(唯一约束)、default(默认值约束)、primary key(主键约束)、foreign key(外键约束)、auto_increment(自动增长)<br>      注意:约束可以没有,也可以有多个</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> tb_student</span><br><span class="line">(</span><br><span class="line">stuid <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> auto_increment,</span><br><span class="line">stuname <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">stubirth <span class="built_in">DATE</span>,</span><br><span class="line">stugender <span class="built_in">bit</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>,</span><br><span class="line">stutel <span class="built_in">VARCHAR</span>(<span class="number">11</span>) <span class="keyword">UNIQUE</span></span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (stuid)  主键约束还可以单独设置</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="2-删除表"><a href="#2-删除表" class="headerlink" title="2.删除表"></a>2.删除表</h3><p><strong>DROP TABLE IF EXISTS 表名;</strong><br>DROP TABLE IF EXISTS tb_student;</p><h3 id="3-修改表"><a href="#3-修改表" class="headerlink" title="3.修改表"></a>3.修改表</h3><h4 id="3-1-添加字段"><a href="#3-1-添加字段" class="headerlink" title="3.1 添加字段"></a>3.1 添加字段</h4><p><strong>ALTER TABLE 表名 ADD COLUMN 字段名 类型 约束;</strong><br>ALTER TABLE tb_student ADD COLUMN stuaddr VARCHAR(200);  </p><h4 id="3-2-删除字段"><a href="#3-2-删除字段" class="headerlink" title="3.2 删除字段"></a>3.2 删除字段</h4><p><strong>ALTER TABLE 表明 DROP COLUMN 字段名;</strong><br>ALTER TABLE tb_student DROP COLUMN stuaddr;</p><h4 id="3-3-修改字段名"><a href="#3-3-修改字段名" class="headerlink" title="3.3 修改字段名"></a>3.3 修改字段名</h4><p><strong>ALTER TABLE 表名 CHANGE 原字段 新字段 新类型;</strong><br>ALTER TABLE tb_student CHANGE tel stutel VARCHAR(11);</p><h4 id="3-4-添加约束"><a href="#3-4-添加约束" class="headerlink" title="3.4 添加约束"></a>3.4 添加约束</h4><p><strong>3.4.1 创建表或添加字段的时候直接在字段后面添加约束</strong><br><strong>3.4.2 通过修改表的样式添加约束</strong><br><strong>ALTER TABLE 表名 ADD CONSTRAINT 约束索引名 约束名(字段);   -&gt;   给指定字段添加指定约束</strong><br><strong>ALTER TABLE 表1 ADD CONSTRAINT 约束索引名 FOREIGN KEY(字段1) REFERENCES 表2(字段2);   -&gt;   给表1中的字段1添加外键约束,并且字段1的值依赖表2中的字段2</strong></p><h4 id="3-5-删除约束"><a href="#3-5-删除约束" class="headerlink" title="3.5 删除约束"></a>3.5 删除约束</h4><p><strong>ALTER TABLE 表名 DROP INDEX 约束索引名;   -&gt;   删除指定约束</strong><br><strong>ALTER TABLE 表名 DROP FOREIGN KEY 外键索引;   -&gt;   删除外键约束</strong></p><h1 id="0ML-数据操作"><a href="#0ML-数据操作" class="headerlink" title="0ML(数据操作)"></a>0ML(数据操作)</h1><h2 id="1-INSERT-增"><a href="#1-INSERT-增" class="headerlink" title="1.INSERT(增)"></a>1.INSERT(增)</h2><p><strong>方法①:INSERT INTO 表名 VALUES(值1, 值2, 值3,…)  -&gt; 按表中字段的顺序依次给每个字段赋值,最终形成一条新的记录</strong><br>说明: 日期(DATE)  -&gt;  1)日期字符串:如: ‘2019-12-23’<br>                               2)DATE((NOW())-当前日期; YEAR(NOW())-当前年; MONTH(NOW())-当前月;</p><p>INSERT INTO tb_student VALUES(1, ‘天明’, ‘2000-10-2’, 1, ‘12345678901’);</p><p><strong>方法②:INSERT INTO 表名(字段名1,字段名2,…) VALUES(值1,值2,…);  -&gt;  按指定顺序给指定字段赋值,最终形成一条新的记录</strong></p><p>INSERT INTO tb_student(stuname, stubirth, stugender, stutel) VALUES(‘少羽’, ‘2000-8-21’, 1, ‘12345678902’);</p><p><strong>方法③:INSERT INTO 表名(字段名1,字段名2,…) VALUES(值1,值..…),(值11,值22,..),(值111,值2222,…),…;  -&gt;  同时插入多条记录</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_student(stuname, stubirth, stugender, stutel) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">'月儿'</span>, <span class="string">'2000-11-21'</span>, <span class="number">0</span>, <span class="string">'12345678903'</span>),</span><br><span class="line">(<span class="string">'卫庄'</span>, <span class="string">'1989-8-21'</span>, <span class="number">1</span>, <span class="string">'12345678904'</span>),</span><br><span class="line">(<span class="string">'盖聂'</span>, <span class="string">'1990-8-21'</span>, <span class="number">1</span>, <span class="string">'12345678905'</span>),</span><br><span class="line">(<span class="string">'胜七'</span>, <span class="string">'1977-8-21'</span>, <span class="number">1</span>, <span class="string">'12345678906'</span>),</span><br><span class="line">(<span class="string">'惊鲵'</span>, <span class="string">'1971-8-21'</span>, <span class="number">0</span>, <span class="string">'12345678907'</span>),</span><br><span class="line">(<span class="string">'掩日'</span>, <span class="string">'1972-8-21'</span>, <span class="number">1</span>, <span class="string">'12345678908'</span>),</span><br><span class="line">(<span class="string">'黑白玄鉴'</span>, <span class="string">'1970-8-21'</span>, <span class="number">1</span>, <span class="string">'12345678909'</span>),</span><br><span class="line">(<span class="string">'真刚'</span>, <span class="string">'1973-8-25'</span>, <span class="number">1</span>, <span class="string">'12345678910'</span>),</span><br><span class="line">(<span class="string">'断水'</span>, <span class="string">'1974-8-21'</span>, <span class="number">1</span>, <span class="string">'12345678911'</span>),</span><br><span class="line">(<span class="string">'赵高'</span>, <span class="string">'1976-8-31'</span>, <span class="number">1</span>, <span class="string">'12345678912'</span>),</span><br><span class="line">(<span class="string">'韩非'</span>, <span class="string">'1976-8-31'</span>, <span class="number">1</span>, <span class="string">'12345678913'</span>),</span><br><span class="line">(<span class="string">'韩信'</span>, <span class="string">'1976-8-31'</span>, <span class="number">1</span>, <span class="string">'12345678914'</span>),</span><br><span class="line">(<span class="string">'章邯'</span>, <span class="string">'1976-8-31'</span>, <span class="number">1</span>, <span class="string">'12345678915'</span>),</span><br><span class="line">(<span class="string">'鬼谷子'</span>, <span class="string">'1976-8-31'</span>, <span class="number">1</span>, <span class="string">'12345678916'</span>),</span><br><span class="line">(<span class="string">'东皇太一'</span>, <span class="string">'1976-8-31'</span>, <span class="number">1</span>, <span class="string">'12345678917'</span>),</span><br><span class="line">(<span class="string">'晓梦'</span>, <span class="string">'1976-8-31'</span>, <span class="number">0</span>, <span class="string">'12345678918'</span>),</span><br><span class="line">(<span class="string">'逍遥子'</span>, <span class="string">'1976-8-31'</span>, <span class="number">1</span>, <span class="string">'12345678919'</span>),</span><br><span class="line">(<span class="string">'赤炼'</span>, <span class="string">'1976-8-31'</span>, <span class="number">1</span>, <span class="string">'12345678920'</span>),</span><br><span class="line">(<span class="string">'高渐离'</span>, <span class="string">'1976-8-31'</span>, <span class="number">1</span>, <span class="string">'12345678921'</span>);</span><br></pre></td></tr></table></figure><h2 id="2-DELETE-删"><a href="#2-DELETE-删" class="headerlink" title="2.DELETE(删)"></a>2.DELETE(删)</h2><p><strong>方法①:DELETE FROM 表名;  -&gt;   删除当前表中所有的记录(清空表)</strong><br><strong>DELETE FROM tb_student;</strong></p><p><strong>方法②:DELETE FROM 表名 WHERE 条件;  -&gt;  删除所有满足条件的记录</strong></p><p><strong>补充:</strong><br>sq1条件语句的写法(筛选)(条件语句在写的时候可以通过加()改变运算顺序)</p><p><strong>比较运算:=(等于),&lt;&gt;(不等于),&gt;,&lt;,&gt;=,&lt;=</strong><br>DELETE FROM tb_student WHERE stuname=’真刚’;</p><p><strong>逻辑运算:and(逻辑与),or(逻辑或),not(逻辑非);</strong><br>DELETE FROM tb_student WHERE stuid&gt;=35 AND stugender&lt;&gt;1;</p><p><strong>集合包含:in</strong><br>DELETE FROM tb_student WHERE stuname in (‘逍遥子’, ‘韩信’, ‘断水’);</p><p><strong>范围:between…and</strong><br>DELETE FROM tb_student WHERE stubirth BETWEEN ‘1976-8-21’ AND ‘1976-8-31’;</p><p><strong>判断是否为空:is null,is not null</strong><br>DELETE FROM tb_student WHERE (stubirth IS NULL) AND (stutel IS NULL);</p><p><strong>筛选:like(% -&gt; 任意个任意字符; _  -&gt;  表示单个任意字符)</strong><br>DELETE FROM tb_student WHERE stuname LIKE ‘盖_ ‘;<br>DELETE FROM tb_student WHERE stutel LIKE ‘%2_’;</p><h2 id="3-UPDATE-改"><a href="#3-UPDATE-改" class="headerlink" title="3.UPDATE(改)"></a>3.UPDATE(改)</h2><p>ALTER TABLE tb_student ADD COLUMN stuaddr VARCHAR(200);</p><p><strong>UPDATE 表名 SET 字段1=新值1,字段2=新值2,…;  -&gt;  将指定表中所有记录中指定的字段修改成指定的值</strong></p><p>UPDATE tb_student SET stuaddr=’成都’;</p><p><strong>UPDATE 表名 SET 字段1=新值1,字段2=新值2,… WHERE 条件;  -&gt;  将满足条件的记录的指定字段设置为指定的值</strong></p><p>UPDATE tb_student SET stuaddr=’昆明’ WHERE stugender=0;</p><h2 id="4-SELECT-查"><a href="#4-SELECT-查" class="headerlink" title="4.SELECT(查)"></a>4.SELECT(查)</h2><p><strong>SELECT * FROM 表名;  -&gt;  获取指定表中所有的记录中所有字段的数据</strong></p><p>SELECT * FROM tb_student;</p><p><strong>映射</strong><br><strong>SELECT 字段1,字段2,字段3,… FROM 表名;  -&gt;  获取表中所有记录指定字段的数据</strong><br>SELECT stuname, stugender, stuaddr FROM tb_student;</p><p><strong>列重名</strong><br><strong>SELECT 字段名1 AS ‘新字段名1’, 字段名2,字段名3 AS ‘新字段名3’, … FROM 表名;</strong><br>SELECT stuname AS ‘姓名’, stugender AS ‘性别’, stuaddr AS ‘地址’ from tb_student</p><p><strong>结果重新赋值(主要针对布尔)</strong><br><strong>SELECT IF(字段名, 值1, 值2) FROM 表名;   -&gt;   一如果if中对应的字段的值是1,最后结果是值1,否则是值2(mysql特有写法)</strong></p><p>SELECT stuname AS ‘姓名’, IF(stugender, ‘男’, ‘女’) AS ‘性别’, stuaddr AS ‘地址’ from tb_student</p><p><strong>SELECT CASE 字段 WHEN 1或0 THEN 新值1 ELSE 新值2 END FROM 表名;</strong></p><p>SELECT stuname AS ‘姓名’, CASE stugender WHEN 1 THEN ‘男’ ELSE ‘女’ END AS ‘性别’, stuaddr AS ‘地址’ from tb_student</p><p><strong>列合并(查询的时候将多个字段合并成一个数据返回结果)</strong><br><strong>SELECT CONCAT(字段1,字段2,…) FROM 表名;</strong><br>SELECT CONCAT(stuname, stuid) as ‘姓名学号’ FROM tb_student;</p><p><strong>筛选</strong><br><strong>上面所有的查询语法的后面都可以加’where条件’对记录进行筛选</strong><br><strong>SELECT * FROM 表名 WHERE 条件;</strong><br>SELECT stuname, stutel FROM tb_student WHERE stugender=0;<br>SELECT * FROM tb_student WHERE stuname LIKE ‘月_’</p><p><strong>排序</strong><br><strong>SELECT * FROM 表名 ORDER BY 字段;   -&gt;   将查询结果按指定字段的值从小到大排序</strong></p><p>SELECT * FROM tb_student ORDER BY stuid;</p><p><strong>SELECT * FROM 表名 ORDER BY 字段 ASC;   -&gt;   将查询结果按指定字段的值从小到大排序</strong><br><strong>SELECT * FROM 表名 ORDER BY 字段 DESC;   -&gt;   将查询结果按指定字段的值从大到小排序</strong></p><p>SELECT * FROM tb_student ORDER BY stuid DESC;</p><p><strong>SELECT * FROM 表名 ORDER BY 字段1 DESC, 字段2 DESC;   -&gt;   将查询结果按指定字段的值从大到小排序</strong></p><p>SELECT * FROM tb_student ORDER BY stugender DESC, stubirth;   -&gt;   先按stugender从大到小排序;stugender相同再按stubirth从小到大排序</p><h2 id="5-外键约束"><a href="#5-外键约束" class="headerlink" title="5.外键约束"></a>5.外键约束</h2><p>让两个表之间产生联系</p><p><strong>添加外键约束的规范:</strong><br>一对一: 可以添加到任意一方;<br>一对多和多对一: 添加到多的一方;<br>多对多: 两张表没有办法直接建立多对多的对应关系,需要第三张表辅助</p><h2 id="6-查询中的高级查询"><a href="#6-查询中的高级查询" class="headerlink" title="6.查询中的高级查询"></a>6.查询中的高级查询</h2><h3 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h3><p><strong>SELECT DISTINCT 字段名 FROM 表名;    -&gt;   去除重复的项</strong><br><strong>SELECT DISTINCT redate FROM tb_record;</strong></p><h3 id="限制和分页"><a href="#限制和分页" class="headerlink" title="限制和分页"></a>限制和分页</h3><p><strong>限制: SELECT * FROM 表名 LIMIT N;   -&gt;   获取前N条数据</strong><br><strong>SELECT * FROM tb_record LIMIT 5;</strong><br><strong>偏移:</strong><br><strong>①:SELECT * FROM 表名 LIMIT M OFFSET N;   -&gt;   跳过前N条数据获取M条数据(从第N+1条数据开始,获取M条数据)</strong><br><strong>②:SELECT * FROM 表名 LIMIT N, M;   -&gt;   跳过前N条数据获取M条数据(从第N+1条数据开始,获取M条数据)</strong></p><h3 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h3><p><strong>max(), min(), sum(), avg(), count()   -&gt;   MySQL专用</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MAX</span>(score) <span class="keyword">AS</span> <span class="string">'最高分'</span> <span class="keyword">FROM</span> tb_record;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MIN</span>(score) <span class="keyword">AS</span> <span class="string">'最低分'</span> <span class="keyword">FROM</span> tb_record;</span><br><span class="line">SELECT SUM(score) AS '总分' FROM tb_record;   -&gt;   -- 求和所有分数的和,如果某一个记录的分数是空,那么这条记录不存与运算</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AVG</span>(score) <span class="keyword">AS</span> <span class="string">'平均分'</span> <span class="keyword">FROM</span> tb_record;  </span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(score) <span class="keyword">AS</span> <span class="string">'个数'</span> <span class="keyword">FROM</span> tb_record;</span><br></pre></td></tr></table></figure><h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><p><strong>SELECT 聚合操作 FROM 表名 GROUP BY (字段);   -&gt;   按指定字段的值对表进行分组,然后对每个分组进行聚合操作</strong><br><strong>注意:</strong><br><strong>①分组后,除了分组字段以外,其他字段只能聚合操作</strong><br><strong>②分组后要加条件,则用having代替where</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 获取每个学生所有学科的平局分</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">sid</span>, <span class="keyword">AVG</span>(score) <span class="keyword">FROM</span> tb_record <span class="keyword">GROUP</span> <span class="keyword">BY</span> (<span class="keyword">sid</span>);</span><br><span class="line"><span class="comment">-- 获取每个学科的平局分</span></span><br><span class="line"><span class="keyword">SELECT</span> cid, <span class="keyword">AVG</span>(score) <span class="keyword">FROM</span> tb_record <span class="keyword">GROUP</span> <span class="keyword">BY</span> (cid);</span><br><span class="line"><span class="comment">-- 获取每个学生选的课程的数量</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">sid</span>, <span class="keyword">COUNT</span>(cid) <span class="keyword">FROM</span> tb_record <span class="keyword">GROUP</span> <span class="keyword">BY</span> (<span class="keyword">sid</span>);</span><br></pre></td></tr></table></figure><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p><strong>①:将一个查询的结果作为另外一个查询的条件</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 例: 获取成绩是最高分的学生的id</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">sid</span>, score <span class="keyword">FROM</span> tb_record <span class="keyword">WHERE</span> score=(<span class="keyword">SELECT</span> <span class="keyword">MAX</span>(score) <span class="keyword">FROM</span> tb_record);</span><br><span class="line"><span class="comment">-- 例: 获取分数最高的三个学生</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">sid</span> <span class="keyword">FROM</span> tb_record <span class="keyword">WHERE</span> score <span class="keyword">IN</span> (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span>(score) <span class="keyword">FROM</span> tb_record <span class="keyword">ORDER</span> <span class="keyword">BY</span> (score)<span class="keyword">DESC</span> <span class="keyword">LIMIT</span> <span class="number">3</span>);</span><br><span class="line"><span class="comment">-- 例: 获取选了两门以上的课程的学生id</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">sid</span> <span class="keyword">FROM</span> tb_record <span class="keyword">GROUP</span> <span class="keyword">BY</span> (<span class="keyword">sid</span>) <span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(cid)&gt;<span class="number">2</span>;</span><br><span class="line"><span class="comment">-- 例: 获取选了两门以上的课程的学生姓名</span></span><br><span class="line"><span class="keyword">SELECT</span> stuname <span class="keyword">FROM</span> tb_student <span class="keyword">WHERE</span> stuid <span class="keyword">IN</span> (<span class="keyword">SELECT</span> <span class="keyword">sid</span> <span class="keyword">FROM</span> tb_record <span class="keyword">GROUP</span> <span class="keyword">BY</span> (<span class="keyword">sid</span>) <span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(cid)&gt;<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p><strong>②:将一个查询的结果作为另外一个查询的对象</strong><br><strong>注: 若将查询结果作为查询对象,则必须在使用时用as重命名</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tb_student <span class="keyword">LIMIT</span> <span class="number">4</span>,<span class="number">5</span>;</span><br><span class="line"><span class="keyword">SELECT</span> stuname <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tb_student <span class="keyword">LIMIT</span> <span class="number">4</span>,<span class="number">5</span>) <span class="keyword">AS</span> t1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> stuname <span class="keyword">AS</span> sname, stuaddr <span class="keyword">AS</span> saddr <span class="keyword">FROM</span> tb_student <span class="keyword">WHERE</span> stusex=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">SELECT</span> sname, saddr <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> stuname <span class="keyword">AS</span> sname, stuaddr <span class="keyword">AS</span> saddr <span class="keyword">FROM</span> tb_student <span class="keyword">WHERE</span> stusex=<span class="number">0</span>) <span class="keyword">AS</span> t2 <span class="keyword">WHERE</span> saddr <span class="keyword">LIKE</span> <span class="string">'%成都'</span>;</span><br></pre></td></tr></table></figure><h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><h4 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h4><p><strong>①: SELECT * FROM 表名1, 表名2, … WHERE 连接条件 查询条件;</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询部门中薪水最高的人姓名、工资和所在部门名称</span></span><br><span class="line"><span class="keyword">SELECT</span> dno, <span class="keyword">MAX</span>(sal) <span class="keyword">FROM</span> tb_emp <span class="keyword">GROUP</span> <span class="keyword">BY</span>(dno);</span><br><span class="line"><span class="keyword">SELECT</span> ename, sal, dname <span class="keyword">FROM</span> tb_emp, tb_dept, (<span class="keyword">SELECT</span> dno <span class="keyword">AS</span> dno2, <span class="keyword">MAX</span>(sal) <span class="keyword">AS</span> max_sal <span class="keyword">FROM</span> tb_emp <span class="keyword">GROUP</span> <span class="keyword">BY</span>(dno)) <span class="keyword">AS</span> t2 <span class="keyword">WHERE</span> tb_emp.dno=tb_dept.dno <span class="keyword">AND</span> tb_emp.dno=t2.dno2 <span class="keyword">AND</span> sal=max_sal;</span><br></pre></td></tr></table></figure><p><strong>②: SELECT * FROM t1 INNER JOIN t2 ON 连接条件1 INNER JOIN t3 ON 连接条件2;(注意:如果有中间表,中间表放在最前面)</strong><br><strong>注意:如果既有连接条件又有查询条件,查询条件必须放在连接条件的后面</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询部门中薪水最高的人姓名、工资和所在部门名称</span></span><br><span class="line"><span class="keyword">SELECT</span> ename, sal, dname <span class="keyword">FROM</span> tb_emp <span class="keyword">INNER</span> <span class="keyword">JOIN</span> tb_dept <span class="keyword">ON</span> tb_emp.dno=tb_dept.dno <span class="keyword">INNER</span> <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> dno <span class="keyword">AS</span> dno2, <span class="keyword">MAX</span>(sal) <span class="keyword">AS</span> max_sal <span class="keyword">FROM</span> tb_emp <span class="keyword">GROUP</span> <span class="keyword">BY</span>(dno)) <span class="keyword">AS</span> t2 <span class="keyword">ON</span> tb_emp.dno=t2.dno2 <span class="keyword">WHERE</span> sal=max_sal;</span><br></pre></td></tr></table></figure><h4 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h4><p><strong>在MySQL中只支持左外连接(LEFT JOIN)和右外连接(right join)</strong></p><p><strong>①: 左连接: SELECT * FROM 表1 LEFT JOIN 表2 : 先将表1中的记录全部取出来,按连接条件依次连接表2中的记录,表1中的记录找不到满足条件,则表2记录那么连接的内容就是空</strong></p><p><strong>②: 右连接: SELECT * FROM 表1 RIGHT JOIN 表2 : 先将表2中的记录全部取出来,按连接条件依次连接表1中的记录,表2中的记录找不到满足条件,则表1记录那么连接的内容就是空</strong></p><h1 id="DCL-数据控制"><a href="#DCL-数据控制" class="headerlink" title="DCL(数据控制)"></a>DCL(数据控制)</h1><p>DCL主要提供授权和授权召回以及视图, 索引等相关功能</p><h2 id="用户管理-一般只有root账号有此权限"><a href="#用户管理-一般只有root账号有此权限" class="headerlink" title="用户管理(一般只有root账号有此权限)"></a>用户管理(一般只有root账号有此权限)</h2><p><strong>创建用户</strong><br><strong>CREATE USER ‘用户名‘@’登陆地址’;  -&gt;   创建指定用户,用户登陆时不用输入密码</strong><br><strong>CREATE USER ‘用户名‘@’登陆地址’ identified by ‘密码’;   -&gt;   创建指定用户,用户登陆时需要输入密码</strong><br>说明:<br>登录地址   -&gt;   ip地址<br>                          localhost(本机)<br>                          %(任意位置)</p><p><strong>删除用户</strong><br><strong>DROP USER ‘用户名’;</strong></p><h2 id="授权管理"><a href="#授权管理" class="headerlink" title="授权管理"></a>授权管理</h2><p><strong>授权</strong><br><strong>GRANT 权限类型 ON 数据库.表 TO ‘用户名‘@’登陆地址’;</strong></p><blockquote><p>说明:<br>权限类型: insert, delete, update, select,  create, drop, all privilege(所有权限);</p></blockquote><p><strong>召回权限</strong><br><strong>REVOKE 权限类型 ON 数据库.表 FROM 用户名;</strong></p><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>若完成一个任务需要多个操作,但只要有一个失败则任务不完成,数据回到任务开始前的状态;只有所有操作都成功了,数据库才更新;此时用事务语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;   <span class="comment">-- 开启事务环境 </span></span><br><span class="line"><span class="keyword">UPDATE</span> tb_student <span class="keyword">SET</span> stubirth=<span class="string">'1993-1-1'</span> <span class="keyword">WHERE</span> stusex=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> tb_student <span class="keyword">WHERE</span> stuname <span class="keyword">LIKE</span> <span class="string">'杨%'</span></span><br><span class="line"><span class="keyword">COMMIT</span>;   <span class="comment">-- 提交事务环境中的操作结果</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br></pre></td></tr></table></figure><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p><strong>创建视图:</strong><br><strong>CREATE VIEW 视图名 AS sql查询语句;</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 获取学生学科的成绩</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> vw_stu_score <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> stuid, stuname, couid, couname, score <span class="keyword">FROM</span> tb_student, tb_record, tb_course <span class="keyword">WHERE</span> tb_student.stuid=tb_record.sid <span class="keyword">AND</span> tb_course.couid=tb_record.cid;</span><br></pre></td></tr></table></figure><p><strong>使用视图:</strong><br><strong>(视图查询操作和表的查询操作基本一致,一般不增删改)</strong></p><blockquote><p>应用:<br>方便查询,<br>给权限不够的用户查看表内的部分信息.</p></blockquote><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>索引就像书的目录,记录了数据的位置, 可以提高查询速度;给使用频率高的字段添加索引,(主键自带唯一索引)</p><p><strong>添加索引:</strong><br><strong>①: CREATE INDEX 索引名 ON 表名(字段);   -&gt;   给指定字段添加索引</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tb_student <span class="keyword">WHERE</span> stuname=<span class="string">'岳不群'</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> idx_stuname <span class="keyword">ON</span> tb_student(stuname);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> idx_stuaddr <span class="keyword">ON</span> tb_student(stuaddr);</span><br></pre></td></tr></table></figure><p><strong>②: CREATE UNIQUE INDEX 索引名 ON 表名(字段);   -&gt;   给指定字段添加唯一索引</strong><br>注意:模糊查询的时候如果以%和_开头则索引无效</p><p><strong>删除索引:</strong><br><strong>ALTER TABLE 表名 DROP INDEX 索引名;   -&gt;   删除指定索引</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tb_student <span class="keyword">DROP</span> <span class="keyword">INDEX</span> idx_stuname;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tb_student <span class="keyword">DROP</span> <span class="keyword">INDEX</span> idx_stuaddr;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 基础 </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim基础使用教程</title>
      <link href="/2019/12/23/vim%E7%BC%96%E8%BE%91%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/12/23/vim%E7%BC%96%E8%BE%91%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>vim日常使用</p><a id="more"></a><h1 id="1-vim的三种模式"><a href="#1-vim的三种模式" class="headerlink" title="1.vim的三种模式"></a>1.vim的三种模式</h1><ul><li><strong>命令模式：</strong>未尾既没有插入的字样也没有冒号（在编辑模式和末行模式下按esc键可以进入命令模式）</li><li><strong>编辑模式：</strong>末尾会显示’一插入一/-insert-，并且在编辑模式下可以对文件进行输入操作（可以编辑）（在命令模式下按i就可以进入编辑模式）</li><li><strong>未行模式：</strong>未尾显示冒号，并且冒号后边可以输入内容（在命令模式下输入冒号就可以进入未行模式）</li></ul><h1 id="2-vim的配置"><a href="#2-vim的配置" class="headerlink" title="2.vim的配置"></a>2.vim的配置</h1><p>通过编辑  etc/vimrc 文件配置</p><h1 id="3-基本操作"><a href="#3-基本操作" class="headerlink" title="3.基本操作"></a>3.基本操作</h1><h2 id="1-保存和退出"><a href="#1-保存和退出" class="headerlink" title="1)保存和退出"></a>1)保存和退出</h2><p><strong>所有的保存和退出都是在末行模式下进行的</strong><br>W   ——&gt;只保存(相当于ctr+s)<br>q   ——&gt;直接退出(只有当前文件的内容全部保存才能直接退出,如果不保存强制退出,需要在q加!)<br>Wq   ——&gt;先保存再退出<br>注意:强制执行在指令后加!</p><h2 id="2-光标操作"><a href="#2-光标操作" class="headerlink" title="2)光标操作"></a>2)光标操作</h2><p><strong>所有光标操作对应的指令都是在命令模式下执行的</strong><br>^   ——&gt;直接将光标移动到行首<br>$   ——&gt;直接将光标移动到行尾<br>G   ——&gt;移动到文件未尾<br>gg   ——&gt;移动到文件开头<br>行号G    ——&gt;移动到指定行号的位到</p><h2 id="3-文本操作"><a href="#3-文本操作" class="headerlink" title="3)文本操作"></a>3)文本操作</h2><p>以下指令前面如果没有冒号表示在命令模式下执行，有冒号的在未行模式下执行</p><p>dd   ——&gt;删除当前光标所在的行<br>数字dd   ——&gt;数字如果是N，从光标所在的位置开始删N行<br>:%d     ——&gt;末行模式下输入%d，删除所有</p><p>u   ——&gt;撤销<br>ctr+   r   ——&gt;反撤销</p><p>yy   ——&gt;复制光标所在的行<br>数字yy   ——&gt;数字如果是N,从光标所在的位置开始复制N行<br>:%y   ——&gt;未行模式下输入%y,复制所有p-粘贴<br>p   ——&gt;粘贴<br>P   ——&gt;粘贴到上一行</p><h2 id="4-查找和替换"><a href="#4-查找和替换" class="headerlink" title="4)查找和替换"></a>4)查找和替换</h2><p><strong>: /正则表达式</strong>——&gt;查找当前文件中符合正则表达式的内容(结果可以用n和N来切换)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim中正则表达式的要求:</span><br><span class="line">1)python正则中所有的语法都有效</span><br><span class="line">2)单独使用有特殊功能的符号，在使用的时候需要加\才有效</span><br><span class="line">r'\d+'    -&gt;  /\d\+</span><br><span class="line">r'\d&#123;3&#125;'  -&gt;  /\d\&#123;3&#125;</span><br><span class="line">r'and|or' -&gt;  /and\|or</span><br></pre></td></tr></table></figure><p><strong>:1,$s/被替换的对象对应的正则/替换内容/参数</strong>——&gt;将文件中正则匹配到的内容替换成指定内容</p><blockquote><p>参数:<br>g——&gt;全局匹配(会替换所有符合要求的字符串,默认情况下一行只替换一个)<br>i——&gt;匹配的时候忽略大小写<br>c——&gt;替换的时候给出提示<br>e——&gt;忽略错误(忽略正则的错)</p></blockquote><h1 id="4高级操作"><a href="#4高级操作" class="headerlink" title="4高级操作"></a>4高级操作</h1><h2 id="1-比较文件"><a href="#1-比较文件" class="headerlink" title="1)比较文件"></a>1)比较文件</h2><p><strong>vim -d  文件路径1  文件路径2</strong></p><h2 id="2-同时打开多个文件"><a href="#2-同时打开多个文件" class="headerlink" title="2)同时打开多个文件"></a>2)同时打开多个文件</h2><p><strong>vim  文件路径  文件路径 …</strong></p><blockquote><p>1.切换窗口内容<br>在末行模式下输入:<strong>ls</strong>——&gt;可以查看当前打开的所有的文件和文件对象的标号在末行模式下输入:<strong>b标号</strong>——&gt;可以将当前窗口中的内容切换到指定标号对应的文件的内容</p><p>2.窗口的拆分<br>在未行模式下输入:<strong>sp/vs</strong>——&gt;可以将当前窗口垂直方向/水平方向进行拆分;拆分后可以在命令模式下按<strong>ctr+w</strong>来切换窗口</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell编程</title>
      <link href="/2019/12/23/shell%E7%BC%96%E7%A8%8B/"/>
      <url>/2019/12/23/shell%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>Shell脚本，是一种为shell编写的脚本程序。</p><a id="more"></a><h1 id="shell编程"><a href="#shell编程" class="headerlink" title="shell编程"></a>shell编程</h1><p>Shell脚本，是一种为shell编写的脚本程序。</p><p>Shell编程跟JavaScript、Python编程一样，只要有一个能编写代码的文本编辑器和一个能解释执行的脚本解释器就可以了。</p><p>Linux的Shell种类有很多，我们主要用的是Bourne Shell(/usr.bin/sh或/bin/sh)</p><h1 id="1-创建shell文件"><a href="#1-创建shell文件" class="headerlink" title="1.创建shell文件"></a>1.创建shell文件</h1><p>原则上shell程序可以写在任何文件中，但是一般会在shell文件后加后缀.sh表示当前文件是一个shell文件<br>shell需要可执行权限，所以创建好的shell文件需要添加x权限</p><h1 id="2-基础语法"><a href="#2-基础语法" class="headerlink" title="2.基础语法"></a>2.基础语法</h1><h2 id="1）注释"><a href="#1）注释" class="headerlink" title="1）注释"></a>1）注释</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 单行注释</span></span><br><span class="line">:&lt;&lt;EOF</span><br><span class="line">多行注释1</span><br><span class="line">多行注释2</span><br><span class="line">多行注释3</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h2 id="2）输出和输入"><a href="#2）输出和输入" class="headerlink" title="2）输出和输入"></a>2）输出和输入</h2><p>echo指令就相当于python中的print函数(默认会换行)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo  输出内容  </span><br><span class="line">echo -n 输出内容     # 输出的时候不换行</span><br></pre></td></tr></table></figure><p>printf指令（输出不能换行）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span> 输出内容</span><br></pre></td></tr></table></figure><p>输入指令:<br>read 变量名    – 输入内容，并且将输入的结果保存在变量中</p><h2 id="3）变量"><a href="#3）变量" class="headerlink" title="3）变量"></a>3）变量</h2><h3 id="a-声明变量的语法-变量名-值"><a href="#a-声明变量的语法-变量名-值" class="headerlink" title="a. 声明变量的语法:   变量名=值"></a>a. 声明变量的语法:   变量名=值</h3><p>说明:  a. 变量名和=, =和值之间不能有空格<br>​       b. 变量名的要求和python变量名要求一样</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name='小明'</span><br><span class="line">age=18</span><br><span class="line">stu_name=小红</span><br></pre></td></tr></table></figure><h3 id="b-使用变量"><a href="#b-使用变量" class="headerlink" title="b. 使用变量:"></a>b. 使用变量:</h3><p>​         $变量<br>​         ${变量}</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">age=18</span><br><span class="line">echo $age</span><br><span class="line">age2=$&#123;age&#125;</span><br></pre></td></tr></table></figure><h3 id="c-只读变量"><a href="#c-只读变量" class="headerlink" title="c. 只读变量"></a>c. 只读变量</h3><p>使用 readonly 命令可以将变量定义为只读变量，只读变量的值不能被改变。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gender='男'</span><br><span class="line">readonly gender</span><br><span class="line">gender='女'     # test.sh: line 17: gender: readonly variable</span><br></pre></td></tr></table></figure><h3 id="d-删除变量"><a href="#d-删除变量" class="headerlink" title="d. 删除变量"></a>d. 删除变量</h3><p>使用 unset 命令可以删除变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name='yuting'</span><br><span class="line">unset name</span><br></pre></td></tr></table></figure><h2 id="4）获取linux指令结果"><a href="#4）获取linux指令结果" class="headerlink" title="4）获取linux指令结果"></a>4）获取linux指令结果</h2><p>在shell脚本中可以直接写linux指令，在执行shell脚本的时候这些指令可以直接获取</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ls     # ls指令</span><br><span class="line">ls  -lh      # ls指令，并且设置参数</span><br><span class="line">touch a.txt    # 创建a.txt文件</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取指令结果: 变量=$(指令)  /   变量=`指令`</span></span><br><span class="line">lsresult=$(ls)    #将ls指令的结果保存到变量lsresult中</span><br><span class="line">currnet_path=`pwd`</span><br></pre></td></tr></table></figure><h1 id="3-shell字符串"><a href="#3-shell字符串" class="headerlink" title="3.shell字符串"></a>3.shell字符串</h1><p>shell中的字符串可以用单引号也可以使用双引号甚至可以不用引号。但是单引号中不能出现单引号字符，加\也不行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">str1='abc'</span><br><span class="line">str2="abc"</span><br><span class="line">str3=abc</span><br><span class="line">str4='abc\n123'#支持转义字符,但是不支持编码字符</span><br><span class="line">str5="abc\n123"</span><br><span class="line"></span><br><span class="line">age=18</span><br><span class="line">str6="年龄是$age"    #双引号里面可以出现变量,单引号不行</span><br></pre></td></tr></table></figure><h2 id="1）字符串拼接"><a href="#1）字符串拼接" class="headerlink" title="1）字符串拼接"></a>1）字符串拼接</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">str1="hello"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">单引号拼接</span></span><br><span class="line">str2=''$&#123;str1&#125;',world!'</span><br><span class="line">str3=''$str1',world!'</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">双引号拼接</span></span><br><span class="line">str4="$&#123;str1&#125;,world!"</span><br><span class="line">str5=""$str1",world!"</span><br></pre></td></tr></table></figure><h2 id="2）获取字符串长度"><a href="#2）获取字符串长度" class="headerlink" title="2）获取字符串长度"></a>2）获取字符串长度</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str1="abcd"</span><br><span class="line">echo $&#123;#str1&#125;    # 输出4</span><br></pre></td></tr></table></figure><h2 id="3）字符串提取"><a href="#3）字符串提取" class="headerlink" title="3）字符串提取"></a>3）字符串提取</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 字符串:下标:个数   --从字符串中指定下标开始获取指定个数字符,返回一个新的字符串</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 字符串:下标:1   -- 获取字符串中指定下标对应的字符</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 字符串:下标     -- 从指定下标开始获取到字符串最后</span></span><br><span class="line">string='hello world'</span><br><span class="line">echo $&#123;string:1:4&#125;    # ello</span><br></pre></td></tr></table></figure><h1 id="4-shell数组"><a href="#4-shell数组" class="headerlink" title="4.shell数组"></a>4.shell数组</h1><p>在 Shell 中，用括号来表示数组，数组元素用”空格”符号分割开。定义数组的一般形式为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 数组名=(元素1 元素2 元素3 ...)</span></span><br><span class="line">names=(小明 小红 大黄 Tom)</span><br><span class="line">names2=(</span><br><span class="line">'小明'</span><br><span class="line">'小红'</span><br><span class="line">'大黄'</span><br><span class="line">'Tom'</span><br><span class="line">)</span><br><span class="line">names3[0]=小明</span><br><span class="line">names3[1]=小红</span><br><span class="line">names3[2]=大黄</span><br><span class="line">names3[3]=Tom</span><br></pre></td></tr></table></figure><h2 id="1）获取数组元素：-数组-下标"><a href="#1）获取数组元素：-数组-下标" class="headerlink" title="1）获取数组元素：${数组[下标]}"></a>1）获取数组元素：${数组[下标]}</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $&#123;names[1]&#125;    # 小红</span><br></pre></td></tr></table></figure><h2 id="2）获取数组的长度"><a href="#2）获取数组的长度" class="headerlink" title="2）获取数组的长度"></a>2）获取数组的长度</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">nums=(100 200 300 400)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取数组长度</span></span><br><span class="line">length=$&#123;#nums[@]&#125;</span><br><span class="line">length=$&#123;#nums[*]&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取数组指定下标对应的元素的长度</span></span><br><span class="line">length2=$&#123;#num[n]&#125;</span><br></pre></td></tr></table></figure><h1 id="5-运算符"><a href="#5-运算符" class="headerlink" title="5.运算符"></a>5.运算符</h1><p>shell中支持的运算符有:  算术运算符、关系运算符、布尔运算符、字符串运算符</p><h2 id="1）算术运算符：-，-，-，-，"><a href="#1）算术运算符：-，-，-，-，" class="headerlink" title="1）算术运算符：+，-，*，/，%"></a>1）算术运算符：+，-，*，/，%</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 如果想要在shell完成数值运算，运算的语法:  `expr 运算表达式`; 并且运算符两边必须加空格</span></span><br><span class="line">re1=10+20</span><br><span class="line">echo $&#123;re1&#125;    # 10+20</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1.加法运算</span></span><br><span class="line">re2=`expr 10 + 20`    </span><br><span class="line">echo $&#123;re2&#125;    # 30</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.减法运算</span></span><br><span class="line">re3=`expr 10 - 20`</span><br><span class="line">echo $&#123;re3&#125;   # -10</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3.乘法运算</span></span><br><span class="line">re4=`expr 10 \* 20`   # 注意:使用*作为乘法运算符的时候需要前面加\</span><br><span class="line">echo $&#123;re4&#125; # 200</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4.除法运算</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 小数除法运算: `<span class="built_in">echo</span> <span class="string">"scale=小数点位数;数值1 / 数值2"</span>|bc`</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 整数除法运算: `expr 数值1 / 数值2`</span></span><br><span class="line">re5=`echo "scale=2;7 / 3"|bc`</span><br><span class="line">echo $re5</span><br><span class="line"></span><br><span class="line">re6=`expr 5 / 2`</span><br><span class="line">echo $re6</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 5.求余数</span></span><br><span class="line">re7=`expr 10 % 3`</span><br><span class="line"></span><br><span class="line">re8=`echo "10.2 + 5.1"|bc`</span><br><span class="line">echo $re8</span><br></pre></td></tr></table></figure><h2 id="2）-关系运算符-比较运算符-，比较的是数字大小"><a href="#2）-关系运算符-比较运算符-，比较的是数字大小" class="headerlink" title="2） 关系运算符(比较运算符)，比较的是数字大小"></a>2） 关系运算符(比较运算符)，比较的是数字大小</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> -eq  ---  等于,相当于 ==</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -ne  ---  不等于,相当于!=</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -gt  ---  大于</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -lt  ---  小于</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -ge  ---  大于等于</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -le  ---  小于等于</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用语法: [ 值1 关系运算符 值2 ]</span></span><br><span class="line">a=100</span><br><span class="line">b=10</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 关系运算符要配合<span class="keyword">if</span>语句或者循环语句使用</span></span><br><span class="line">if [ $a -gt $b ]</span><br><span class="line">then</span><br><span class="line">echo a大于b</span><br><span class="line">else </span><br><span class="line">echo a不大于b</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h2 id="3）布尔运算符-逻辑运算符"><a href="#3）布尔运算符-逻辑运算符" class="headerlink" title="3）布尔运算符(逻辑运算符)"></a>3）布尔运算符(逻辑运算符)</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> !    --  逻辑非运算</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -o   --  逻辑或运算</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -a   --  逻辑与运算</span></span><br><span class="line"></span><br><span class="line">age=18</span><br><span class="line">score=95</span><br><span class="line"><span class="meta">#</span><span class="bash"> 参加比赛的条件：分数大于90分并且年龄大于等于18岁</span></span><br><span class="line">if [ $age -ge 18 -a $score -gt 90 ]</span><br><span class="line">then</span><br><span class="line">echo 可以参见比赛</span><br><span class="line">else</span><br><span class="line">echo 不能参加比赛</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h2 id="4）字符串运算符"><a href="#4）字符串运算符" class="headerlink" title="4）字符串运算符"></a>4）字符串运算符</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> [ 字符串1 = 字符串2 ]    -- 判断两个字符串是否相等</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> [ 字符串1 != 字符串2 ]   -- 不相等</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> [ -z 字符串]   -- 判断字符串长度是否为0</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> [ -n <span class="string">"字符串"</span> ]    -- 判断字符串长度是否不为0</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> [ $ 字符串 ]   -- 判断字符串是否是空串</span></span><br><span class="line"></span><br><span class="line">a="abc"</span><br><span class="line">b="123"</span><br><span class="line"></span><br><span class="line">if [ $a = $b ]</span><br><span class="line">then</span><br><span class="line">    echo a和b相等</span><br><span class="line">else</span><br><span class="line">    echo a和b不相等</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">a=""</span><br><span class="line">if [ -n "$&#123;a&#125;" ]</span><br><span class="line">then</span><br><span class="line">    echo a的长度不为0</span><br><span class="line">else</span><br><span class="line">    echo a的长度为0</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h1 id="6-if语句"><a href="#6-if语句" class="headerlink" title="6. if语句"></a>6. if语句</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">语法1：</span><br><span class="line">if 条件语句</span><br><span class="line">then</span><br><span class="line">    满足条件执行的代码</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">语法2:</span><br><span class="line">if 条件语句</span><br><span class="line">then</span><br><span class="line">    满足条件执行的代码</span><br><span class="line">else</span><br><span class="line">    不满足条件执行的代码</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">语法3：</span><br><span class="line">if 条件语句1</span><br><span class="line">then </span><br><span class="line">    代码块1</span><br><span class="line">elif 条件语句2</span><br><span class="line">then</span><br><span class="line">    代码块2</span><br><span class="line">elif 条件语句3</span><br><span class="line">then </span><br><span class="line">    代码块3</span><br><span class="line">else</span><br><span class="line">    代码块N</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h1 id="7-for循环"><a href="#7-for循环" class="headerlink" title="7. for循环"></a>7. for循环</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">语法:</span><br><span class="line">for 变量 in 序列</span><br><span class="line">do</span><br><span class="line">    循环体</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 遍历字符串</span></span><br><span class="line">for char in "hello word"</span><br><span class="line">do</span><br><span class="line">    echo 循环体char: $&#123;char&#125;</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 遍历数组</span></span><br><span class="line">arr1=(10 20 "abc")</span><br><span class="line">for x in $&#123;arr1[@]&#125;</span><br><span class="line">do</span><br><span class="line">    echo 循环体2x: $&#123;x&#125;</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 遍历多个值</span></span><br><span class="line">for x in 10 20 "你好" 123</span><br><span class="line">do</span><br><span class="line">    echo 循环体3：$&#123;x&#125;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h1 id="8-while循环"><a href="#8-while循环" class="headerlink" title="8. while循环"></a>8. while循环</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">语法:</span><br><span class="line">while 条件语句</span><br><span class="line">do</span><br><span class="line">    循环体</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 遍历字符串</span></span><br><span class="line">str1="helloWorld!"</span><br><span class="line">index=0</span><br><span class="line">len=$&#123;#str1&#125;</span><br><span class="line">while [ $index -lt $len ]</span><br><span class="line">do</span><br><span class="line">    echo $&#123;str1:$&#123;index&#125;:1&#125;</span><br><span class="line">    index=`expr $&#123;index&#125; + 1`</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 计算1+2+3+...+100</span></span><br><span class="line">num=1</span><br><span class="line">sum=0</span><br><span class="line">while [ $&#123;num&#125; -le 100 ]</span><br><span class="line">do</span><br><span class="line">    sum=`expr $&#123;sum&#125; + $&#123;num&#125;`</span><br><span class="line">    num=`expr $&#123;num&#125; + 1`</span><br><span class="line">done</span><br><span class="line">echo 1+2+3+...+100 = $&#123;sum&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 死循环</span></span><br><span class="line">while true</span><br><span class="line">do</span><br><span class="line">    read -p "请输入一个数字:" num</span><br><span class="line">    if [ $&#123;num&#125; == 100 ]</span><br><span class="line">    then</span><br><span class="line">        break</span><br><span class="line">    fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h1 id="9-函数"><a href="#9-函数" class="headerlink" title="9.函数"></a>9.函数</h1><h2 id="1）函数的声明和调用"><a href="#1）函数的声明和调用" class="headerlink" title="1）函数的声明和调用"></a>1）函数的声明和调用</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.函数的声明</span></span><br><span class="line">声明的语法：</span><br><span class="line">函数名()&#123;</span><br><span class="line">    函数体</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">调用函数语法:  函数名</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">声明函数</span></span><br><span class="line">func1()&#123;</span><br><span class="line">    echo 你好函数1</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">调用函数</span></span><br><span class="line">func1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.有参数的函数</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 声明的时候不需要形参, 直接在函数体中通过<span class="string">'$&#123;N&#125;'</span>来获取第N个实参</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 调用的时候:  函数名 实参1 实参2 实参3 ...</span></span><br><span class="line">func2()&#123;</span><br><span class="line">    echo 函数2被调用</span><br><span class="line">    echo 第一个参数: $&#123;1&#125;</span><br><span class="line">    echo 第二个参数: $&#123;2&#125;</span><br><span class="line">    echo 第三个参数: $&#123;3&#125; </span><br><span class="line">&#125;</span><br><span class="line">func2 10 20 "abc"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3.函数的返回值</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">return</span> 数字   - 数字的范围是0~255</span></span><br><span class="line">func3()&#123;</span><br><span class="line">    echo 函数3被调用</span><br><span class="line">    return 256</span><br><span class="line">    #a=`expr 100 + 200`</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func3</span><br><span class="line">echo $&#123;?&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> 脚本 </tag>
            
            <tag> 基础 </tag>
            
            <tag> 编程语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常用指令</title>
      <link href="/2019/12/22/git%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
      <url>/2019/12/22/git%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>git的基本常用指令集</p><a id="more"></a><h1 id="1-基本指令"><a href="#1-基本指令" class="headerlink" title="1.基本指令"></a>1.基本指令</h1><p>git init        ——&gt;新建git仓库<br>git add 文件/文件夹       ——&gt;  将文件添加到缓存区中<br>git add -A   ——&gt;  添加所有内容到缓存区中</p><p>git status      ——&gt;    查看git状态<br>git commit -m  ‘提交信息’       ——&gt;  将缓存区中的内容全部提交到git本地仓库中<br>git log        ——&gt; 查看提交日志 </p><p>git reset  – hard   HEAD       ——&gt;   让工作目录中的内容和仓库中的内容保持一致<br>git reset  –hard HEAD^  ——&gt;  回到上一个版本<br>git  reset  – hard 版本号  ——&gt;  回到指定的版本 </p><p>git checkout  文件名   ——&gt;  从暂存区中恢复工作目录中的内容(让工作区中的指定文件，回到上次提交的时候的状态) </p><p>git clone <url>    ——&gt;  将服务器上的项目(仓库)克隆 (使用https地址需要输入密码，使用ssh地址需要添加公钥) </p><p>git remote add origin 地址    ——&gt;  关联远程仓库(只需要关联一次)</p><p>git push [-u] origin master   ——&gt;  提交(-u在第一次提交分支的时候才用) </p><p>git push   ——&gt;  将本地仓库的内容提交到远程仓库master分支上</p><p>git push origin 分支名     ——&gt;  将本地仓库的内容提交到远程仓库对应的分支上, 如果分支不存在会自动创建</p><p>git pull   ——&gt;  将远程仓库中的内容更新到本地仓库和工作区中</p><h1 id="2-分之管理"><a href="#2-分之管理" class="headerlink" title="2.分之管理"></a>2.分之管理</h1><p>创建仓库会默认给我们创建一个master分之,这个分之一般作为提交和发布分之;开发一般会自己创建一个develop分之，用来开发和测试;多人协作的时候还可能根据不同的人或者(不同的功能)创建不同的分之，用来独立开发 </p><p>常见分之： master(主要是合并develop), develop(主要合并下面的其他分支), 功能/人员分之(开发)  </p><p>git branch [-a]   ——&gt;查看分之<br>git branch 分之名——&gt;创建分之<br>git checkout   分支名——&gt;  切换分之<br>git checkout -b 分之名    ——&gt;切换并创建新的分之<br>git diff  分之1  分之2——&gt;查看两个分之之间的差异<br>git merge 分之名——&gt;让当前分之和指定分之进行合并</p><p>注意: 切换分之、push、pull，这些操作前要保证工作区是clean<br>怎么避免冲突：  不要发生多个分之对同一个文件在同一个版本下进行修改(和同伴确认和商量)</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> 指令 </tag>
            
            <tag> 技术文档 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用指令</title>
      <link href="/2019/12/22/Linux%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
      <url>/2019/12/22/Linux%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>Linux常用指令集</p><a id="more"></a><h1 id="1-cd指令-进入文件夹"><a href="#1-cd指令-进入文件夹" class="headerlink" title="1. cd指令  -  进入文件夹"></a>1. cd指令  -  进入文件夹</h1><p><strong>cd</strong>   ——&gt;文件夹路径（路径可以是绝对地址也可以是相对地址）-进入到指定路径对应的文件夹<br><strong>cd  ..</strong>  ——&gt;返回上层目录<br><strong>cd  /</strong>   ——&gt;进入系统根目录<br><strong>cd  ~</strong>  ——&gt;进入电脑根目录</p><h1 id="2-ls指令-显示当前目录中的内容"><a href="#2-ls指令-显示当前目录中的内容" class="headerlink" title="2. ls指令  -  显示当前目录中的内容"></a>2. ls指令  -  显示当前目录中的内容</h1><p><strong>ls</strong>   ——&gt;直接显示当前文件夹中的内容的名字（隐藏文件和文件夹`        看不到）<br><strong>ls  -l</strong>   ——&gt;直接显示当前文件夹中的内容的名字（隐藏文件和文件夹看不到）<br><strong>ls  -lh</strong>   ——&gt;显示当前文件夹中的内容和内容的基本信息（隐藏文件和文件夹看不到）<br><strong>ls  -a</strong>   ——&gt;显示当前文件夹中所有的内容（包括隐藏文件）<br><strong>ls  -R</strong>   ——&gt;递归显示当前目录以及当前目录下所有的子目录中的内容<br><strong>ls  -r</strong>   ——&gt;内容倒序显示<br><strong>ls  -S/-t</strong>  ——&gt;显示文件夹中的内容，并且内容按大小/时间从大到小排序<br><strong>ls  -Sr</strong>   ——&gt;按文件大小从小到大排序<br><strong>ls  -Srlh</strong>   ——&gt;按文件大小从小到大排序，并且显示内容的基本信息</p><h1 id="3-pwd指令"><a href="#3-pwd指令" class="headerlink" title="3. pwd指令"></a>3. pwd指令</h1><p><strong>pwd</strong>   ——&gt;查看当前目录的绝对路径</p><h1 id="4-文件操作"><a href="#4-文件操作" class="headerlink" title="4.文件操作"></a>4.文件操作</h1><h2 id="1-touch指令-新建文件"><a href="#1-touch指令-新建文件" class="headerlink" title="1)touch指令  新建文件"></a>1)touch指令  新建文件</h2><p><strong>touch 文件路径文件名</strong>——&gt;在指定位置创建指定文件</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">touch <span class="keyword">a</span>.txt-在当前目录下新建一个文件<span class="keyword">a</span>.txt</span><br><span class="line">touch ../<span class="keyword">a</span>.txt   <span class="comment">------&gt;在当前目录的上层目录新建一个文件a.txt</span></span><br><span class="line">touch /home/<span class="keyword">a</span>/<span class="keyword">a</span>.txt   <span class="comment">------&gt;在根目录下home目录中的a目录里面创建一个文件a.txtl</span></span><br></pre></td></tr></table></figure><h2 id="2-cat指令-查看文件内容-读文件"><a href="#2-cat指令-查看文件内容-读文件" class="headerlink" title="2)cat指令  查看文件内容(读文件)"></a>2)cat指令  查看文件内容(读文件)</h2><p><strong>cat 文件路径文件名</strong>   ——&gt;读取指定路径对应的文件的内容</p><h2 id="3-vim指令"><a href="#3-vim指令" class="headerlink" title="3)vim指令"></a>3)vim指令</h2><p><strong>vim 文件路径文件名</strong>   ——&gt;使用vim打开文件</p><h1 id="5-文件操作"><a href="#5-文件操作" class="headerlink" title="5.文件操作"></a>5.文件操作</h1><p><strong>mkdir  新文件夹路径文件夹名</strong>   ——&gt;在指定位置创建文件夹,若没有会报错<br><strong>mkdir  -p  新文件夹路径文件夹名</strong>   ——&gt;在指定路径创建指定文件夹,若没有就创建<br><strong>mkdir -p  a/{b,c,…}/{d,e,f,g,…}</strong>   ——&gt;在当前位置创建a,在a内创建多个文件夹,在多个文件夹内再创建多个相同的文件夹</p><h1 id="6-删除文件和文件夹"><a href="#6-删除文件和文件夹" class="headerlink" title="6.删除文件和文件夹"></a>6.删除文件和文件夹</h1><h2 id="1-rm指令-删除文件和文件夹"><a href="#1-rm指令-删除文件和文件夹" class="headerlink" title="1)rm指令  删除文件和文件夹"></a>1)rm指令  删除文件和文件夹</h2><p><strong>rm 文件路径文件名</strong>   ——&gt;删除指定文件（删除的时候会循环是否确定删除，y-同意，n-不同意）<br><strong>rm  -f  文件路径文件名</strong>   ——&gt;删除指定文件（删除的时候不询问）<br><strong>rm  -r  文件夹路径文件夹名</strong>   ——&gt;删除指定文件夹</p><h2 id="2-rmdir指令-删除空文件夹"><a href="#2-rmdir指令-删除空文件夹" class="headerlink" title="2)rmdir指令  删除空文件夹"></a>2)rmdir指令  删除空文件夹</h2><p><strong>rmdir 文件夹路径</strong>——&gt;删除空文件夹</p><h1 id="7拷贝和移动"><a href="#7拷贝和移动" class="headerlink" title="7拷贝和移动"></a>7拷贝和移动</h1><h2 id="1-拷贝"><a href="#1-拷贝" class="headerlink" title="1)拷贝"></a>1)拷贝</h2><p><strong>cp 文件路径1 文件路径2</strong>——&gt;将文件1中的内容复制粘贴到文件2（如果文件2不存，会自动创建；如果存在会询问是否覆盖）<br><strong>cp 文件路径 文件夹路径</strong>——&gt;将指定文件复制粘贴到指定文件夹中<br><strong>cp -r 文件夹路径1 文件夹路径2</strong>——&gt;将文件夹1复制粘贴到文件夹2中</p><h2 id="2-移动"><a href="#2-移动" class="headerlink" title="2)移动"></a>2)移动</h2><p><strong>mv 文件路径1 文件路径2</strong>   ——&gt;将文件1移动到文件2所在的位置<br><strong>mv 文件名1 文件名2 **  ——&gt;将文件1重命名为文件2(若两个文件同时存在同一文件夹中,则重命名后文件2会被删除,文件1会被重命名)<br>**mv 文件路径 文件夹路径</strong>   ——&gt;将文件直接移动到指定文件夹中<br>*<em>mv 文件夹路径1 文件夹路径2 *</em>  ——&gt;将文件夹1移动到文件夹2中</p><h1 id="8获取指令的历史记录"><a href="#8获取指令的历史记录" class="headerlink" title="8获取指令的历史记录"></a>8获取指令的历史记录</h1><p><strong>history</strong>   ——&gt;显示当前系统已经执行过的所有指令</p><blockquote><p>如果想要显示历史记录的时候显示指令执行的时间需要修改~/.bashrc文件：<br>export HISTTIMEFORMAT=”[%y-%m-%d_%T%M%S]”<br>修改完成后需要通过指令：source ~/.bashrc去执行这个配置文件，最后历史记录的时间才会生效</p></blockquote><h1 id="9创建链接"><a href="#9创建链接" class="headerlink" title="9创建链接"></a>9创建链接</h1><h2 id="1-创建软链接"><a href="#1-创建软链接" class="headerlink" title="1)创建软链接"></a>1)创建软链接</h2><p><strong>ln -s 源文件路径  入口文件位置</strong>    ——&gt; 给源文件在指定位置创建一个软链接(软连接本质就是用来保存源文件绝对地址的一个文件)</p><blockquote><p>注:源文件路径必须是绝对路径,如果删除或者移动源文件，软连接会直接无效</p></blockquote><h2 id="2-创建硬链接"><a href="#2-创建硬链接" class="headerlink" title="2)创建硬链接"></a>2)创建硬链接</h2><p><strong>ln 源文件路径  硬连接文件地址</strong>   —–&gt;给源文件在指定位置创建一个硬链接硬链接的本质就是源文件内容的另外一个引用(相当于文件的另一个文件名)，所以删除或者移动源文件硬链接仍然有效，只是删除硬链接会变成普通文件</p><h1 id="10进程相关指令"><a href="#10进程相关指令" class="headerlink" title="10进程相关指令"></a>10进程相关指令</h1><h2 id="1-ps指令"><a href="#1-ps指令" class="headerlink" title="1)ps指令"></a>1)ps指令</h2><p><strong>ps</strong>   ——&gt;查看当前进程状态<br><strong>ps -aux</strong>   ——&gt;查看当前进程所有状态<br><strong>ps grep  进程名/id</strong>   ——&gt;根据进程名/进程ID查看指定进程</p><h2 id="2-top指令"><a href="#2-top指令" class="headerlink" title="2)top指令"></a>2)top指令</h2><p><strong>top</strong>  ——&gt;实时查看当前所有的进程信息和系统信息<br><strong>top -p PID1,PID2,…</strong>   ——&gt;实时监测指定的进程</p><h2 id="3-free指令"><a href="#3-free指令" class="headerlink" title="3)free指令"></a>3)free指令</h2><p><strong>free</strong>   ——&gt;显示当前系统的内存信息，显示的时候以kb为单位<br><strong>free  -单位</strong>   ——&gt;显示当前系统的内存信息，以指定单位来显示</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">free</span> -m    - 显示当前系统的内存信息，以Mb为单位</span><br></pre></td></tr></table></figure><h2 id="4-kill指令"><a href="#4-kill指令" class="headerlink" title="4)kill指令"></a>4)kill指令</h2><p><strong>kill 进程ID</strong>   ——&gt;杀掉指定ID对应的进程<br>kill -1/-9/-15进程ID   ——&gt;以指定的方式杀掉进程(-1表示不间断重启；-9表示强制杀死进程；-15表示正常结束进程)<br><strong>pkill  进程名</strong>   ——&gt;杀死指定进程名对应的进程（中间可以加-1/-9/-15）<br><strong>killall  进程名</strong>   ——&gt;杀死和进程名相关的所有进程</p><h2 id="5-uptime指令"><a href="#5-uptime指令" class="headerlink" title="5)uptime指令"></a>5)uptime指令</h2><p><strong>uptime</strong>   ——&gt;查看系统的基本信息(启动时间等)</p><h1 id="11用户管理"><a href="#11用户管理" class="headerlink" title="11用户管理"></a>11用户管理</h1><p>一个Linux操作系统可以有多个用户（user），也可以有多个用户组（group）；<br><strong>users</strong>   ——&gt;查看当前用户<br><strong>groups</strong>   ——&gt;查看当前分组<br><strong>groupadd  分组名</strong>   ——&gt;创建分组(管理员才能创建;可以通过查看/etc/group文件来查看当前系统所有的分组)<br><strong>useradd  用户名</strong>    ——&gt;创建指定用户(1.用户创建成功后系统会自动在/home目录下创建一个和用户名同名的文件夹;2.会自动创建和用户名同名的分组,并且将当前用户添加到这个分组中)<br><strong>useradd  -G  分组1,分组2…   用户名</strong>  ——&gt;创建指定用户,并且将用户添加到指定分组<br><strong>usermod  -G  分组1,分组2   用户名</strong>——&gt;修改用户分组<br><strong>password  用户名</strong>   ——&gt;修改用户密码(需要root权限)<br><strong>su  用户名</strong>   ——&gt;切换账号(root登录的时候切换不需要密码)<br><strong>exit</strong>   ——&gt;退出当前账号</p><p>sudo  -在命令前sudo是以管理员身份执行指令<br>注意：不是所有的用户都可以通过sudo来以管理员身份执行指令，如果想要能够使用sudo必须添加配置<br>  ①.  ubuntu：将需要有管理员身份的账号添加到sudo分组中<br>  ②.  redhat和contos：在/etc/sudoers配置文件中添加代码：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Allow root to run any commands anywhere</span></span><br><span class="line"><span class="attribute">root</span> <span class="literal">ALL</span>=（<span class="literal">ALL</span>）<span class="literal">ALL</span>#（默认有的）</span><br><span class="line"><span class="attribute">xiaoming</span> <span class="literal">ALL</span>=（<span class="literal">ALL</span>）<span class="literal">ALL</span>#（自己添加的，xiaoming是用户名）</span><br></pre></td></tr></table></figure><h1 id="12文件权限"><a href="#12文件权限" class="headerlink" title="12文件权限"></a>12文件权限</h1><p>默认情况下文件和文件夹的权限:文件所有者有读写权限,同组用户和其他用户都是只读权限.</p><table><thead><tr><th>文件类型</th><th>所有者权限</th><th>同组用户权限</th><th>其他用户权限</th></tr></thead><tbody><tr><td>d（目录）</td><td>rwx</td><td>r–</td><td>—</td></tr><tr><td>-（文件）</td><td>rwx</td><td>r–</td><td>—</td></tr><tr><td>l（连接）</td><td>rwx</td><td>r–</td><td>—</td></tr></tbody></table><p><strong>chmod  权限值  文件路径</strong>   ——&gt;将指定文件的权限修改成指定值<br><strong>chmod  [a,u,g,o]/[+-]/[r,w,x] 文件地址</strong>   ——&gt;给指定文件对应指定用户添加或者删除指定权限(a-所有用户,u-文件所有者,g-同组用户,o-其他用户;+表示添加权限,表示删除权限;r-表示读权限,w表示写权限,x表示执行权限)</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">chmod</span> a-<span class="keyword">x</span> 文件地址  <span class="comment">#删除所有用户的执行权限</span></span><br><span class="line"><span class="keyword">chmod</span> u+w 文件地址  <span class="comment">#给文件所有者添加写的权限</span></span><br></pre></td></tr></table></figure><h1 id="13日志管理"><a href="#13日志管理" class="headerlink" title="13日志管理"></a>13日志管理</h1><h2 id="1-查看文件"><a href="#1-查看文件" class="headerlink" title="1)查看文件"></a>1)查看文件</h2><p><strong>cat 文件</strong>   ——&gt;直接查看文件所有内容(查看文件内容的时候可以加参数-n，让内容在显示的时候显示行号)</p><p><strong>head  -N 文件地址文件名</strong>   ——&gt;显示指定文件前N行内容<br><strong>tail -N 文件地址文件名</strong>   ——&gt;显示指定文件后N行内容</p><p><strong>less  文件</strong>   ——&gt;按页显示文件内容(通过快捷键控制内容显示过程;文件内容不会打印到shel/终端里)<br><strong>less -N 文件</strong>   ——&gt;按页显示文件内容,每次翻页的时候翻N行<br><strong>more 文件</strong>   ——&gt;按页显示文件内容(通过快捷键控制内容显示过程;文件内容会打印到shell/终端里)<br><strong>more -N 文件</strong>   ——&gt;按页显示文件内容,每次翻页的时候翻N行</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">快捷键:</span><br><span class="line">按<span class="keyword">j向下一行</span></span><br><span class="line"><span class="keyword">按k向上一行</span></span><br><span class="line"><span class="keyword">按f向下翻一页</span></span><br><span class="line"><span class="keyword">按b向上翻一页</span></span><br><span class="line"><span class="keyword">按g到全文开头</span></span><br><span class="line"><span class="keyword">按G到全文结尾</span></span><br><span class="line"><span class="keyword">按Q退出</span></span><br></pre></td></tr></table></figure><h2 id="2-文件处理"><a href="#2-文件处理" class="headerlink" title="2)文件处理"></a>2)文件处理</h2><p>凡是有的打印结果的指令,我们都可以通过相关指令对应结果进行处理<br>如果需要对某一个指令的结果使用另外的指令进行二次处理的时候，就需要用到<strong>管道 |</strong></p><p><strong>sort-排序</strong><br>sort   ——&gt;从小到大排序(将一行内容作为一个字符串,按字符串大小对应内容进行排序,默认不区分大小写)</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cat <span class="keyword">a</span>.txt | <span class="built_in">sort</span>   <span class="comment">------&gt;对a.txt的文件内容从小到大排序显示</span></span><br><span class="line"></span><br><span class="line">参数:</span><br><span class="line">-r  <span class="comment">------&gt; 逆序</span></span><br><span class="line">-nk <span class="number">1</span>  <span class="comment">------&gt;数值大小排序</span></span><br><span class="line">-nk <span class="number">2</span>  <span class="comment">------&gt;字符大小排序(默认)</span></span><br><span class="line">cat <span class="keyword">a</span>.txt|<span class="built_in">sort</span> -nk <span class="number">1</span>  <span class="comment">------&gt;对a.txt的文件内容按数字大小从小到大排序</span></span><br><span class="line">cat <span class="keyword">a</span>.txt|<span class="built_in">sort</span> -rnk <span class="number">1</span>  <span class="comment">------&gt;对a.txt的文件内容按数字大小从大到小排序</span></span><br><span class="line">cat <span class="keyword">a</span>.txt|<span class="built_in">sort</span> -nk <span class="number">2</span>  <span class="comment">------&gt;对a.txt的文件内容按字符大小从小到大排序(默)</span></span><br><span class="line">cat <span class="keyword">a</span>.txt|<span class="built_in">sort</span> -rnk <span class="number">2</span>  <span class="comment">------&gt;对a.txt的文件内容按字符大小从大到小排序</span></span><br></pre></td></tr></table></figure><p><strong>uniq-去重</strong><br>uniq   ——&gt;只能将紧挨着的相同行去掉重复的(如果需要去掉所有重复的行,先排序将相同的行放到一起)</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat <span class="keyword">a</span>.txt | unkq   <span class="comment">------&gt;去掉a.txt文件内容中相邻重复的行</span></span><br><span class="line">cat <span class="keyword">a</span>.txt | sortluniq   <span class="comment">------&gt;去掉a.txt文件内容中所有重复的行</span></span><br><span class="line">-c   <span class="comment">------&gt;重复欠数</span></span><br></pre></td></tr></table></figure><p><strong>awk-获取列</strong><br>awk ‘{print $N}’   ——&gt;获取内容中第N列的数据</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">historylawk '&#123;print $<span class="number">2</span>&#125;'------&gt;获取历史记录第<span class="number">2</span>列的内容</span><br><span class="line">historylawk'&#123;print $<span class="number">2</span>,$<span class="number">3</span>&#125;'------&gt;获取历史记录第<span class="number">2</span>列和第<span class="number">3</span>列的内容</span><br></pre></td></tr></table></figure><blockquote><p>练习:<br>history | awk ‘{print $4}’|sort|uniq -c|sort -rnk 1|head -5<br>显示最常用的指令和使用次数</p></blockquote><h2 id="3-输出重定向"><a href="#3-输出重定向" class="headerlink" title="3)输出重定向"></a>3)输出重定向</h2><p><strong>执行有打印结果的指令  &gt;  文件地址</strong>   ——&gt;将指定指令执行的结果保存到指定文件中(先清除原文件内容再添加)<br><strong>执行有打印结果的指令  &gt;&gt;  文件地址</strong>   ——&gt;将指定指令执行的结果保存到指定文件中(直接将结果追加到原文件中)</p><blockquote><p>history &gt; a.txt   ——&gt;将当前历史记录直接保存到a.txt文件中</p><p>将最常用的3个指令及其使用次数保存到a.txt文件中<br>history l awk’{print $4}’lsort luniq-c I sort-rnk 1 I head-n3&gt;a.txt</p></blockquote><h2 id="4-统计"><a href="#4-统计" class="headerlink" title="4)统计"></a>4)统计</h2><p>wc   -c/-w/-l  文件地址   ——&gt;统计指定文件中字符/单词/行的数量</p><h2 id="5-查找"><a href="#5-查找" class="headerlink" title="5)查找"></a>5)查找</h2><ul><li><strong>查找文件内容  grep</strong></li></ul><p>①:  <strong>grep  内容  文件地址文件名</strong>   ——&gt;在指定文件中查找指定内容(返回文件中所有包含指定内容的行)</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">grep you <span class="keyword">a</span>.txt  <span class="comment">------&gt;获取a.txt中包含you的所有的行</span></span><br><span class="line"></span><br><span class="line">grep的参数:</span><br><span class="line">-n  <span class="comment">------&gt;显示结果的时候显示行号</span></span><br><span class="line">-i  <span class="comment">------&gt;查找内容的时候忽略大小写</span></span><br><span class="line">-E  <span class="comment">------&gt;按正则表达式进行匹配</span></span><br><span class="line"> 使用方法: grep -E <span class="string">'正则表达式'</span> 文件</span><br><span class="line">注意:Linux操作系统中正则表达式不支持:\d,\D,\w,\w,\s,\S,\b,\B;其他语法都支持</span><br><span class="line">-v  <span class="comment">------&gt;忽略字段</span></span><br><span class="line">         grep you <span class="keyword">a</span>.txt-v<span class="comment">------&gt;获取a.txt中不包含you的所有的行</span></span><br></pre></td></tr></table></figure><p>②:  <strong>执行有打印结果的指令  |</strong><br>  *<em>grep 内容 *</em>  ——&gt;在指令执行结果中查找指定内容</p><p>③:  <strong>grep  -r  内容  文件夹地址</strong>   ——&gt;在指定文件夹中所有的文件内容中查找指定内容</p><ul><li><strong>查找文件名   find</strong></li></ul><p>①:  <strong>find  文件夹路径  -name  文件名</strong>   ——&gt;在指定文件夹下按文件名找指定文件</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">找指定文件名</span><br><span class="line"><span class="builtin-name">find</span> dirl -name <span class="string">'test1.py'</span>  #在文件夹dir1找名字是test1.py的文件</span><br><span class="line"><span class="builtin-name">find</span> dirl -name <span class="string">'*.txt'</span>  #在文件夹dir1找后缀是txt的所有文件</span><br><span class="line"><span class="builtin-name">find</span> dirl -name <span class="string">' test*. txt'</span></span><br><span class="line"><span class="builtin-name">find</span> dirl -name <span class="string">' test*'</span></span><br><span class="line"><span class="builtin-name">find</span> dirl -name <span class="string">'*c. txt'</span></span><br></pre></td></tr></table></figure><p>②:  <strong>find  文件夹路径  -size  +/-文件大小</strong>   ——&gt;在指定文件夹下找文件大小满足条件的所有的文件</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">find</span> dirl -<span class="built_in">size</span> +<span class="number">4</span>k------&gt;查找在文件夹dir1中所有大于<span class="number">4</span>k的文件</span><br><span class="line"><span class="built_in">find</span> dirl -<span class="built_in">size</span> -<span class="number">4</span>k------&gt;查找在文件夹dir1中所有小于<span class="number">4</span>k的文件</span><br><span class="line"><span class="built_in">find</span> dirl -<span class="built_in">size</span> +<span class="number">5</span>k -<span class="built_in">size</span> -<span class="number">10</span>k ------&gt;查找在文件夹dir1中所有大于<span class="number">5</span>k并且小于<span class="number">10</span>k的文件(文件大小如果是小数,算</span><br><span class="line">的时候向上取整)</span><br><span class="line"><span class="built_in">find</span> dirl -<span class="built_in">size</span> +<span class="number">4</span>k -<span class="built_in">name</span> <span class="string">'*.txt'</span>------&gt;查找在文件夹dir1中所有大于<span class="number">4</span>k的txt文件</span><br></pre></td></tr></table></figure><ul><li><strong>查指令</strong></li></ul><p><strong>which 指令名</strong>    ——&gt;精确查找当前指令对应的文件的路径<br><strong>whereis  指令名</strong>   ——&gt;查找和指定指令相关的所有的文件的路径<br><strong>man  指令名</strong>   ——&gt;获取指定指定的使用手册<br><strong>指令名  –help</strong>   ——&gt;获取指定指令的帮助文档</p><h1 id="14网络管理"><a href="#14网络管理" class="headerlink" title="14网络管理"></a>14网络管理</h1><p><strong>ifconfig</strong>   ——&gt;查看网卡状态<br><strong>netstat  -natp</strong>   ——&gt;查看网络连接状态<br><strong>netstat  -natp | grep</strong>  端口号   ——&gt;查看指定端口的网络连接状态</p><p><strong>ping ip地址</strong>   ——&gt;给指定地址的服务器发送数据(主要用来检测当前网络通不通)<br><strong>ping  -i  时间(秒)  IP地址</strong>   ——&gt;每隔指定时间ping一次（时间可以是小数）<br><strong>ping  -c  次数  IP地址</strong>   ——&gt;ping指定次数(不限制次数的时候会不断的ping)</p><p><strong>wget 地址</strong>——&gt;下载</p><h1 id="15压缩和归档"><a href="#15压缩和归档" class="headerlink" title="15压缩和归档"></a>15压缩和归档</h1><p>压缩可以让文件变小,一般在需要传输前都会先对文件进行压缩.注意,压缩指令只针对文件有效,并且一次只能压缩一个文件.<br>归档可以将一个文件夹变成一个文件(tar文件)</p><h2 id="1-归档和解归档"><a href="#1-归档和解归档" class="headerlink" title="1)归档和解归档"></a>1)归档和解归档</h2><p><strong>tar  -cvf  归档后文件存放的地址(归档后的文件名)  需要归档的文件</strong>   ——&gt;将文件进行归档操作(既可以对文件进行归档也可以对文件夹归档)<br><strong>tar -xvf  归档文件地址</strong>   ——&gt;将指定的归档文件解归档</p><h2 id="2-压缩和解压缩"><a href="#2-压缩和解压缩" class="headerlink" title="2)压缩和解压缩"></a>2)压缩和解压缩</h2><p><strong>gzip  文件地址   *<em>——&gt;压缩指定文件(压缩后会生成一个gz文件,并且会删除原文件)<br>*</em>gzip  -c  需要压缩的文件地址文件名  &gt;  压缩文件地址</strong>   ——&gt;将指定文件压缩到指定位置,并且保留原文件<br><strong>gzip  -d  压缩文件地址</strong>   ——&gt;解压指定文件(解压完成后会删除原压缩文件)<br><strong>gzip  -l   压缩文件地址</strong>   ——&gt;列出压缩文件中的内容</p><p><strong>xz 文件地址</strong>   ——&gt;压缩指定文件(压缩文件后缀是xz)<br><strong>xz  -d  压缩文件地址</strong>   ——&gt;解压指定文件</p><p><strong>gunzip  压缩文件地址</strong>    ——&gt;解压指定文件(解压完成后会删除原压缩文件)</p><h1 id="16包管理工具-软件安装"><a href="#16包管理工具-软件安装" class="headerlink" title="16包管理工具(软件安装)"></a>16包管理工具(软件安装)</h1><p>包管理工具: yum</p><ul><li>yum search: 搜索软件包,例如yum search nginx.</li><li>yun list installed:列出已经安装的软件包,例如yum list installed I grep z1ib.</li><li>yum instal1:安装软件包,例如yum insta11 nginx.</li><li>yum remove:删除软件包,例如yum remove nginx.</li><li>yum update:更新软件包,例如yum update可以更新所有软件包,而yum update tar只会更新tar.</li><li>yum check-update:检查有哪些可以更新的软件包.</li><li>yum info:显示软件包的相关信息,例如yum info nginx.</li></ul><p>源代码构建安装软件:</p><ol><li>wget  安装包的路径        -下载安装包</li><li>gunzip/tar  压缩包         - 解压、解归档</li><li>(设置安装路径)</li><li>cd 安装包目录 执行: make &amp;&amp; make install       -编译安装包程序</li><li>给可执行文件添加软连接到usr/bin目录下            -添加快捷方式</li></ol><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#源代码构建python3.x</span></span><br><span class="line"></span><br><span class="line">[<span class="meta">root ~</span>]<span class="meta"># yum install gcc     (安装编译环境)</span></span><br><span class="line">[<span class="meta">root ~</span>]<span class="meta"># wget https://www.python.org/ftp/python/3.6.5/Python-3.6.5.tgz    (下载安装包)</span></span><br><span class="line">[<span class="meta">root ~</span>]<span class="meta"># gunzip Python-3.6.5.tgz     (解压)</span></span><br><span class="line">[<span class="meta">root ~</span>]<span class="meta"># tar -xvf Python-3.6.5.tar    (解归档)</span></span><br><span class="line">[<span class="meta">root ~</span>]<span class="meta"># cd Python-3.6.5            (进入安装包)</span></span><br><span class="line">[<span class="meta">root ~</span>]<span class="meta"># ./configure --prefix=/usr/local/python36 --enable-optimizations   (设置安装路径)</span></span><br><span class="line">[<span class="meta">root ~</span>]<span class="meta"># yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel    (安装相关依赖库)</span></span><br><span class="line">[<span class="meta">root ~</span>]<span class="meta"># make &amp;&amp; make install       (编译执行安装文件)</span></span><br><span class="line">...</span><br><span class="line">[<span class="meta">root ~</span>]<span class="meta"># ln -s /usr/local/python36/bin/python3.6 /usr/bin/python3      (给python指令文件创建快捷方式python3)</span></span><br><span class="line">[<span class="meta">root ~</span>]<span class="meta"># python3 --version</span></span><br><span class="line">Python <span class="number">3.6</span><span class="number">.5</span></span><br><span class="line">[<span class="meta">root ~</span>]<span class="meta"># python3 -m pip install -U pip     (安装pip)</span></span><br><span class="line">[<span class="meta">root ~</span>]<span class="meta"># ln -s /usr/local/python36/bin/pip /usr/bin/pip3      (给pip指令创建快捷方式pip3)</span></span><br><span class="line">[<span class="meta">root ~</span>]<span class="meta"># pip3 --version</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 指令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux定时任务</title>
      <link href="/2019/12/20/Linux%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
      <url>/2019/12/20/Linux%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>通过制定 <code>crontab -e</code> 编辑和开启定时任务</p><a id="more"></a><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建一个完整的定时任务，需要确定时间和任务</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1.时间</span></span><br><span class="line"> .---------------- minute (0 - 59)   # 分</span><br><span class="line"> |  .------------- hour (0 - 23)     # 时</span><br><span class="line"> |  |  .---------- day of month (1 - 31)  # 日</span><br><span class="line"> |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...  # 月</span><br><span class="line"> |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span><br><span class="line"> |  |  |  |  |</span><br><span class="line"> *  *  *  *  * user-name  command to be executed</span><br><span class="line"></span><br><span class="line"> * * * * *   - 每分钟执行一次任务(每隔一分钟)</span><br><span class="line"> */1 * * * *        - 每分钟执行一次任务(每隔一分钟)</span><br><span class="line"> */2 * * * *        - 每2分钟执行一次任务(每隔2分钟)</span><br><span class="line"> * */1 * * *        - 每隔1小时</span><br><span class="line"> * * */1 * *        - 每隔1天</span><br><span class="line"> * * * */2 *        - 每隔两个月</span><br><span class="line"> * * * *  fri       - 每周五执行任务</span><br><span class="line"></span><br><span class="line"> 30 * * * *         - 时间点到30分的时候做</span><br><span class="line"> 0  * * * *         - 时间点到整点的时候执行任务</span><br><span class="line"> 30 2 * * *         - 时间到 02:30 的时候执行任务</span><br><span class="line"> 0  12 28 * *       - 每月28号12:00执行任务</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.任务</span></span><br><span class="line">写Linux指令, 指令如果有结果，结果看不到</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> shell </tag>
            
            <tag> 脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux中python相关软件安装记录</title>
      <link href="/2019/12/20/linux%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
      <url>/2019/12/20/linux%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p>Linux中的Python, MySQL, Redis, Nginx安装,基础环境配置</p><a id="more"></a><h1 id="Linux基本配置"><a href="#Linux基本配置" class="headerlink" title="Linux基本配置"></a>Linux基本配置</h1><h2 id="配置vim编辑器"><a href="#配置vim编辑器" class="headerlink" title="配置vim编辑器"></a>配置vim编辑器</h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">vim .vimrc</span><br><span class="line">    <span class="keyword">set</span> nu   <span class="comment"># 行号</span></span><br><span class="line">    <span class="keyword">set</span> ts=<span class="number">4</span>   <span class="comment"># 设置制表键空格数量</span></span><br><span class="line">    <span class="keyword">set</span> autoindent   <span class="comment"># 自动缩进</span></span><br><span class="line">    <span class="keyword">set</span> expandtab   <span class="comment"># 制表键自动变空格</span></span><br><span class="line">    <span class="keyword">set</span> ruler   <span class="comment"># 显示光标位置</span></span><br><span class="line">    <span class="keyword">set</span> nohls   <span class="comment"># 选中的代码不高亮</span></span><br><span class="line">    syntax <span class="keyword">on</span>   <span class="comment"># 语法高亮</span></span><br></pre></td></tr></table></figure><h2 id="查看命令别名"><a href="#查看命令别名" class="headerlink" title="查看命令别名"></a>查看命令别名</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> ~</span><br><span class="line">vim <span class="string">.bashrc</span></span><br></pre></td></tr></table></figure><h2 id="修改用户名前的一长串"><a href="#修改用户名前的一长串" class="headerlink" title="修改用户名前的一长串"></a>修改用户名前的一长串</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/bashrc</span><br><span class="line"><span class="number">41</span>行删除@\h</span><br></pre></td></tr></table></figure><h1 id="后端相关的开发工具安装"><a href="#后端相关的开发工具安装" class="headerlink" title="后端相关的开发工具安装"></a>后端相关的开发工具安装</h1><h2 id="Linux软件安装方法"><a href="#Linux软件安装方法" class="headerlink" title="Linux软件安装方法"></a>Linux软件安装方法</h2><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1. 包管理工具 </span><br><span class="line">    -<span class="ruby"> yum CentOS</span></span><br><span class="line"><span class="ruby">        ~ yum search nginx   ---&gt;   查看安装库内是否已经安装nginx</span></span><br><span class="line"><span class="ruby">        ~ yum install nginx   ---&gt;   安装</span></span><br><span class="line"><span class="ruby">        ~ yum erase nginx / yum remove nginx   ---&gt;   卸载</span></span><br><span class="line"><span class="ruby">        ~ yum info nginx   ---&gt;   查看软件信息</span></span><br><span class="line"><span class="ruby">        ~ yum list installed <span class="params">| grep nginx   ---&gt;   查看是否已经安装</span></span></span><br><span class="line"><span class="ruby">    - rpm Redhat</span></span><br><span class="line"><span class="ruby">        ~ rpm -ivh 下载的rpm包文件名</span></span><br><span class="line"><span class="ruby">        ~ rpm -e</span></span><br><span class="line"><span class="ruby">        ~ rpm -qa</span></span><br><span class="line"><span class="ruby">    - apt Ubuntu</span></span><br><span class="line"><span class="ruby"><span class="number">2</span>. 源代码构建安装</span></span><br></pre></td></tr></table></figure><h2 id="Nginx安装"><a href="#Nginx安装" class="headerlink" title="Nginx安装"></a>Nginx安装</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">yum</span> <span class="string">install -y nginx</span></span><br><span class="line"><span class="attr">systemctl</span> <span class="string">start nginx</span></span><br><span class="line"><span class="attr">systemctl</span> <span class="string">stop nginx</span></span><br></pre></td></tr></table></figure><h2 id="MariaDB安装-MySQL-5-x-的一个分支-和5-x版本基本相同"><a href="#MariaDB安装-MySQL-5-x-的一个分支-和5-x版本基本相同" class="headerlink" title="MariaDB安装(MySQL 5.x 的一个分支,和5.x版本基本相同)"></a>MariaDB安装(MySQL 5.x 的一个分支,和5.x版本基本相同)</h2><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">yum</span> install -y <span class="keyword">mariadb </span><span class="keyword">mariadb-server</span></span><br><span class="line"><span class="keyword">systemctl </span>start <span class="keyword">mariadb</span></span><br><span class="line"><span class="keyword">mysql </span>-u root</span><br></pre></td></tr></table></figure><h2 id="MySQL安装"><a href="#MySQL安装" class="headerlink" title="MySQL安装"></a>MySQL安装</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 清除掉所有跟mariadb相关的东西</span><br><span class="line">  yum list installed | grep mariadb | awk <span class="string">'&#123;print $1&#125;'</span> | xargs yum erase -y</span><br><span class="line"><span class="number">2.</span> 清理之前的数据和日志文件（如果存在）</span><br><span class="line">  rm -rf /var/lib/mysql</span><br><span class="line">  rm -f /var/log/mysqld.log</span><br><span class="line"><span class="number">3.</span> 下载MySQL官方提供的RPM包并解归档</span><br><span class="line">  wget https:<span class="comment">//dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.28-1.el7.x86_64.rpm-bundle.tar</span></span><br><span class="line">  tar -xvf mysql<span class="number">-5.7</span><span class="number">.28</span><span class="number">-1.</span>el7.x86_64.rpm-bundle.tar</span><br><span class="line"><span class="number">4.</span> 安装依赖库</span><br><span class="line">  yum install -y libaio</span><br><span class="line"><span class="number">5.</span> 使用rpm包管理工具安装MySQL</span><br><span class="line">  rpm -ivh mysql-community-common<span class="number">-5.7</span><span class="number">.28</span><span class="number">-1.</span>el7.x86_64.rpm</span><br><span class="line">  rpm -ivh mysql-community-libs<span class="number">-5.7</span><span class="number">.28</span><span class="number">-1.</span>el7.x86_64.rpm</span><br><span class="line">  rpm -ivh mysql-community-client<span class="number">-5.7</span><span class="number">.28</span><span class="number">-1.</span>el7.x86_64.rpm</span><br><span class="line">  rpm -ivh mysql-community-server<span class="number">-5.7</span><span class="number">.28</span><span class="number">-1.</span>el7.x86_64.rpm</span><br><span class="line"><span class="number">6.</span> 启动服务查看随机密码</span><br><span class="line">  systemctl start mysqld</span><br><span class="line">  cat /var/log/mysqld.log | grep password</span><br><span class="line"><span class="number">7.</span> 用客户端工具连接MySQL</span><br><span class="line">  mysql -u root -p</span><br><span class="line"><span class="number">8.</span> 修改root用户口令</span><br><span class="line">  <span class="keyword">set</span> global validate_password_policy=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">set</span> global validate_password_length=<span class="number">6</span>;</span><br><span class="line">  alter user <span class="string">'root'</span>@<span class="string">'localhost'</span> identified by <span class="string">'123456'</span>;</span><br></pre></td></tr></table></figure><h2 id="Redis安装"><a href="#Redis安装" class="headerlink" title="Redis安装"></a>Redis安装</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">安装Redis官方最新版</span><br><span class="line">wget http:<span class="comment">//download.redis.io/releases/redis-5.0.7.tar.gz</span></span><br><span class="line">gunzip redis<span class="number">-5.0</span><span class="number">.7</span>.tar.gz</span><br><span class="line">tar -xvf redis<span class="number">-5.0</span><span class="number">.7</span>.tar</span><br><span class="line">cd redis<span class="number">-5.0</span><span class="number">.7</span></span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h2 id="GIt安装"><a href="#GIt安装" class="headerlink" title="GIt安装"></a>GIt安装</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">安装Git官方最新版</span><br><span class="line">wget https:<span class="comment">//mirrors.edge.kernel.org/pub/software/scm/git/git-2.24.1.tar.xz</span></span><br><span class="line">xz -d git<span class="number">-2.24</span><span class="number">.1</span>.tar.xz</span><br><span class="line">tar -xf git<span class="number">-2.24</span><span class="number">.1</span>.tar</span><br><span class="line">cd git<span class="number">-2.24</span><span class="number">.1</span></span><br><span class="line">yum install -y curl libcurl-devel</span><br><span class="line">./configure --prefix=/usr/local</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h2 id="Python3安装"><a href="#Python3安装" class="headerlink" title="Python3安装"></a>Python3安装</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 安装依赖项</span><br><span class="line">    yum install -y zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel libffi-devel</span><br><span class="line"><span class="number">2.</span> 下载Python3源代码</span><br><span class="line">    wget https:<span class="comment">//www.python.org/ftp/python/3.7.6/Python-3.7.6.tar.xz</span></span><br><span class="line"><span class="number">3.</span> 解压缩和解归档</span><br><span class="line">    xz -d Python<span class="number">-3.7</span><span class="number">.6</span>.tar.xz</span><br><span class="line">    tar -xvf Python<span class="number">-3.7</span><span class="number">.6</span>.tar</span><br><span class="line"><span class="number">4.</span> 执行安装前的配置</span><br><span class="line">    cd Python<span class="number">-3.7</span><span class="number">.6</span></span><br><span class="line">    ./configure --prefix=/usr/local/python37 --enable-optimizations</span><br><span class="line"><span class="number">5.</span> 构建和安装</span><br><span class="line">    make &amp;&amp; make install</span><br><span class="line"><span class="number">6.</span> 注册环境变量</span><br><span class="line">    vim ~/.bash_profile</span><br><span class="line">        PATH=$PATH:/usr/local/python37/bin</span><br><span class="line">        export PATH</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术文档 </tag>
            
            <tag> Linux软件 </tag>
            
            <tag> 服务器 </tag>
            
            <tag> 配置 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
