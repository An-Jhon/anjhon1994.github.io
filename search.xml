<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>数据库小结</title>
    <url>/2019/12/28/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B0%8F%E7%BB%93/</url>
    <content><![CDATA[<p>数据库一周小结</p>
<a id="more"></a>

<p>数据库主要分为两大类,分别是关系型数据库(SQL)和非关系型数据库(NOSQL);在关系型数据库中Oracle和MySQL是最具有代表性的两个,在非关系型数据库中MongoDB和Redis也是榜上有名. 而本周的学习中,主要对MySQL和Redis进行了深入的学习.</p>
<p><img src="https://github.com/anjhon1994/some_image/blob/master/%E6%95%B0%E6%8D%AE%E5%BA%9319%E5%B9%B412%E6%9C%88%E4%BD%BF%E7%94%A8%E6%8E%92%E8%A1%8C.png?raw=true" alt=""></p>
<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><p>MySQL主要使用SQL语言进行增删查改操作;<br>SQL是一种结构化查询语言,SQL语言又分为DDL(数据定义语言), DML(数据操作语言), DCL(数据控制语言)</p>
<h2 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h2><h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><p>1.创建数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span> utf8;   <span class="comment">--若dbname不存在,则按编码方式为utf8来新建数据库</span></span><br></pre></td></tr></table></figure>
<p>2.删除数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> dbname;  <span class="comment">-- 若数据库dbname存在就删除该数据库</span></span><br></pre></td></tr></table></figure>
<p>3.切换/使用数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">USE</span> dbname;  <span class="comment">-- 切换后执行的操作均只对当前数据库有效</span></span><br></pre></td></tr></table></figure>

<h3 id="数据表操作"><a href="#数据表操作" class="headerlink" title="数据表操作"></a>数据表操作</h3><p>1.创建数据表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> tablname(filed1 <span class="keyword">type</span> constraint1, filed2 <span class="keyword">type</span> constraint2, ...);   <span class="comment">-- 创建以field1,filed2..为表头的数据表</span></span><br><span class="line"><span class="comment">-- 在SQL中常见的type: int, float, varchar/text, bit, date   (varchar后通常需要限制字符串的长度)</span></span><br><span class="line"><span class="comment">-- 常见的constraint: not null, unique, default, primary key, foreign key, auto_increment</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--注:外键约束的类型有一对一,一对多,多对多三种, 外键添加的方式各不相同</span></span><br><span class="line"><span class="comment">-- 一对一: 可以添加到任意一方;</span></span><br><span class="line"><span class="comment">-- 一对多和多对一: 添加到多的一方;</span></span><br><span class="line"><span class="comment">-- 多对多: 两张表没有办法直接建立多对多的对应关系,需要第三张表辅助</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 示例:</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> tb_student</span><br><span class="line">(</span><br><span class="line">stuid <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> auto_increment,</span><br><span class="line">stuname <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">stubirth <span class="built_in">DATE</span>,</span><br><span class="line">stugender <span class="built_in">bit</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>,</span><br><span class="line">stutel <span class="built_in">VARCHAR</span>(<span class="number">11</span>) <span class="keyword">UNIQUE</span></span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (stuid)  主键约束还可以单独设置</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>2.删除表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> tablname;</span><br></pre></td></tr></table></figure>

<p>3.修改表</p>
<p>①:添加字段</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tablname <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> <span class="keyword">field</span> <span class="keyword">type</span> <span class="keyword">constraint</span>;</span><br></pre></td></tr></table></figure>
<p>②:删除字段</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tablname <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> <span class="keyword">field</span>;</span><br></pre></td></tr></table></figure>
<p>③:修改字段名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tablname <span class="keyword">CHANGE</span> <span class="keyword">field</span> new_filed new_type;</span><br></pre></td></tr></table></figure>
<p>④:添加约束</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tablname <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> consname <span class="keyword">constraint</span>(filed);</span><br></pre></td></tr></table></figure>
<p>⑤:删除约束</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tablname <span class="keyword">DROP</span> <span class="keyword">INDEX</span> <span class="keyword">constraint</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tablname <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> <span class="keyword">constraint</span>;</span><br></pre></td></tr></table></figure>

<h2 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h2><p>1.INSERT(增)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tablname(field1, field2, ...) <span class="keyword">VALUES</span>(value1, value2, ...),(value11, value22, ...), (value111, value222, ...), ...;</span><br></pre></td></tr></table></figure>
<p>2.DELETE(删)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> tablename <span class="keyword">WHERE</span> 条件语句;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 补充:</span></span><br><span class="line">sq1条件语句的写法(筛选)(条件语句在写的时候可以通过加()改变运算顺序)</span><br><span class="line"><span class="comment">-- 比较运算:=(等于),&lt;&gt;(不等于),&gt;,&lt;,&gt;=,&lt;=</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> tb_student <span class="keyword">WHERE</span> stuname=<span class="string">'真刚'</span>;</span><br><span class="line"><span class="comment">-- 逻辑运算:and(逻辑与),or(逻辑或),not(逻辑非);</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> tb_student <span class="keyword">WHERE</span> stuid&gt;=<span class="number">35</span> <span class="keyword">AND</span> stugender&lt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="comment">-- 集合包含:in</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> tb_student <span class="keyword">WHERE</span> stuname <span class="keyword">in</span> (<span class="string">'逍遥子'</span>, <span class="string">'韩信'</span>, <span class="string">'断水'</span>);</span><br><span class="line"><span class="comment">-- 范围:between...and</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> tb_student <span class="keyword">WHERE</span> stubirth <span class="keyword">BETWEEN</span> <span class="string">'1976-8-21'</span> <span class="keyword">AND</span> <span class="string">'1976-8-31'</span>;</span><br><span class="line"><span class="comment">-- 判断是否为空:is null,is not null</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> tb_student <span class="keyword">WHERE</span> (stubirth <span class="keyword">IS</span> <span class="literal">NULL</span>) <span class="keyword">AND</span> (stutel <span class="keyword">IS</span> <span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">-- 筛选:like(% -&gt; 任意个任意字符; _  -&gt;  表示单个任意字符)</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> tb_student <span class="keyword">WHERE</span> stuname <span class="keyword">LIKE</span> <span class="string">'盖_ '</span>;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> tb_student <span class="keyword">WHERE</span> stutel <span class="keyword">LIKE</span> <span class="string">'%2_'</span>;</span><br></pre></td></tr></table></figure>
<p>3.UPDATE(改)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> tablname <span class="keyword">SET</span> field1=value1, field1=value2, ... <span class="keyword">WHERE</span> 条件语句;</span><br></pre></td></tr></table></figure>
<p>4.SELECT(查)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tablname;  <span class="comment">--查询表内所有内容</span></span><br><span class="line"><span class="keyword">SELECT</span> field1, field2, field3, ... <span class="keyword">FROM</span> tablname;  <span class="comment">--获取表中所有记录指定字段的数据</span></span><br><span class="line"><span class="keyword">SELECT</span> field1 <span class="keyword">AS</span> <span class="string">'new_filed1'</span>, field2, field3 <span class="keyword">AS</span> <span class="string">'new_field3'</span>, ... <span class="keyword">FROM</span> tablname;   <span class="comment">--列重名</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">IF</span>(field1, value1, value2) <span class="keyword">FROM</span> tablname;   <span class="comment">--如果if中对应的字段的值是1,最后结果是value1,否则是value2(mysql特有写法)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CASE</span> <span class="keyword">field</span> <span class="keyword">WHEN</span> <span class="number">1</span> <span class="keyword">THEN</span> new_value1 <span class="keyword">ELSE</span> new_value2 <span class="keyword">END</span> <span class="keyword">FROM</span> tablname;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CONCAT</span>(field1, field2, ...) <span class="keyword">FROM</span> tablname;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tablname <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">field</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tablname <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">field</span> <span class="keyword">DESC</span>;   <span class="comment">-- 倒序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> <span class="keyword">field</span> <span class="keyword">FROM</span> tablname;   <span class="comment">-- 去重</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tablname <span class="keyword">LIMIT</span> N;   <span class="comment">-- 限制(获取前N条数据)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 跳过前N条数据获取M条数据(从第N+1条数据开始,获取M条数据)</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tablname <span class="keyword">LIMIT</span> M <span class="keyword">OFFSET</span> N;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tablname <span class="keyword">LIMIT</span> N, M; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 聚合</span></span><br><span class="line"><span class="comment">-- MAX(), MIN(), SUM(), AVG(), COUNT()   -&gt;   MySQL专用</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MAX</span>(score) <span class="keyword">AS</span> <span class="string">'最高分'</span> <span class="keyword">FROM</span> tb_record;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MIN</span>(score) <span class="keyword">AS</span> <span class="string">'最低分'</span> <span class="keyword">FROM</span> tb_record;</span><br><span class="line">SELECT SUM(score) AS '总分' FROM tb_record;   -&gt;   -- 求和所有分数的和,如果某一个记录的分数是空,那么这条记录不存与运算</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AVG</span>(score) <span class="keyword">AS</span> <span class="string">'平均分'</span> <span class="keyword">FROM</span> tb_record;  </span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(score) <span class="keyword">AS</span> <span class="string">'个数'</span> <span class="keyword">FROM</span> tb_record; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 分组</span></span><br><span class="line"><span class="keyword">SELECT</span> 聚合操作 <span class="keyword">FROM</span> tablname <span class="keyword">GROUP</span> <span class="keyword">BY</span> (<span class="keyword">field</span>);   <span class="comment">-- 分组后要加条件,则用having代替where</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 子查询</span></span><br><span class="line"><span class="comment">-- ①:将一个查询的结果作为另外一个查询的条件</span></span><br><span class="line"><span class="comment">-- ②:将一个查询的结果作为另外一个查询的对象(注: 若将查询结果作为查询对象,则必须在使用时用as重命名)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 连接查询</span></span><br><span class="line"><span class="comment">--①:内连接</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tablname1, tablname2, ... <span class="keyword">WHERE</span> 连接条件 查询条件;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tablname1 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> tablname2 <span class="keyword">ON</span> 连接条件<span class="number">1</span> <span class="keyword">INNER</span> <span class="keyword">JOIN</span> tablname3 <span class="keyword">ON</span> 连接条件<span class="number">2</span>;(注意:如果有中间表,中间表放在最前面)</span><br><span class="line"><span class="comment">--注意:如果既有连接条件又有查询条件,查询条件必须放在连接条件的后面</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--②:外连接</span></span><br><span class="line"><span class="comment">--在MySQL中只支持左外连接(LEFT JOIN)和右外连接(right join)</span></span><br><span class="line">左连接: <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> 表<span class="number">1</span> <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> 表<span class="number">2</span> : 先将表<span class="number">1</span>中的记录全部取出来,按连接条件依次连接表<span class="number">2</span>中的记录,表<span class="number">1</span>中的记录找不到满足条件,则表<span class="number">2</span>记录那么连接的内容就是空</span><br><span class="line">右连接: <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> 表<span class="number">1</span> <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> 表<span class="number">2</span> : 先将表<span class="number">2</span>中的记录全部取出来,按连接条件依次连接表<span class="number">1</span>中的记录,表<span class="number">2</span>中的记录找不到满足条件,则表<span class="number">1</span>记录那么连接的内容就是空</span><br></pre></td></tr></table></figure>

<h2 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h2><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><p>1.创建用户</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">'username'</span>@<span class="string">'登陆地址'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'password'</span>;</span><br><span class="line"><span class="comment">-- 注:登录地址有三种写法:</span></span><br><span class="line"><span class="comment">-- ip地址</span></span><br><span class="line"><span class="comment">-- localhost(本机)</span></span><br><span class="line"><span class="comment">-- %(任意位置)</span></span><br></pre></td></tr></table></figure>
<p>2.删除用户</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">'username'</span>;</span><br></pre></td></tr></table></figure>
<h3 id="授权管理"><a href="#授权管理" class="headerlink" title="授权管理"></a>授权管理</h3><p>1.授权</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> 权限类型 <span class="keyword">ON</span> dataname.tablname <span class="keyword">TO</span> <span class="string">'username'</span>@<span class="string">'登陆地址'</span>;</span><br></pre></td></tr></table></figure>
<p>2.召回权限</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span> 权限类型 <span class="keyword">ON</span> dataname.tablname <span class="keyword">FROM</span> username;</span><br></pre></td></tr></table></figure>

<h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>若完成一个任务需要多个操作,但只要有一个失败则任务不完成,数据回到任务开始前的状态;只有所有操作都成功了,数据库才更新;此时用事务语法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;   <span class="comment">-- 开启事务环境 </span></span><br><span class="line"><span class="keyword">UPDATE</span> tb_student <span class="keyword">SET</span> stubirth=<span class="string">'1993-1-1'</span> <span class="keyword">WHERE</span> stusex=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> tb_student <span class="keyword">WHERE</span> stuname <span class="keyword">LIKE</span> <span class="string">'杨%'</span></span><br><span class="line"><span class="keyword">COMMIT</span>;   <span class="comment">-- 提交事务环境中的操作结果</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br></pre></td></tr></table></figure>

<h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> 视图名 <span class="keyword">AS</span> <span class="keyword">sql</span>查询语句;</span><br></pre></td></tr></table></figure>

<h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--①:添加索引</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> 索引名 <span class="keyword">ON</span> 表名(字段);   <span class="comment">-- 给指定字段添加索引</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> 索引名 <span class="keyword">ON</span> 表名(字段);    <span class="comment">-- 给指定字段添加唯一索引</span></span><br><span class="line"><span class="comment">--②:删除索引</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tablname <span class="keyword">DROP</span> <span class="keyword">INDEX</span> 索引名;</span><br></pre></td></tr></table></figure>



<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="Redis命令"><a href="#Redis命令" class="headerlink" title="Redis命令"></a>Redis命令</h2><p>ttl key ——&gt; 查看key的存活时间<br>set key value ex N ——&gt; 设置key的存活时间为N秒<br>set key value px N ——&gt; 设置key的存活时间为N毫秒<br>shutdown  ——&gt; 关闭redis服务器<br>shutdown save ——&gt; 保存并关闭redis服务器<br>save ——&gt; 保存<br>bgsave ——&gt; 后台保存<br>dbsize ——&gt; 查看数据库大小<br>keys *  ——&gt; 获取所有的key<br>keys ta*  ——&gt; 获取ta开头的key</p>
<p><strong>redis默认开启了16个数据库</strong><br>select 0-15 ——&gt; 切换数据库<br>flushdb ——&gt; 清空当前数据库<br>flushall ——&gt; 清空所有数据库</p>
<p>type keyp ——&gt; 判断key的类型</p>
<h2 id="Redis的数据类型"><a href="#Redis的数据类型" class="headerlink" title="Redis的数据类型"></a>Redis的数据类型</h2><h3 id="1-字符串-string"><a href="#1-字符串-string" class="headerlink" title="1.字符串 - string"></a>1.字符串 - string</h3><pre><code>set key value
get key
strlen key
append key value ------&gt; 追加
mset key1 value1 key2 value2 ... ------&gt; 同时设置多组值
mget key1 key2 ...
incr key ------&gt; 当key的值为数字时,数值加一
incrby key N ------&gt; 为key的值加N
decr key ------&gt; 减一
decrby key N ------&gt; 减N
getrange key m n ------&gt; 从m取到n
setrange key N value ------&gt; 从n开始用value覆盖key的value值</code></pre><h3 id="2-哈希-hash"><a href="#2-哈希-hash" class="headerlink" title="2.哈希 - hash"></a>2.哈希 - hash</h3><pre><code>hset key field value 设置键和值
hmset key field1 value1 field2 value2 同时设置多个键和值
hget key field  查看指定的键对应的值
hmget key fieldl field2 同时查看多个键和值
hgetall key 获取所有的值和键
hkeys key 获取所有的键
hvals key 获取所有的值
hexists key filed 判断是否存在对应的值</code></pre><h3 id="3-列表-list"><a href="#3-列表-list" class="headerlink" title="3.列表 - list"></a>3.列表 - list</h3><pre><code>lpush list value1 value2 ... 插入到最左边
rpush list value1 value2 ... 插入到最右边
lpop list 取最左边
rpop list 取最右边
lrange list start end 查看列表片段
lindex list index 查看指定下标对应的元素
llen list 列表长度
lrem list count value 删除指定个数的元素</code></pre><h3 id="4-集合-set"><a href="#4-集合-set" class="headerlink" title="4.集合 - set"></a>4.集合 - set</h3><pre><code>sadd set value1 value2 ... 添加元素
srem set value 移除元素
spop set 获取随机元素
smembers set 查看所有元素
sismember set value 查看元素是否在集合内
scard set 查看元素个数
sinter set1 set2 交集
sunion set1 set2 并集
sdiff set1 set2 差集</code></pre><h3 id="5-有序集合-zset-元素自带一个值-可以修改"><a href="#5-有序集合-zset-元素自带一个值-可以修改" class="headerlink" title="5.有序集合 - zset(元素自带一个值,可以修改)"></a>5.有序集合 - zset(元素自带一个值,可以修改)</h3><pre><code>zadd zset score1 mem1 score2 mem2 ... 添加
zrem zset mem 移除
zrange zset start end 按score升序查看
zrevrange zset start end 按score降序查看
zscore zset mem 查看score值
zincrby zset value mem 改变score的值</code></pre><h3 id="6-地理位置-LBS应用-Location-Based-Service-基于位置的服务"><a href="#6-地理位置-LBS应用-Location-Based-Service-基于位置的服务" class="headerlink" title="6.地理位置(LBS应用-Location-Based Service - 基于位置的服务)"></a>6.地理位置(LBS应用-Location-Based Service - 基于位置的服务)</h3><pre><code>geoadd zset longitude1 latitude1 member1 longitude2 latitude2 member2 ...   添加经纬度信息
geopos zset member1 member2 ... 获取指定的位置的经纬度
geodist zset member1 member2 [unit] 计算两点间的距离,默认单位是米,[unit]是单位,可以修改为m,km,mi英里,ft英尺
georadius zset longitude1 latitude1 radius m/km/mi/ft 获取以点zset为圆心,radius为半径的圆的范围内的所有的坐标点;后面加withdist,可同时获取距离,加withcoord,可同时获取点的经纬度</code></pre><h1 id="Python中使用数据库"><a href="#Python中使用数据库" class="headerlink" title="Python中使用数据库"></a>Python中使用数据库</h1><h2 id="连接MySQL数据库"><a href="#连接MySQL数据库" class="headerlink" title="连接MySQL数据库"></a>连接MySQL数据库</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">连接对象 = pymysql.connect(host, port, user, password) - 和指定的数据库进行连接并返回一个连接对象</span></span><br><span class="line"><span class="string">参数说明:</span></span><br><span class="line"><span class="string">    host - MySQL主机地址: localhost表示当前设备上的MySQL,服务器的公网IP</span></span><br><span class="line"><span class="string">    port - MySQL服务端口,3306</span></span><br><span class="line"><span class="string">    user - MySQL用户</span></span><br><span class="line"><span class="string">    password - 用户对应的密码(如果创建用户的时候没有设置密码,这个参数可以不用赋值)</span></span><br><span class="line"><span class="string">    database - 建立连接后默认操作的数据库</span></span><br><span class="line"><span class="string">    charset - 设置连接的数据库文件的编码方式</span></span><br><span class="line"><span class="string">    autocommit - 是否自动提交(布尔值)  </span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">with 连接对象.cursor(查询返回值类型(默认值是none)) as 游标对象:</span></span><br><span class="line"><span class="string">    数据库操作上下文</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">说明:</span></span><br><span class="line"><span class="string">    查询返回值类型   -   None: 查询结果以元组的形式返回;</span></span><br><span class="line"><span class="string">                      pymysql.cursors.dictcursor: 查询结果以字典的形式返回;</span></span><br><span class="line"><span class="string">    数据库操作上下文   -   游标对象(数据库操作)只有在数据库操作上下文才有效</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">con = pymysql.connect(</span><br><span class="line">    host=<span class="string">'localhost'</span>,</span><br><span class="line">    port=<span class="number">3306</span>,</span><br><span class="line">    user=<span class="string">'root'</span>,</span><br><span class="line">    password=<span class="string">'123456'</span>,</span><br><span class="line">    database=<span class="string">'school'</span>,</span><br><span class="line">    charset=<span class="string">'utf8'</span>,</span><br><span class="line">    autocommit=<span class="string">'True'</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">with</span> con.cursor() <span class="keyword">as</span> cursor:</span><br><span class="line">    <span class="comment"># 数据库操作上下文</span></span><br><span class="line">    <span class="comment"># 3.执行sql语句: 游标对象.execute(sql语句)</span></span><br><span class="line">    cursor.execute(<span class="string">'create database if not exists pyschool;'</span>)</span><br><span class="line"><span class="comment"># 关闭连接</span></span><br><span class="line">con.close()</span><br></pre></td></tr></table></figure>

<h2 id="连接Redis服务器"><a href="#连接Redis服务器" class="headerlink" title="连接Redis服务器"></a>连接Redis服务器</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">redis.Redis(host=<span class="string">''</span>, password=<span class="string">''</span>, prot=<span class="string">''</span>)</span><br><span class="line">host : redis所在服务器公网地址;</span><br><span class="line">password : 登录口令;</span><br><span class="line">port : redis的服务端口</span><br><span class="line"></span><br><span class="line">连接时会返回一个连接对象:</span><br><span class="line">redis_cli = redis.Redis(host=<span class="string">''</span>, password=<span class="string">''</span>, prot=<span class="string">''</span>)</span><br><span class="line">使用redis完成相应的操作</span><br></pre></td></tr></table></figure>

<p><strong>扩展:</strong></p>
<pre><code>pip freeze &gt; requirement.txt   将虚拟环境依赖项写入到文件
pip install -r requirement.txt   按照文件安装依赖项

序列化:  把一个对象变成字符串(str)或字节串(bytes)
反序列化:  把字符串或者字节串还原成对象
json.dumps()   序列化(字符串转换成字节串)
json.loads()   反序列化(字节串转换成字符串)
pickle.dumps()   序列化(字符串转换成字节串)
pickle.loads()   反序列化(字节串转换成字符串)</code></pre><h2 id="将Redis作为用户请求和MySQL数据库之间的缓存介质"><a href="#将Redis作为用户请求和MySQL数据库之间的缓存介质" class="headerlink" title="将Redis作为用户请求和MySQL数据库之间的缓存介质"></a>将Redis作为用户请求和MySQL数据库之间的缓存介质</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_depts_from_db</span><span class="params">()</span>:</span></span><br><span class="line">    conn = pymysql.connect(</span><br><span class="line">        host=<span class="string">'localhost'</span>,</span><br><span class="line">        port=<span class="number">3306</span>,</span><br><span class="line">        user=<span class="string">'root'</span>,</span><br><span class="line">        password=<span class="string">'119148'</span>,</span><br><span class="line">        charset=<span class="string">'utf8'</span>,</span><br><span class="line">        autocommit=<span class="literal">True</span>,</span><br><span class="line">        database=<span class="string">'hrs'</span></span><br><span class="line">    )</span><br><span class="line">    depts = ()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> conn.cursor() <span class="keyword">as</span> cursor:</span><br><span class="line">            cursor.execute(<span class="string">'select dno, dname, dloc from tb_dept'</span>)</span><br><span class="line">            depts = cursor.fetchall()</span><br><span class="line">    <span class="keyword">except</span> pymysql.MySQLError <span class="keyword">as</span> err:</span><br><span class="line">        print(err)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        conn.close()</span><br><span class="line">    <span class="keyword">return</span> depts</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    redis_cli = redis.Redis(host=<span class="string">'49.233.152.190'</span>, port=<span class="number">6379</span>, password=<span class="string">'119148'</span>)</span><br><span class="line">    start = time.time()</span><br><span class="line">    data = redis_cli.get(<span class="string">'depts'</span>)</span><br><span class="line">    <span class="keyword">if</span> data:</span><br><span class="line">        depts = pickle.loads(data)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        depts = load_depts_from_db()</span><br><span class="line">        redis_cli.set(<span class="string">'depts'</span>, pickle.dumps(depts))</span><br><span class="line"></span><br><span class="line">    end = time.time()</span><br><span class="line">    print(depts)</span><br><span class="line">    print(<span class="string">f'执行时间: <span class="subst">&#123;end - start&#125;</span>秒'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>








]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>MySQl</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis及其应用</title>
    <url>/2019/12/27/radis/</url>
    <content><![CDATA[<p>非关系型数据库Redis<br>Redis是为了实现高速缓存服务,减小MySQL数据库的压力</p>
<a id="more"></a>


<h1 id="Linux服务起停"><a href="#Linux服务起停" class="headerlink" title="Linux服务起停"></a>Linux服务起停</h1><p>CentOS<br>    systemctl start 服务名   -&gt;   启动<br>    systemctl stop 服务名   -&gt;   停止<br>    systemctl restart 服务名   -&gt;   重启<br>    systemctl status 服务名   -&gt;   查看状态<br>    systemctl enable 服务名   -&gt;   开机自启<br>    systemctl disable 服务名   -&gt;   禁止自启</p>
<p>Ubuntu<br>    service 服务名 start   -&gt;   启动</p>
<h1 id="进程查杀"><a href="#进程查杀" class="headerlink" title="进程查杀"></a>进程查杀</h1><p>ps -ef | grep “”  -&gt;  搜索全部包含字符串的内容<br>ps -ef | grep “” | grep -v “grep” -&gt;  搜索全部包含字符串的内容并且过滤掉包含grep的内容<br>ps -ef | grep -E正则表达式  -&gt;  搜索全部包含符合正则表达式的内容<br>xargs  -&gt;  将列变成行<br>ps -ef | grep “redis-server” | grep -v “grep” | awk ‘{print $2}’ | xargs kill  -&gt;  精准查杀进程</p>
<p>pkill 进程名  -&gt;  根据名字杀掉进程<br>killall 进程名  -&gt;  根据名字杀掉进程</p>
<h1 id="redis命令"><a href="#redis命令" class="headerlink" title="redis命令"></a>redis命令</h1><p>ttl key ——&gt; 查看key的存活时间<br>set key value ex N ——&gt; 设置key的存活时间为N秒<br>set key value px N ——&gt; 设置key的存活时间为N毫秒<br>shutdown  ——&gt; 关闭redis服务器<br>shutdown save ——&gt; 保存并关闭redis服务器<br>save ——&gt; 保存<br>bgsave ——&gt; 后台保存<br>dbsize ——&gt; 查看数据库大小<br>keys *  ——&gt; 获取所有的key<br>keys ta*  ——&gt; 获取ta开头的key</p>
<p><strong>redis默认开启了16个数据库</strong><br>select 0-15 ——&gt; 切换数据库<br>flushdb ——&gt; 清空当前数据库<br>flushall ——&gt; 清空所有数据库</p>
<p>type keyp ——&gt; 判断key的类型</p>
<h1 id="redis的数据类型"><a href="#redis的数据类型" class="headerlink" title="redis的数据类型"></a>redis的数据类型</h1><h2 id="1-字符串-string"><a href="#1-字符串-string" class="headerlink" title="1.字符串 - string"></a>1.字符串 - string</h2><pre><code>set key value
get key
strlen key
append key value ------&gt; 追加
mset key1 value1 key2 value2 ... ------&gt; 同时设置多组值
mget key1 key2 ...
incr key ------&gt; 当key的值为数字时,数值加一
incrby key N ------&gt; 为key的值加N
decr key ------&gt; 减一
decrby key N ------&gt; 减N
getrange key m n ------&gt; 从m取到n
setrange key N value ------&gt; 从n开始用value覆盖key的value值</code></pre><h2 id="2-哈希-hash"><a href="#2-哈希-hash" class="headerlink" title="2.哈希 - hash"></a>2.哈希 - hash</h2><pre><code>hset key field value 设置键和值
hmset key field1 value1 field2 value2 同时设置多个键和值
hget key field  查看指定的键对应的值
hmget key fieldl field2 同时查看多个键和值
hgetall key 获取所有的值和键
hkeys key 获取所有的键
hvals key 获取所有的值
hexists key filed 判断是否存在对应的值</code></pre><h2 id="3-列表-list"><a href="#3-列表-list" class="headerlink" title="3.列表 - list"></a>3.列表 - list</h2><pre><code>lpush list value1 value2 ... 插入到最左边
rpush list value1 value2 ... 插入到最右边
lpop list 取最左边
rpop list 取最右边
lrange list start end 查看列表片段
lindex list index 查看指定下标对应的元素
llen list 列表长度
lrem list count value 删除指定个数的元素</code></pre><h2 id="4-集合-set"><a href="#4-集合-set" class="headerlink" title="4.集合 - set"></a>4.集合 - set</h2><pre><code>sadd set value1 value2 ... 添加元素
srem set value 移除元素
spop set 获取随机元素
smembers set 查看所有元素
sismember set value 查看元素是否在集合内
scard set 查看元素个数
sinter set1 set2 交集
sunion set1 set2 并集
sdiff set1 set2 差集</code></pre><h2 id="5-有序集合-zset-元素自带一个值-可以修改"><a href="#5-有序集合-zset-元素自带一个值-可以修改" class="headerlink" title="5.有序集合 - zset(元素自带一个值,可以修改)"></a>5.有序集合 - zset(元素自带一个值,可以修改)</h2><pre><code>zadd zset score1 mem1 score2 mem2 ... 添加
zrem zset mem 移除
zrange zset start end 按score升序查看
zrevrange zset start end 按score降序查看
zscore zset mem 查看score值
zincrby zset value mem 改变score的值</code></pre><h2 id="6-地理位置-LBS应用-Location-Based-Service-基于位置的服务"><a href="#6-地理位置-LBS应用-Location-Based-Service-基于位置的服务" class="headerlink" title="6.地理位置(LBS应用-Location-Based Service - 基于位置的服务)"></a>6.地理位置(LBS应用-Location-Based Service - 基于位置的服务)</h2><pre><code>geoadd zset longitude1 latitude1 member1 longitude2 latitude2 member2 ...   添加经纬度信息
geopos zset member1 member2 ... 获取指定的位置的经纬度
geodist zset member1 member2 [unit] 计算两点间的距离,默认单位是米,[unit]是单位,可以修改为m,km,mi英里,ft英尺
georadius zset longitude1 latitude1 radius m/km/mi/ft 获取以点zset为圆心,radius为半径的圆的范围内的所有的坐标点;后面加withdist,可同时获取距离,加withcoord,可同时获取点的经纬度</code></pre><h1 id="加密技术"><a href="#加密技术" class="headerlink" title="加密技术"></a>加密技术</h1><p><strong>对称加密 : 加密和解密使用相同的密钥 - AES<br>非对称加密 : 加密和解密使用不同的密钥(公钥和私钥)  -  适合互连网 - RSA</strong></p>
<p><strong>免密操作</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ssh-keygen</span> <span class="selector-tag">-t</span> <span class="selector-tag">rsa</span> <span class="selector-tag">-b</span> 2048 <span class="selector-tag">-c</span> <span class="selector-tag">anjhon</span><span class="keyword">@163</span>.com   -   生成公钥和私钥</span><br><span class="line">t 指定算法; <span class="selector-tag">b</span> 指定强度; <span class="selector-tag">c</span> 指定邮箱</span><br><span class="line"></span><br><span class="line">进入到<span class="selector-class">.ssh</span>文件,</span><br><span class="line"><span class="selector-tag">id_rsa</span>  <span class="selector-tag">-</span>   私钥</span><br><span class="line"><span class="selector-tag">id_rsa</span><span class="selector-class">.pub</span>  <span class="selector-tag">-</span>   公钥</span><br><span class="line"></span><br><span class="line">将公钥复制到网站的公钥设置</span><br><span class="line"></span><br><span class="line">若有<span class="selector-tag">known-hosts</span>文件,且网站链接不上,直接删除<span class="selector-tag">known-hosts</span>文件</span><br></pre></td></tr></table></figure>



<h1 id="Python中的redis"><a href="#Python中的redis" class="headerlink" title="Python中的redis"></a>Python中的redis</h1><p><strong>连接redis服务器:</strong></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">redis.Redis(<span class="attribute">host</span>=<span class="string">''</span>, <span class="attribute">password</span>=<span class="string">''</span>, <span class="attribute">prot</span>=<span class="string">''</span>)</span><br><span class="line">	host : redis所在服务器公网地址;</span><br><span class="line">	password : 登录口令;</span><br><span class="line"><span class="built_in">	port </span>: redis的服务端口</span><br><span class="line">	</span><br><span class="line">连接时会返回一个连接对象:</span><br><span class="line">redis_cli = redis.Redis(<span class="attribute">host</span>=<span class="string">''</span>, <span class="attribute">password</span>=<span class="string">''</span>, <span class="attribute">prot</span>=<span class="string">''</span>)</span><br><span class="line">使用redis完成相应的操作</span><br></pre></td></tr></table></figure>

<p><strong>python中使用redis的数据类型:</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> redis   <span class="comment"># 导入redis模块</span></span><br><span class="line"></span><br><span class="line">redis_cli = redis.Redis(host=<span class="string">'10.10.10.10'</span>, password=<span class="string">'123456'</span>, port=<span class="string">'6379'</span>)   <span class="comment"># 连接redis服务器</span></span><br><span class="line"><span class="comment"># print(redis_cli)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> redis_cli.ping():</span><br><span class="line">    <span class="comment"># hash的使用</span></span><br><span class="line">    redis_cli.hmset(<span class="string">'stu1'</span>, &#123;</span><br><span class="line">        <span class="string">'stuname'</span>: <span class="string">'xiaoming'</span>,</span><br><span class="line">        <span class="string">'stuid'</span>: <span class="string">'001'</span>,</span><br><span class="line">        <span class="string">'stusex'</span>: <span class="string">'1'</span>,</span><br><span class="line">        <span class="string">'stuaddr'</span>: <span class="string">'肖家河'</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    print(redis_cli.hget(<span class="string">'stu1'</span>, <span class="string">'stuname'</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 有序集合的使用</span></span><br><span class="line">    redis_cli.zadd(<span class="string">'zset1'</span>, &#123;</span><br><span class="line">        <span class="string">'an'</span>: <span class="number">100</span>,</span><br><span class="line">        <span class="string">'yong'</span>: <span class="number">200</span>,</span><br><span class="line">        <span class="string">'duan'</span>: <span class="number">300</span></span><br><span class="line">    &#125;)</span><br><span class="line">    items = redis_cli.zrevrange(<span class="string">'zset1'</span>, <span class="number">0</span>, <span class="number">-1</span>)</span><br><span class="line">    print(list(map(bytes.decode, items)))</span><br><span class="line">    print(redis_cli.zscore(<span class="string">'zset1'</span>, <span class="string">'an'</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 列表的使用</span></span><br><span class="line">    redis_cli.rpush(<span class="string">'list1'</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">    list1 = redis_cli.lrange(<span class="string">'list1'</span>, <span class="number">0</span>, <span class="number">-1</span>)</span><br><span class="line">    print(list(map(int, list1)))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 字符串的使用</span></span><br><span class="line">    redis_cli.set(<span class="string">'username'</span>, <span class="string">'an'</span>)</span><br><span class="line">    print(redis_cli.ttl(<span class="string">'username'</span>))</span><br><span class="line">    print(redis_cli.get(<span class="string">'username'</span>).decode(<span class="string">'utf-8'</span>))</span><br><span class="line">    redis_cli.set(<span class="string">'user_age'</span>, <span class="string">'25'</span>)</span><br><span class="line">    redis_cli.set(<span class="string">'user_tel'</span>, <span class="string">'133'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'连接失败'</span>)</span><br></pre></td></tr></table></figure>

<p><strong>扩展:</strong></p>
<pre><code>pip freeze &gt; requirement.txt   将虚拟环境依赖项写入到文件
pip install -r requirement.txt   按照文件安装依赖项

序列化:  把一个对象变成字符串(str)或字节串(bytes)
反序列化:  把字符串或者字节串还原成对象
json.dumps()   序列化(字符串转换成字节串)
json.loads()   反序列化(字节串转换成字符串)
pickle.dumps()   序列化(字符串转换成字节串)
pickle.loads()   反序列化(字节串转换成字符串)</code></pre><p><strong>数据上传redis服务器并从redis获取数据</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, sex, addr)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.sex = sex</span><br><span class="line">        self.addr = addr</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span>   <span class="comment"># 魔法方法(将数据显示出来)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'%s, %d, %s, %s'</span> % (self.name, self.age, self.sex, self.addr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stu1 = Student(<span class="string">'小明'</span>, <span class="number">20</span>, <span class="string">'男'</span>, <span class="string">'昆明'</span>)</span><br><span class="line">stu2 = Student(<span class="string">'小黄'</span>, <span class="number">30</span>, <span class="string">'女'</span>, <span class="string">'上海'</span>)</span><br><span class="line"></span><br><span class="line">list1 = [stu1, stu2]   <span class="comment"># 将学生对象添加到列表中</span></span><br><span class="line"></span><br><span class="line">redis_cli = redis.Redis(host=<span class="string">'10.10.10.10'</span>, password=<span class="string">'123456'</span>, port=<span class="string">'6379'</span>)   <span class="comment"># 连接redis服务器</span></span><br><span class="line"><span class="keyword">if</span> redis_cli.ping():</span><br><span class="line">    <span class="comment"># redis_cli.set('student_all', pickle.dumps(list1))   -   将本地的数据添加到redis</span></span><br><span class="line">    redis_stu = pickle.loads(redis_cli.get(<span class="string">'student_all'</span>))   <span class="comment"># 获取redis内的数据并进行反序列化</span></span><br><span class="line">    print(redis_stu)</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'连接失败'</span>)</span><br></pre></td></tr></table></figure>

<p><strong>将redis作为用户请求和数据库之间的缓存介质</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_depts_from_db</span><span class="params">()</span>:</span></span><br><span class="line">    conn = pymysql.connect(   <span class="comment"># 连接本地的MySQL服务器</span></span><br><span class="line">        host=<span class="string">'localhost'</span>,</span><br><span class="line">        port=<span class="number">3306</span>,</span><br><span class="line">        user=<span class="string">'root'</span>,</span><br><span class="line">        password=<span class="string">'123456'</span>,</span><br><span class="line">        charset=<span class="string">'utf8'</span>,</span><br><span class="line">        autocommit=<span class="literal">True</span>,</span><br><span class="line">        database=<span class="string">'hrs'</span></span><br><span class="line">    )</span><br><span class="line">    depts = ()</span><br><span class="line">    <span class="keyword">try</span>:   <span class="comment"># 异常捕获</span></span><br><span class="line">        <span class="keyword">with</span> conn.cursor() <span class="keyword">as</span> cursor:</span><br><span class="line">            cursor.execute(<span class="string">'select dno, dname, dloc from tb_dept'</span>)   <span class="comment"># 获取数据</span></span><br><span class="line">            depts = cursor.fetchall()</span><br><span class="line">    <span class="keyword">except</span> pymysql.MySQLError <span class="keyword">as</span> err:</span><br><span class="line">        print(err)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        conn.close()</span><br><span class="line">    <span class="keyword">return</span> depts</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    redis_cli = redis.Redis(host=<span class="string">'10.10.10.10'</span>, password=<span class="string">'123456'</span>, port=<span class="string">'6379'</span>)</span><br><span class="line">    start = time.time()</span><br><span class="line">    data = redis_cli.get(<span class="string">'depts'</span>)   <span class="comment"># 获取redis的depts对应的数据</span></span><br><span class="line">    <span class="keyword">if</span> data:</span><br><span class="line">        depts = pickle.loads(data)   <span class="comment"># 若获取到数据,将数据反序列化并保存下来</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        depts = load_depts_from_db()   <span class="comment"># 若没有数据,从数据库获取数据,并将数据保存到redis中,以便下次使用时优先从redis中获取,以减轻服务器的压力并且提高数据获取效率</span></span><br><span class="line">        redis_cli.set(<span class="string">'depts'</span>, pickle.dumps(depts))</span><br><span class="line"></span><br><span class="line">    end = time.time()</span><br><span class="line">    print(depts)</span><br><span class="line">    print(<span class="string">f'执行时间: <span class="subst">&#123;end - start&#125;</span>秒'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>redis</tag>
        <tag>基础</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL基础</title>
    <url>/2019/12/25/SQL%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>关系型数据库之MySQL</p>
<a id="more"></a>



<h1 id="SQL基础"><a href="#SQL基础" class="headerlink" title="SQL基础"></a>SQL基础</h1><p>SQL又叫结构化查询语言,分为三大类,分别是:DDL(数据定义语言),DML(数据操作语言),DCL(数据控制语言)<br>DDL:create(创建数据库和表)、drop(删除数据库和表)、alter(修改表)<br>DML:insert(增)、delete(删)、update(改)、select(查)<br>DCL:grant(授权)、revoke(召回授权)</p>
<p>sql的注释是在注释前加–<br>sql中sql的关键字不区分大小写<br>sq语句结束后需要加分号</p>
<h1 id="DDL-数据定义"><a href="#DDL-数据定义" class="headerlink" title="DDL(数据定义)"></a>DDL(数据定义)</h1><h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><h3 id="1-创建数据库"><a href="#1-创建数据库" class="headerlink" title="1.创建数据库"></a>1.创建数据库</h3><p>CREATE DATABASE 数据库名称;   —&gt; 创建指定数据库，如果这个数据库已经存在，会报错<br><strong>CREATE DATABASE IF NOT EXISTS 数据库名称;    —&gt; 当指定数据库不存在的时候创建对应的数据库</strong><br>CREATE DATABASE IF NOT EXISTS 数据库名称 DEFAULT CHARSET utf8;    —&gt; 创建数据库的时候指定数据文件编码方式<br>CREATE DATABASE school;</p>
<h3 id="2-删除数据库"><a href="#2-删除数据库" class="headerlink" title="2.删除数据库"></a>2.删除数据库</h3><p><strong>DROP DATABASE 数据库名称;</strong><br><strong>DROP DATABASE IF EXISTS 数据库名;</strong><br>DROP DATABASE school;<br>DROP DATABASE IF EXISTS school;</p>
<h3 id="3-切换-使用数据库"><a href="#3-切换-使用数据库" class="headerlink" title="3.切换/使用数据库"></a>3.切换/使用数据库</h3><p><strong>USE 数据库;  -&gt;   切换/使用指定数据库；切换后所有数据库相关操作都是针对这个数据库</strong><br>USE school;</p>
<h2 id="数据表操作"><a href="#数据表操作" class="headerlink" title="数据表操作"></a>数据表操作</h2><h3 id="1-创建表（数据库文件是通过表来存数据）"><a href="#1-创建表（数据库文件是通过表来存数据）" class="headerlink" title="1.创建表（数据库文件是通过表来存数据）"></a>1.创建表（数据库文件是通过表来存数据）</h3><p><strong>CREATE TABLE IF NOT EXISTS 表名(字段名1 类型1 约束1, 字段名2 类型2 约束2, …);</strong><br><strong>说明:</strong><br>①:表名:程序员自己命名,见名知义,一般需要加前缀t_/tb_示表<br>②:字段名:程序员自己命名,见名知义;注意:字段中一定要有一个字段来作为主键(可以表示唯一一条记录);主键要求不为空,并且是唯一的,而且数据类型是整型<br>③:类型名:必须是当前数据库支持的数据类型,mysql中常用的数据类型:int(整型),float(浮点型),varchar(字符串)/text(字符串),bit(布尔),date/datet ime(日期和时间)<br>④:约束:not null(非空约束)、unique(唯一约束)、default(默认值约束)、primary key(主键约束)、foreign key(外键约束)、auto_increment(自动增长)<br>      注意:约束可以没有,也可以有多个</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> tb_student</span><br><span class="line">(</span><br><span class="line">stuid <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> auto_increment,</span><br><span class="line">stuname <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">stubirth <span class="built_in">DATE</span>,</span><br><span class="line">stugender <span class="built_in">bit</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>,</span><br><span class="line">stutel <span class="built_in">VARCHAR</span>(<span class="number">11</span>) <span class="keyword">UNIQUE</span></span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (stuid)  主键约束还可以单独设置</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="2-删除表"><a href="#2-删除表" class="headerlink" title="2.删除表"></a>2.删除表</h3><p><strong>DROP TABLE IF EXISTS 表名;</strong><br>DROP TABLE IF EXISTS tb_student;</p>
<h3 id="3-修改表"><a href="#3-修改表" class="headerlink" title="3.修改表"></a>3.修改表</h3><h4 id="3-1-添加字段"><a href="#3-1-添加字段" class="headerlink" title="3.1 添加字段"></a>3.1 添加字段</h4><p><strong>ALTER TABLE 表名 ADD COLUMN 字段名 类型 约束;</strong><br>ALTER TABLE tb_student ADD COLUMN stuaddr VARCHAR(200);  </p>
<h4 id="3-2-删除字段"><a href="#3-2-删除字段" class="headerlink" title="3.2 删除字段"></a>3.2 删除字段</h4><p><strong>ALTER TABLE 表明 DROP COLUMN 字段名;</strong><br>ALTER TABLE tb_student DROP COLUMN stuaddr;</p>
<h4 id="3-3-修改字段名"><a href="#3-3-修改字段名" class="headerlink" title="3.3 修改字段名"></a>3.3 修改字段名</h4><p><strong>ALTER TABLE 表名 CHANGE 原字段 新字段 新类型;</strong><br>ALTER TABLE tb_student CHANGE tel stutel VARCHAR(11);</p>
<h4 id="3-4-添加约束"><a href="#3-4-添加约束" class="headerlink" title="3.4 添加约束"></a>3.4 添加约束</h4><p><strong>3.4.1 创建表或添加字段的时候直接在字段后面添加约束</strong><br><strong>3.4.2 通过修改表的样式添加约束</strong><br><strong>ALTER TABLE 表名 ADD CONSTRAINT 约束索引名 约束名(字段);   -&gt;   给指定字段添加指定约束</strong><br><strong>ALTER TABLE 表1 ADD CONSTRAINT 约束索引名 FOREIGN KEY(字段1) REFERENCES 表2(字段2);   -&gt;   给表1中的字段1添加外键约束,并且字段1的值依赖表2中的字段2</strong></p>
<h4 id="3-5-删除约束"><a href="#3-5-删除约束" class="headerlink" title="3.5 删除约束"></a>3.5 删除约束</h4><p><strong>ALTER TABLE 表名 DROP INDEX 约束索引名;   -&gt;   删除指定约束</strong><br><strong>ALTER TABLE 表名 DROP FOREIGN KEY 外键索引;   -&gt;   删除外键约束</strong></p>
<h1 id="0ML-数据操作"><a href="#0ML-数据操作" class="headerlink" title="0ML(数据操作)"></a>0ML(数据操作)</h1><h2 id="1-INSERT-增"><a href="#1-INSERT-增" class="headerlink" title="1.INSERT(增)"></a>1.INSERT(增)</h2><p><strong>方法①:INSERT INTO 表名 VALUES(值1, 值2, 值3,…)  -&gt; 按表中字段的顺序依次给每个字段赋值,最终形成一条新的记录</strong><br>说明: 日期(DATE)  -&gt;  1)日期字符串:如: ‘2019-12-23’<br>                               2)DATE((NOW())-当前日期; YEAR(NOW())-当前年; MONTH(NOW())-当前月;</p>
<p>INSERT INTO tb_student VALUES(1, ‘天明’, ‘2000-10-2’, 1, ‘12345678901’);</p>
<p><strong>方法②:INSERT INTO 表名(字段名1,字段名2,…) VALUES(值1,值2,…);  -&gt;  按指定顺序给指定字段赋值,最终形成一条新的记录</strong></p>
<p>INSERT INTO tb_student(stuname, stubirth, stugender, stutel) VALUES(‘少羽’, ‘2000-8-21’, 1, ‘12345678902’);</p>
<p><strong>方法③:INSERT INTO 表名(字段名1,字段名2,…) VALUES(值1,值..…),(值11,值22,..),(值111,值2222,…),…;  -&gt;  同时插入多条记录</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_student(stuname, stubirth, stugender, stutel) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">'月儿'</span>, <span class="string">'2000-11-21'</span>, <span class="number">0</span>, <span class="string">'12345678903'</span>),</span><br><span class="line">(<span class="string">'卫庄'</span>, <span class="string">'1989-8-21'</span>, <span class="number">1</span>, <span class="string">'12345678904'</span>),</span><br><span class="line">(<span class="string">'盖聂'</span>, <span class="string">'1990-8-21'</span>, <span class="number">1</span>, <span class="string">'12345678905'</span>),</span><br><span class="line">(<span class="string">'胜七'</span>, <span class="string">'1977-8-21'</span>, <span class="number">1</span>, <span class="string">'12345678906'</span>),</span><br><span class="line">(<span class="string">'惊鲵'</span>, <span class="string">'1971-8-21'</span>, <span class="number">0</span>, <span class="string">'12345678907'</span>),</span><br><span class="line">(<span class="string">'掩日'</span>, <span class="string">'1972-8-21'</span>, <span class="number">1</span>, <span class="string">'12345678908'</span>),</span><br><span class="line">(<span class="string">'黑白玄鉴'</span>, <span class="string">'1970-8-21'</span>, <span class="number">1</span>, <span class="string">'12345678909'</span>),</span><br><span class="line">(<span class="string">'真刚'</span>, <span class="string">'1973-8-25'</span>, <span class="number">1</span>, <span class="string">'12345678910'</span>),</span><br><span class="line">(<span class="string">'断水'</span>, <span class="string">'1974-8-21'</span>, <span class="number">1</span>, <span class="string">'12345678911'</span>),</span><br><span class="line">(<span class="string">'赵高'</span>, <span class="string">'1976-8-31'</span>, <span class="number">1</span>, <span class="string">'12345678912'</span>),</span><br><span class="line">(<span class="string">'韩非'</span>, <span class="string">'1976-8-31'</span>, <span class="number">1</span>, <span class="string">'12345678913'</span>),</span><br><span class="line">(<span class="string">'韩信'</span>, <span class="string">'1976-8-31'</span>, <span class="number">1</span>, <span class="string">'12345678914'</span>),</span><br><span class="line">(<span class="string">'章邯'</span>, <span class="string">'1976-8-31'</span>, <span class="number">1</span>, <span class="string">'12345678915'</span>),</span><br><span class="line">(<span class="string">'鬼谷子'</span>, <span class="string">'1976-8-31'</span>, <span class="number">1</span>, <span class="string">'12345678916'</span>),</span><br><span class="line">(<span class="string">'东皇太一'</span>, <span class="string">'1976-8-31'</span>, <span class="number">1</span>, <span class="string">'12345678917'</span>),</span><br><span class="line">(<span class="string">'晓梦'</span>, <span class="string">'1976-8-31'</span>, <span class="number">0</span>, <span class="string">'12345678918'</span>),</span><br><span class="line">(<span class="string">'逍遥子'</span>, <span class="string">'1976-8-31'</span>, <span class="number">1</span>, <span class="string">'12345678919'</span>),</span><br><span class="line">(<span class="string">'赤炼'</span>, <span class="string">'1976-8-31'</span>, <span class="number">1</span>, <span class="string">'12345678920'</span>),</span><br><span class="line">(<span class="string">'高渐离'</span>, <span class="string">'1976-8-31'</span>, <span class="number">1</span>, <span class="string">'12345678921'</span>);</span><br></pre></td></tr></table></figure>


<h2 id="2-DELETE-删"><a href="#2-DELETE-删" class="headerlink" title="2.DELETE(删)"></a>2.DELETE(删)</h2><p><strong>方法①:DELETE FROM 表名;  -&gt;   删除当前表中所有的记录(清空表)</strong><br><strong>DELETE FROM tb_student;</strong></p>
<p><strong>方法②:DELETE FROM 表名 WHERE 条件;  -&gt;  删除所有满足条件的记录</strong></p>
<p><strong>补充:</strong><br>sq1条件语句的写法(筛选)(条件语句在写的时候可以通过加()改变运算顺序)</p>
<p><strong>比较运算:=(等于),&lt;&gt;(不等于),&gt;,&lt;,&gt;=,&lt;=</strong><br>DELETE FROM tb_student WHERE stuname=’真刚’;</p>
<p><strong>逻辑运算:and(逻辑与),or(逻辑或),not(逻辑非);</strong><br>DELETE FROM tb_student WHERE stuid&gt;=35 AND stugender&lt;&gt;1;</p>
<p><strong>集合包含:in</strong><br>DELETE FROM tb_student WHERE stuname in (‘逍遥子’, ‘韩信’, ‘断水’);</p>
<p><strong>范围:between…and</strong><br>DELETE FROM tb_student WHERE stubirth BETWEEN ‘1976-8-21’ AND ‘1976-8-31’;</p>
<p><strong>判断是否为空:is null,is not null</strong><br>DELETE FROM tb_student WHERE (stubirth IS NULL) AND (stutel IS NULL);</p>
<p><strong>筛选:like(% -&gt; 任意个任意字符; _  -&gt;  表示单个任意字符)</strong><br>DELETE FROM tb_student WHERE stuname LIKE ‘盖_ ‘;<br>DELETE FROM tb_student WHERE stutel LIKE ‘%2_’;</p>
<h2 id="3-UPDATE-改"><a href="#3-UPDATE-改" class="headerlink" title="3.UPDATE(改)"></a>3.UPDATE(改)</h2><p>ALTER TABLE tb_student ADD COLUMN stuaddr VARCHAR(200);</p>
<p><strong>UPDATE 表名 SET 字段1=新值1,字段2=新值2,…;  -&gt;  将指定表中所有记录中指定的字段修改成指定的值</strong></p>
<p>UPDATE tb_student SET stuaddr=’成都’;</p>
<p><strong>UPDATE 表名 SET 字段1=新值1,字段2=新值2,… WHERE 条件;  -&gt;  将满足条件的记录的指定字段设置为指定的值</strong></p>
<p>UPDATE tb_student SET stuaddr=’昆明’ WHERE stugender=0;</p>
<h2 id="4-SELECT-查"><a href="#4-SELECT-查" class="headerlink" title="4.SELECT(查)"></a>4.SELECT(查)</h2><p><strong>SELECT * FROM 表名;  -&gt;  获取指定表中所有的记录中所有字段的数据</strong></p>
<p>SELECT * FROM tb_student;</p>
<p><strong>映射</strong><br><strong>SELECT 字段1,字段2,字段3,… FROM 表名;  -&gt;  获取表中所有记录指定字段的数据</strong><br>SELECT stuname, stugender, stuaddr FROM tb_student;</p>
<p><strong>列重名</strong><br><strong>SELECT 字段名1 AS ‘新字段名1’, 字段名2,字段名3 AS ‘新字段名3’, … FROM 表名;</strong><br>SELECT stuname AS ‘姓名’, stugender AS ‘性别’, stuaddr AS ‘地址’ from tb_student</p>
<p><strong>结果重新赋值(主要针对布尔)</strong><br><strong>SELECT IF(字段名, 值1, 值2) FROM 表名;   -&gt;   一如果if中对应的字段的值是1,最后结果是值1,否则是值2(mysql特有写法)</strong></p>
<p>SELECT stuname AS ‘姓名’, IF(stugender, ‘男’, ‘女’) AS ‘性别’, stuaddr AS ‘地址’ from tb_student</p>
<p><strong>SELECT CASE 字段 WHEN 1或0 THEN 新值1 ELSE 新值2 END FROM 表名;</strong></p>
<p>SELECT stuname AS ‘姓名’, CASE stugender WHEN 1 THEN ‘男’ ELSE ‘女’ END AS ‘性别’, stuaddr AS ‘地址’ from tb_student</p>
<p><strong>列合并(查询的时候将多个字段合并成一个数据返回结果)</strong><br><strong>SELECT CONCAT(字段1,字段2,…) FROM 表名;</strong><br>SELECT CONCAT(stuname, stuid) as ‘姓名学号’ FROM tb_student;</p>
<p><strong>筛选</strong><br><strong>上面所有的查询语法的后面都可以加’where条件’对记录进行筛选</strong><br><strong>SELECT * FROM 表名 WHERE 条件;</strong><br>SELECT stuname, stutel FROM tb_student WHERE stugender=0;<br>SELECT * FROM tb_student WHERE stuname LIKE ‘月_’</p>
<p><strong>排序</strong><br><strong>SELECT * FROM 表名 ORDER BY 字段;   -&gt;   将查询结果按指定字段的值从小到大排序</strong></p>
<p>SELECT * FROM tb_student ORDER BY stuid;</p>
<p><strong>SELECT * FROM 表名 ORDER BY 字段 ASC;   -&gt;   将查询结果按指定字段的值从小到大排序</strong><br><strong>SELECT * FROM 表名 ORDER BY 字段 DESC;   -&gt;   将查询结果按指定字段的值从大到小排序</strong></p>
<p>SELECT * FROM tb_student ORDER BY stuid DESC;</p>
<p><strong>SELECT * FROM 表名 ORDER BY 字段1 DESC, 字段2 DESC;   -&gt;   将查询结果按指定字段的值从大到小排序</strong></p>
<p>SELECT * FROM tb_student ORDER BY stugender DESC, stubirth;   -&gt;   先按stugender从大到小排序;stugender相同再按stubirth从小到大排序</p>
<h2 id="5-外键约束"><a href="#5-外键约束" class="headerlink" title="5.外键约束"></a>5.外键约束</h2><p>让两个表之间产生联系</p>
<p><strong>添加外键约束的规范:</strong><br>一对一: 可以添加到任意一方;<br>一对多和多对一: 添加到多的一方;<br>多对多: 两张表没有办法直接建立多对多的对应关系,需要第三张表辅助</p>
<h2 id="6-查询中的高级查询"><a href="#6-查询中的高级查询" class="headerlink" title="6.查询中的高级查询"></a>6.查询中的高级查询</h2><h3 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h3><p><strong>SELECT DISTINCT 字段名 FROM 表名;    -&gt;   去除重复的项</strong><br><strong>SELECT DISTINCT redate FROM tb_record;</strong></p>
<h3 id="限制和分页"><a href="#限制和分页" class="headerlink" title="限制和分页"></a>限制和分页</h3><p><strong>限制: SELECT * FROM 表名 LIMIT N;   -&gt;   获取前N条数据</strong><br><strong>SELECT * FROM tb_record LIMIT 5;</strong><br><strong>偏移:</strong><br><strong>①:SELECT * FROM 表名 LIMIT M OFFSET N;   -&gt;   跳过前N条数据获取M条数据(从第N+1条数据开始,获取M条数据)</strong><br><strong>②:SELECT * FROM 表名 LIMIT N, M;   -&gt;   跳过前N条数据获取M条数据(从第N+1条数据开始,获取M条数据)</strong></p>
<h3 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h3><p><strong>max(), min(), sum(), avg(), count()   -&gt;   MySQL专用</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MAX</span>(score) <span class="keyword">AS</span> <span class="string">'最高分'</span> <span class="keyword">FROM</span> tb_record;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MIN</span>(score) <span class="keyword">AS</span> <span class="string">'最低分'</span> <span class="keyword">FROM</span> tb_record;</span><br><span class="line">SELECT SUM(score) AS '总分' FROM tb_record;   -&gt;   -- 求和所有分数的和,如果某一个记录的分数是空,那么这条记录不存与运算</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AVG</span>(score) <span class="keyword">AS</span> <span class="string">'平均分'</span> <span class="keyword">FROM</span> tb_record;  </span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(score) <span class="keyword">AS</span> <span class="string">'个数'</span> <span class="keyword">FROM</span> tb_record;</span><br></pre></td></tr></table></figure>

<h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><p><strong>SELECT 聚合操作 FROM 表名 GROUP BY (字段);   -&gt;   按指定字段的值对表进行分组,然后对每个分组进行聚合操作</strong><br><strong>注意:</strong><br><strong>①分组后,除了分组字段以外,其他字段只能聚合操作</strong><br><strong>②分组后要加条件,则用having代替where</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 获取每个学生所有学科的平局分</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">sid</span>, <span class="keyword">AVG</span>(score) <span class="keyword">FROM</span> tb_record <span class="keyword">GROUP</span> <span class="keyword">BY</span> (<span class="keyword">sid</span>);</span><br><span class="line"><span class="comment">-- 获取每个学科的平局分</span></span><br><span class="line"><span class="keyword">SELECT</span> cid, <span class="keyword">AVG</span>(score) <span class="keyword">FROM</span> tb_record <span class="keyword">GROUP</span> <span class="keyword">BY</span> (cid);</span><br><span class="line"><span class="comment">-- 获取每个学生选的课程的数量</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">sid</span>, <span class="keyword">COUNT</span>(cid) <span class="keyword">FROM</span> tb_record <span class="keyword">GROUP</span> <span class="keyword">BY</span> (<span class="keyword">sid</span>);</span><br></pre></td></tr></table></figure>

<h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p><strong>①:将一个查询的结果作为另外一个查询的条件</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 例: 获取成绩是最高分的学生的id</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">sid</span>, score <span class="keyword">FROM</span> tb_record <span class="keyword">WHERE</span> score=(<span class="keyword">SELECT</span> <span class="keyword">MAX</span>(score) <span class="keyword">FROM</span> tb_record);</span><br><span class="line"><span class="comment">-- 例: 获取分数最高的三个学生</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">sid</span> <span class="keyword">FROM</span> tb_record <span class="keyword">WHERE</span> score <span class="keyword">IN</span> (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span>(score) <span class="keyword">FROM</span> tb_record <span class="keyword">ORDER</span> <span class="keyword">BY</span> (score)<span class="keyword">DESC</span> <span class="keyword">LIMIT</span> <span class="number">3</span>);</span><br><span class="line"><span class="comment">-- 例: 获取选了两门以上的课程的学生id</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">sid</span> <span class="keyword">FROM</span> tb_record <span class="keyword">GROUP</span> <span class="keyword">BY</span> (<span class="keyword">sid</span>) <span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(cid)&gt;<span class="number">2</span>;</span><br><span class="line"><span class="comment">-- 例: 获取选了两门以上的课程的学生姓名</span></span><br><span class="line"><span class="keyword">SELECT</span> stuname <span class="keyword">FROM</span> tb_student <span class="keyword">WHERE</span> stuid <span class="keyword">IN</span> (<span class="keyword">SELECT</span> <span class="keyword">sid</span> <span class="keyword">FROM</span> tb_record <span class="keyword">GROUP</span> <span class="keyword">BY</span> (<span class="keyword">sid</span>) <span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(cid)&gt;<span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<p><strong>②:将一个查询的结果作为另外一个查询的对象</strong><br><strong>注: 若将查询结果作为查询对象,则必须在使用时用as重命名</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tb_student <span class="keyword">LIMIT</span> <span class="number">4</span>,<span class="number">5</span>;</span><br><span class="line"><span class="keyword">SELECT</span> stuname <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tb_student <span class="keyword">LIMIT</span> <span class="number">4</span>,<span class="number">5</span>) <span class="keyword">AS</span> t1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> stuname <span class="keyword">AS</span> sname, stuaddr <span class="keyword">AS</span> saddr <span class="keyword">FROM</span> tb_student <span class="keyword">WHERE</span> stusex=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">SELECT</span> sname, saddr <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> stuname <span class="keyword">AS</span> sname, stuaddr <span class="keyword">AS</span> saddr <span class="keyword">FROM</span> tb_student <span class="keyword">WHERE</span> stusex=<span class="number">0</span>) <span class="keyword">AS</span> t2 <span class="keyword">WHERE</span> saddr <span class="keyword">LIKE</span> <span class="string">'%成都'</span>;</span><br></pre></td></tr></table></figure>

<h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><h4 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h4><p><strong>①: SELECT * FROM 表名1, 表名2, … WHERE 连接条件 查询条件;</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询部门中薪水最高的人姓名、工资和所在部门名称</span></span><br><span class="line"><span class="keyword">SELECT</span> dno, <span class="keyword">MAX</span>(sal) <span class="keyword">FROM</span> tb_emp <span class="keyword">GROUP</span> <span class="keyword">BY</span>(dno);</span><br><span class="line"><span class="keyword">SELECT</span> ename, sal, dname <span class="keyword">FROM</span> tb_emp, tb_dept, (<span class="keyword">SELECT</span> dno <span class="keyword">AS</span> dno2, <span class="keyword">MAX</span>(sal) <span class="keyword">AS</span> max_sal <span class="keyword">FROM</span> tb_emp <span class="keyword">GROUP</span> <span class="keyword">BY</span>(dno)) <span class="keyword">AS</span> t2 <span class="keyword">WHERE</span> tb_emp.dno=tb_dept.dno <span class="keyword">AND</span> tb_emp.dno=t2.dno2 <span class="keyword">AND</span> sal=max_sal;</span><br></pre></td></tr></table></figure>

<p><strong>②: SELECT * FROM t1 INNER JOIN t2 ON 连接条件1 INNER JOIN t3 ON 连接条件2;(注意:如果有中间表,中间表放在最前面)</strong><br><strong>注意:如果既有连接条件又有查询条件,查询条件必须放在连接条件的后面</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询部门中薪水最高的人姓名、工资和所在部门名称</span></span><br><span class="line"><span class="keyword">SELECT</span> ename, sal, dname <span class="keyword">FROM</span> tb_emp <span class="keyword">INNER</span> <span class="keyword">JOIN</span> tb_dept <span class="keyword">ON</span> tb_emp.dno=tb_dept.dno <span class="keyword">INNER</span> <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> dno <span class="keyword">AS</span> dno2, <span class="keyword">MAX</span>(sal) <span class="keyword">AS</span> max_sal <span class="keyword">FROM</span> tb_emp <span class="keyword">GROUP</span> <span class="keyword">BY</span>(dno)) <span class="keyword">AS</span> t2 <span class="keyword">ON</span> tb_emp.dno=t2.dno2 <span class="keyword">WHERE</span> sal=max_sal;</span><br></pre></td></tr></table></figure>

<h4 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h4><p><strong>在MySQL中只支持左外连接(LEFT JOIN)和右外连接(right join)</strong></p>
<p><strong>①: 左连接: SELECT * FROM 表1 LEFT JOIN 表2 : 先将表1中的记录全部取出来,按连接条件依次连接表2中的记录,表1中的记录找不到满足条件,则表2记录那么连接的内容就是空</strong></p>
<p><strong>②: 右连接: SELECT * FROM 表1 RIGHT JOIN 表2 : 先将表2中的记录全部取出来,按连接条件依次连接表1中的记录,表2中的记录找不到满足条件,则表1记录那么连接的内容就是空</strong></p>
<h1 id="DCL-数据控制"><a href="#DCL-数据控制" class="headerlink" title="DCL(数据控制)"></a>DCL(数据控制)</h1><p>DCL主要提供授权和授权召回以及视图, 索引等相关功能</p>
<h2 id="用户管理-一般只有root账号有此权限"><a href="#用户管理-一般只有root账号有此权限" class="headerlink" title="用户管理(一般只有root账号有此权限)"></a>用户管理(一般只有root账号有此权限)</h2><p><strong>创建用户</strong><br><strong>CREATE USER ‘用户名‘@’登陆地址’;  -&gt;   创建指定用户,用户登陆时不用输入密码</strong><br><strong>CREATE USER ‘用户名‘@’登陆地址’ identified by ‘密码’;   -&gt;   创建指定用户,用户登陆时需要输入密码</strong><br>说明:<br>登录地址   -&gt;   ip地址<br>                          localhost(本机)<br>                          %(任意位置)</p>
<p><strong>删除用户</strong><br><strong>DROP USER ‘用户名’;</strong></p>
<h2 id="授权管理"><a href="#授权管理" class="headerlink" title="授权管理"></a>授权管理</h2><p><strong>授权</strong><br><strong>GRANT 权限类型 ON 数据库.表 TO ‘用户名‘@’登陆地址’;</strong></p>
<blockquote>
<p>说明:<br>权限类型: insert, delete, update, select,  create, drop, all privilege(所有权限);</p>
</blockquote>
<p><strong>召回权限</strong><br><strong>REVOKE 权限类型 ON 数据库.表 FROM 用户名;</strong></p>
<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>若完成一个任务需要多个操作,但只要有一个失败则任务不完成,数据回到任务开始前的状态;只有所有操作都成功了,数据库才更新;此时用事务语法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;   <span class="comment">-- 开启事务环境 </span></span><br><span class="line"><span class="keyword">UPDATE</span> tb_student <span class="keyword">SET</span> stubirth=<span class="string">'1993-1-1'</span> <span class="keyword">WHERE</span> stusex=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> tb_student <span class="keyword">WHERE</span> stuname <span class="keyword">LIKE</span> <span class="string">'杨%'</span></span><br><span class="line"><span class="keyword">COMMIT</span>;   <span class="comment">-- 提交事务环境中的操作结果</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br></pre></td></tr></table></figure>

<h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p><strong>创建视图:</strong><br><strong>CREATE VIEW 视图名 AS sql查询语句;</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 获取学生学科的成绩</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> vw_stu_score <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> stuid, stuname, couid, couname, score <span class="keyword">FROM</span> tb_student, tb_record, tb_course <span class="keyword">WHERE</span> tb_student.stuid=tb_record.sid <span class="keyword">AND</span> tb_course.couid=tb_record.cid;</span><br></pre></td></tr></table></figure>
<p><strong>使用视图:</strong><br><strong>(视图查询操作和表的查询操作基本一致,一般不增删改)</strong></p>
<blockquote>
<p>应用:<br>方便查询,<br>给权限不够的用户查看表内的部分信息.</p>
</blockquote>
<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>索引就像书的目录,记录了数据的位置, 可以提高查询速度;给使用频率高的字段添加索引,(主键自带唯一索引)</p>
<p><strong>添加索引:</strong><br><strong>①: CREATE INDEX 索引名 ON 表名(字段);   -&gt;   给指定字段添加索引</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tb_student <span class="keyword">WHERE</span> stuname=<span class="string">'岳不群'</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> idx_stuname <span class="keyword">ON</span> tb_student(stuname);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> idx_stuaddr <span class="keyword">ON</span> tb_student(stuaddr);</span><br></pre></td></tr></table></figure>
<p><strong>②: CREATE UNIQUE INDEX 索引名 ON 表名(字段);   -&gt;   给指定字段添加唯一索引</strong><br>注意:模糊查询的时候如果以%和_开头则索引无效</p>
<p><strong>删除索引:</strong><br><strong>ALTER TABLE 表名 DROP INDEX 索引名;   -&gt;   删除指定索引</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tb_student <span class="keyword">DROP</span> <span class="keyword">INDEX</span> idx_stuname;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tb_student <span class="keyword">DROP</span> <span class="keyword">INDEX</span> idx_stuaddr;</span><br></pre></td></tr></table></figure>








]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>数据库</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>shell编程</title>
    <url>/2019/12/23/shell%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<p>Shell脚本，是一种为shell编写的脚本程序。</p>
<a id="more"></a>


<h1 id="shell编程"><a href="#shell编程" class="headerlink" title="shell编程"></a>shell编程</h1><p>Shell脚本，是一种为shell编写的脚本程序。</p>
<p>Shell编程跟JavaScript、Python编程一样，只要有一个能编写代码的文本编辑器和一个能解释执行的脚本解释器就可以了。</p>
<p>Linux的Shell种类有很多，我们主要用的是Bourne Shell(/usr.bin/sh或/bin/sh)</p>
<h1 id="1-创建shell文件"><a href="#1-创建shell文件" class="headerlink" title="1.创建shell文件"></a>1.创建shell文件</h1><p>原则上shell程序可以写在任何文件中，但是一般会在shell文件后加后缀.sh表示当前文件是一个shell文件<br>shell需要可执行权限，所以创建好的shell文件需要添加x权限</p>
<h1 id="2-基础语法"><a href="#2-基础语法" class="headerlink" title="2.基础语法"></a>2.基础语法</h1><h2 id="1）注释"><a href="#1）注释" class="headerlink" title="1）注释"></a>1）注释</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 单行注释</span></span><br><span class="line">:&lt;&lt;EOF</span><br><span class="line">多行注释1</span><br><span class="line">多行注释2</span><br><span class="line">多行注释3</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h2 id="2）输出和输入"><a href="#2）输出和输入" class="headerlink" title="2）输出和输入"></a>2）输出和输入</h2><p>echo指令就相当于python中的print函数(默认会换行)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo  输出内容  </span><br><span class="line">echo -n 输出内容     # 输出的时候不换行</span><br></pre></td></tr></table></figure>

<p>printf指令（输出不能换行）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span> 输出内容</span><br></pre></td></tr></table></figure>

<p>输入指令:<br>read 变量名    – 输入内容，并且将输入的结果保存在变量中</p>
<h2 id="3）变量"><a href="#3）变量" class="headerlink" title="3）变量"></a>3）变量</h2><h3 id="a-声明变量的语法-变量名-值"><a href="#a-声明变量的语法-变量名-值" class="headerlink" title="a. 声明变量的语法:   变量名=值"></a>a. 声明变量的语法:   变量名=值</h3><p>说明:  a. 变量名和=, =和值之间不能有空格<br>​       b. 变量名的要求和python变量名要求一样</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">name='小明'</span><br><span class="line">age=18</span><br><span class="line">stu_name=小红</span><br></pre></td></tr></table></figure>

<h3 id="b-使用变量"><a href="#b-使用变量" class="headerlink" title="b. 使用变量:"></a>b. 使用变量:</h3><p>​         $变量<br>​         ${变量}</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">age=18</span><br><span class="line">echo $age</span><br><span class="line">age2=$&#123;age&#125;</span><br></pre></td></tr></table></figure>

<h3 id="c-只读变量"><a href="#c-只读变量" class="headerlink" title="c. 只读变量"></a>c. 只读变量</h3><p>使用 readonly 命令可以将变量定义为只读变量，只读变量的值不能被改变。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gender='男'</span><br><span class="line">readonly gender</span><br><span class="line">gender='女'     # test.sh: line 17: gender: readonly variable</span><br></pre></td></tr></table></figure>

<h3 id="d-删除变量"><a href="#d-删除变量" class="headerlink" title="d. 删除变量"></a>d. 删除变量</h3><p>使用 unset 命令可以删除变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">name='yuting'</span><br><span class="line">unset name</span><br></pre></td></tr></table></figure>

<h2 id="4）获取linux指令结果"><a href="#4）获取linux指令结果" class="headerlink" title="4）获取linux指令结果"></a>4）获取linux指令结果</h2><p>在shell脚本中可以直接写linux指令，在执行shell脚本的时候这些指令可以直接获取</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls     # ls指令</span><br><span class="line">ls  -lh      # ls指令，并且设置参数</span><br><span class="line">touch a.txt    # 创建a.txt文件</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取指令结果: 变量=$(指令)  /   变量=`指令`</span></span><br><span class="line">lsresult=$(ls)    #将ls指令的结果保存到变量lsresult中</span><br><span class="line">currnet_path=`pwd`</span><br></pre></td></tr></table></figure>



<h1 id="3-shell字符串"><a href="#3-shell字符串" class="headerlink" title="3.shell字符串"></a>3.shell字符串</h1><p>shell中的字符串可以用单引号也可以使用双引号甚至可以不用引号。但是单引号中不能出现单引号字符，加\也不行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">str1='abc'</span><br><span class="line">str2="abc"</span><br><span class="line">str3=abc</span><br><span class="line">str4='abc\n123'		#支持转义字符,但是不支持编码字符</span><br><span class="line">str5="abc\n123"</span><br><span class="line"></span><br><span class="line">age=18</span><br><span class="line">str6="年龄是$age"    #双引号里面可以出现变量,单引号不行</span><br></pre></td></tr></table></figure>

<h2 id="1）字符串拼接"><a href="#1）字符串拼接" class="headerlink" title="1）字符串拼接"></a>1）字符串拼接</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">str1="hello"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">单引号拼接</span></span><br><span class="line">str2=''$&#123;str1&#125;',world!'</span><br><span class="line">str3=''$str1',world!'</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">双引号拼接</span></span><br><span class="line">str4="$&#123;str1&#125;,world!"</span><br><span class="line">str5=""$str1",world!"</span><br></pre></td></tr></table></figure>

<h2 id="2）获取字符串长度"><a href="#2）获取字符串长度" class="headerlink" title="2）获取字符串长度"></a>2）获取字符串长度</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">str1="abcd"</span><br><span class="line">echo $&#123;#str1&#125;    # 输出4</span><br></pre></td></tr></table></figure>

<h2 id="3）字符串提取"><a href="#3）字符串提取" class="headerlink" title="3）字符串提取"></a>3）字符串提取</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 字符串:下标:个数   --从字符串中指定下标开始获取指定个数字符,返回一个新的字符串</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 字符串:下标:1   -- 获取字符串中指定下标对应的字符</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 字符串:下标     -- 从指定下标开始获取到字符串最后</span></span><br><span class="line">string='hello world'</span><br><span class="line">echo $&#123;string:1:4&#125;    # ello</span><br></pre></td></tr></table></figure>



<h1 id="4-shell数组"><a href="#4-shell数组" class="headerlink" title="4.shell数组"></a>4.shell数组</h1><p>在 Shell 中，用括号来表示数组，数组元素用”空格”符号分割开。定义数组的一般形式为：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 数组名=(元素1 元素2 元素3 ...)</span></span><br><span class="line">names=(小明 小红 大黄 Tom)</span><br><span class="line">names2=(</span><br><span class="line">'小明'</span><br><span class="line">'小红'</span><br><span class="line">'大黄'</span><br><span class="line">'Tom'</span><br><span class="line">)</span><br><span class="line">names3[0]=小明</span><br><span class="line">names3[1]=小红</span><br><span class="line">names3[2]=大黄</span><br><span class="line">names3[3]=Tom</span><br></pre></td></tr></table></figure>
<h2 id="1）获取数组元素：-数组-下标"><a href="#1）获取数组元素：-数组-下标" class="headerlink" title="1）获取数组元素：${数组[下标]}"></a>1）获取数组元素：${数组[下标]}</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo $&#123;names[1]&#125;    # 小红</span><br></pre></td></tr></table></figure>

<h2 id="2）获取数组的长度"><a href="#2）获取数组的长度" class="headerlink" title="2）获取数组的长度"></a>2）获取数组的长度</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nums=(100 200 300 400)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取数组长度</span></span><br><span class="line">length=$&#123;#nums[@]&#125;</span><br><span class="line">length=$&#123;#nums[*]&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取数组指定下标对应的元素的长度</span></span><br><span class="line">length2=$&#123;#num[n]&#125;</span><br></pre></td></tr></table></figure>



<h1 id="5-运算符"><a href="#5-运算符" class="headerlink" title="5.运算符"></a>5.运算符</h1><p>shell中支持的运算符有:  算术运算符、关系运算符、布尔运算符、字符串运算符</p>
<h2 id="1）算术运算符：-，-，-，-，"><a href="#1）算术运算符：-，-，-，-，" class="headerlink" title="1）算术运算符：+，-，*，/，%"></a>1）算术运算符：+，-，*，/，%</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 如果想要在shell完成数值运算，运算的语法:  `expr 运算表达式`; 并且运算符两边必须加空格</span></span><br><span class="line">re1=10+20</span><br><span class="line">echo $&#123;re1&#125;    # 10+20</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1.加法运算</span></span><br><span class="line">re2=`expr 10 + 20`    </span><br><span class="line">echo $&#123;re2&#125;    # 30</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.减法运算</span></span><br><span class="line">re3=`expr 10 - 20`</span><br><span class="line">echo $&#123;re3&#125;	   # -10</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3.乘法运算</span></span><br><span class="line">re4=`expr 10 \* 20`   # 注意:使用*作为乘法运算符的时候需要前面加\</span><br><span class="line">echo $&#123;re4&#125; 	# 200</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4.除法运算</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 小数除法运算: `<span class="built_in">echo</span> <span class="string">"scale=小数点位数;数值1 / 数值2"</span>|bc`</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 整数除法运算: `expr 数值1 / 数值2`</span></span><br><span class="line">re5=`echo "scale=2;7 / 3"|bc`</span><br><span class="line">echo $re5</span><br><span class="line"></span><br><span class="line">re6=`expr 5 / 2`</span><br><span class="line">echo $re6</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 5.求余数</span></span><br><span class="line">re7=`expr 10 % 3`</span><br><span class="line"></span><br><span class="line">re8=`echo "10.2 + 5.1"|bc`</span><br><span class="line">echo $re8</span><br></pre></td></tr></table></figure>

<h2 id="2）-关系运算符-比较运算符-，比较的是数字大小"><a href="#2）-关系运算符-比较运算符-，比较的是数字大小" class="headerlink" title="2） 关系运算符(比较运算符)，比较的是数字大小"></a>2） 关系运算符(比较运算符)，比较的是数字大小</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> -eq  ---  等于,相当于 ==</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -ne  ---  不等于,相当于!=</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -gt  ---  大于</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -lt  ---  小于</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -ge  ---  大于等于</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -le  ---  小于等于</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用语法: [ 值1 关系运算符 值2 ]</span></span><br><span class="line">a=100</span><br><span class="line">b=10</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 关系运算符要配合<span class="keyword">if</span>语句或者循环语句使用</span></span><br><span class="line">if [ $a -gt $b ]</span><br><span class="line">then</span><br><span class="line">	echo a大于b</span><br><span class="line">else </span><br><span class="line">	echo a不大于b</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<h2 id="3）布尔运算符-逻辑运算符"><a href="#3）布尔运算符-逻辑运算符" class="headerlink" title="3）布尔运算符(逻辑运算符)"></a>3）布尔运算符(逻辑运算符)</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> !    --  逻辑非运算</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -o   --  逻辑或运算</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -a   --  逻辑与运算</span></span><br><span class="line"></span><br><span class="line">age=18</span><br><span class="line">score=95</span><br><span class="line"><span class="meta">#</span><span class="bash"> 参加比赛的条件：分数大于90分并且年龄大于等于18岁</span></span><br><span class="line">if [ $age -ge 18 -a $score -gt 90 ]</span><br><span class="line">then</span><br><span class="line">	echo 可以参见比赛</span><br><span class="line">else</span><br><span class="line">	echo 不能参加比赛</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<h2 id="4）字符串运算符"><a href="#4）字符串运算符" class="headerlink" title="4）字符串运算符"></a>4）字符串运算符</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> [ 字符串1 = 字符串2 ]    -- 判断两个字符串是否相等</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> [ 字符串1 != 字符串2 ]   -- 不相等</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> [ -z 字符串]   -- 判断字符串长度是否为0</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> [ -n <span class="string">"字符串"</span> ]    -- 判断字符串长度是否不为0</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> [ $ 字符串 ]   -- 判断字符串是否是空串</span></span><br><span class="line"></span><br><span class="line">a="abc"</span><br><span class="line">b="123"</span><br><span class="line"></span><br><span class="line">if [ $a = $b ]</span><br><span class="line">then</span><br><span class="line">    echo a和b相等</span><br><span class="line">else</span><br><span class="line">    echo a和b不相等</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">a=""</span><br><span class="line">if [ -n "$&#123;a&#125;" ]</span><br><span class="line">then</span><br><span class="line">    echo a的长度不为0</span><br><span class="line">else</span><br><span class="line">    echo a的长度为0</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>



<h1 id="6-if语句"><a href="#6-if语句" class="headerlink" title="6. if语句"></a>6. if语句</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">语法1：</span><br><span class="line">if 条件语句</span><br><span class="line">then</span><br><span class="line">    满足条件执行的代码</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">语法2:</span><br><span class="line">if 条件语句</span><br><span class="line">then</span><br><span class="line">    满足条件执行的代码</span><br><span class="line">else</span><br><span class="line">    不满足条件执行的代码</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">语法3：</span><br><span class="line">if 条件语句1</span><br><span class="line">then </span><br><span class="line">    代码块1</span><br><span class="line">elif 条件语句2</span><br><span class="line">then</span><br><span class="line">    代码块2</span><br><span class="line">elif 条件语句3</span><br><span class="line">then </span><br><span class="line">    代码块3</span><br><span class="line">else</span><br><span class="line">    代码块N</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>



<h1 id="7-for循环"><a href="#7-for循环" class="headerlink" title="7. for循环"></a>7. for循环</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">语法:</span><br><span class="line">for 变量 in 序列</span><br><span class="line">do</span><br><span class="line">    循环体</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 遍历字符串</span></span><br><span class="line">for char in "hello word"</span><br><span class="line">do</span><br><span class="line">    echo 循环体char: $&#123;char&#125;</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 遍历数组</span></span><br><span class="line">arr1=(10 20 "abc")</span><br><span class="line">for x in $&#123;arr1[@]&#125;</span><br><span class="line">do</span><br><span class="line">    echo 循环体2x: $&#123;x&#125;</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 遍历多个值</span></span><br><span class="line">for x in 10 20 "你好" 123</span><br><span class="line">do</span><br><span class="line">    echo 循环体3：$&#123;x&#125;</span><br><span class="line">done</span><br></pre></td></tr></table></figure>



<h1 id="8-while循环"><a href="#8-while循环" class="headerlink" title="8. while循环"></a>8. while循环</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">语法:</span><br><span class="line">while 条件语句</span><br><span class="line">do</span><br><span class="line">    循环体</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 遍历字符串</span></span><br><span class="line">str1="helloWorld!"</span><br><span class="line">index=0</span><br><span class="line">len=$&#123;#str1&#125;</span><br><span class="line">while [ $index -lt $len ]</span><br><span class="line">do</span><br><span class="line">    echo $&#123;str1:$&#123;index&#125;:1&#125;</span><br><span class="line">    index=`expr $&#123;index&#125; + 1`</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 计算1+2+3+...+100</span></span><br><span class="line">num=1</span><br><span class="line">sum=0</span><br><span class="line">while [ $&#123;num&#125; -le 100 ]</span><br><span class="line">do</span><br><span class="line">    sum=`expr $&#123;sum&#125; + $&#123;num&#125;`</span><br><span class="line">    num=`expr $&#123;num&#125; + 1`</span><br><span class="line">done</span><br><span class="line">echo 1+2+3+...+100 = $&#123;sum&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 死循环</span></span><br><span class="line">while true</span><br><span class="line">do</span><br><span class="line">    read -p "请输入一个数字:" num</span><br><span class="line">    if [ $&#123;num&#125; == 100 ]</span><br><span class="line">    then</span><br><span class="line">        break</span><br><span class="line">    fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure>



<h1 id="9-函数"><a href="#9-函数" class="headerlink" title="9.函数"></a>9.函数</h1><h2 id="1）函数的声明和调用"><a href="#1）函数的声明和调用" class="headerlink" title="1）函数的声明和调用"></a>1）函数的声明和调用</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.函数的声明</span></span><br><span class="line">声明的语法：</span><br><span class="line">函数名()&#123;</span><br><span class="line">    函数体</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">调用函数语法:  函数名</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">声明函数</span></span><br><span class="line">func1()&#123;</span><br><span class="line">    echo 你好函数1</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">调用函数</span></span><br><span class="line">func1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.有参数的函数</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 声明的时候不需要形参, 直接在函数体中通过<span class="string">'$&#123;N&#125;'</span>来获取第N个实参</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 调用的时候:  函数名 实参1 实参2 实参3 ...</span></span><br><span class="line">func2()&#123;</span><br><span class="line">    echo 函数2被调用</span><br><span class="line">    echo 第一个参数: $&#123;1&#125;</span><br><span class="line">    echo 第二个参数: $&#123;2&#125;</span><br><span class="line">    echo 第三个参数: $&#123;3&#125; </span><br><span class="line">&#125;</span><br><span class="line">func2 10 20 "abc"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3.函数的返回值</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">return</span> 数字   - 数字的范围是0~255</span></span><br><span class="line">func3()&#123;</span><br><span class="line">    echo 函数3被调用</span><br><span class="line">    return 256</span><br><span class="line">    #a=`expr 100 + 200`</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func3</span><br><span class="line">echo $&#123;?&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>shell</tag>
        <tag>脚本</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>vim基础使用教程</title>
    <url>/2019/12/23/vim%E7%BC%96%E8%BE%91%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>vim日常使用</p>
<a id="more"></a>

<h1 id="1-vim的三种模式"><a href="#1-vim的三种模式" class="headerlink" title="1.vim的三种模式"></a>1.vim的三种模式</h1><ul>
<li><strong>命令模式：</strong>未尾既没有插入的字样也没有冒号（在编辑模式和末行模式下按esc键可以进入命令模式）</li>
<li><strong>编辑模式：</strong>末尾会显示’一插入一/-insert-，并且在编辑模式下可以对文件进行输入操作（可以编辑）（在命令模式下按i就可以进入编辑模式）</li>
<li><strong>未行模式：</strong>未尾显示冒号，并且冒号后边可以输入内容（在命令模式下输入冒号就可以进入未行模式）</li>
</ul>
<h1 id="2-vim的配置"><a href="#2-vim的配置" class="headerlink" title="2.vim的配置"></a>2.vim的配置</h1><p>通过编辑  etc/vimrc 文件配置</p>
<h1 id="3-基本操作"><a href="#3-基本操作" class="headerlink" title="3.基本操作"></a>3.基本操作</h1><h2 id="1-保存和退出"><a href="#1-保存和退出" class="headerlink" title="1)保存和退出"></a>1)保存和退出</h2><p><strong>所有的保存和退出都是在末行模式下进行的</strong><br>W   ——&gt;只保存(相当于ctr+s)<br>q   ——&gt;直接退出(只有当前文件的内容全部保存才能直接退出,如果不保存强制退出,需要在q加!)<br>Wq   ——&gt;先保存再退出<br>注意:强制执行在指令后加!</p>
<h2 id="2-光标操作"><a href="#2-光标操作" class="headerlink" title="2)光标操作"></a>2)光标操作</h2><p><strong>所有光标操作对应的指令都是在命令模式下执行的</strong><br>^   ——&gt;直接将光标移动到行首<br>$   ——&gt;直接将光标移动到行尾<br>G   ——&gt;移动到文件未尾<br>gg   ——&gt;移动到文件开头<br>行号G    ——&gt;移动到指定行号的位到</p>
<h2 id="3-文本操作"><a href="#3-文本操作" class="headerlink" title="3)文本操作"></a>3)文本操作</h2><p>以下指令前面如果没有冒号表示在命令模式下执行，有冒号的在未行模式下执行</p>
<p>dd   ——&gt;删除当前光标所在的行<br>数字dd   ——&gt;数字如果是N，从光标所在的位置开始删N行<br>:%d     ——&gt;末行模式下输入%d，删除所有</p>
<p>u   ——&gt;撤销<br>ctr+   r   ——&gt;反撤销</p>
<p>yy   ——&gt;复制光标所在的行<br>数字yy   ——&gt;数字如果是N,从光标所在的位置开始复制N行<br>:%y   ——&gt;未行模式下输入%y,复制所有p-粘贴<br>p   ——&gt;粘贴<br>P   ——&gt;粘贴到上一行</p>
<h2 id="4-查找和替换"><a href="#4-查找和替换" class="headerlink" title="4)查找和替换"></a>4)查找和替换</h2><p><strong>: /正则表达式</strong>——&gt;查找当前文件中符合正则表达式的内容(结果可以用n和N来切换)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim中正则表达式的要求:</span><br><span class="line">1)python正则中所有的语法都有效</span><br><span class="line">2)单独使用有特殊功能的符号，在使用的时候需要加\才有效</span><br><span class="line">r'\d+'    -&gt;  /\d\+</span><br><span class="line">r'\d&#123;3&#125;'  -&gt;  /\d\&#123;3&#125;</span><br><span class="line">r'and|or' -&gt;  /and\|or</span><br></pre></td></tr></table></figure>

<p><strong>:1,$s/被替换的对象对应的正则/替换内容/参数</strong>——&gt;将文件中正则匹配到的内容替换成指定内容</p>
<blockquote>
<p>参数:<br>g——&gt;全局匹配(会替换所有符合要求的字符串,默认情况下一行只替换一个)<br>i——&gt;匹配的时候忽略大小写<br>c——&gt;替换的时候给出提示<br>e——&gt;忽略错误(忽略正则的错)</p>
</blockquote>
<h1 id="4高级操作"><a href="#4高级操作" class="headerlink" title="4高级操作"></a>4高级操作</h1><h2 id="1-比较文件"><a href="#1-比较文件" class="headerlink" title="1)比较文件"></a>1)比较文件</h2><p><strong>vim -d  文件路径1  文件路径2</strong></p>
<h2 id="2-同时打开多个文件"><a href="#2-同时打开多个文件" class="headerlink" title="2)同时打开多个文件"></a>2)同时打开多个文件</h2><p><strong>vim  文件路径  文件路径 …</strong></p>
<blockquote>
<p>1.切换窗口内容<br>在末行模式下输入:<strong>ls</strong>——&gt;可以查看当前打开的所有的文件和文件对象的标号在末行模式下输入:<strong>b标号</strong>——&gt;可以将当前窗口中的内容切换到指定标号对应的文件的内容</p>
<p>2.窗口的拆分<br>在未行模式下输入:<strong>sp/vs</strong>——&gt;可以将当前窗口垂直方向/水平方向进行拆分;拆分后可以在命令模式下按<strong>ctr+w</strong>来切换窗口</p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>Linux</tag>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>git常用指令</title>
    <url>/2019/12/22/git%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<p>git的基本常用指令集</p>
<a id="more"></a>
<h1 id="1-基本指令"><a href="#1-基本指令" class="headerlink" title="1.基本指令"></a>1.基本指令</h1><p>git init        ——&gt;新建git仓库<br>git add 文件/文件夹       ——&gt;  将文件添加到缓存区中<br>git add -A   ——&gt;  添加所有内容到缓存区中</p>
<p>git status      ——&gt;    查看git状态<br>git commit -m  ‘提交信息’       ——&gt;  将缓存区中的内容全部提交到git本地仓库中<br>git log        ——&gt; 查看提交日志 </p>
<p>git reset  – hard   HEAD       ——&gt;   让工作目录中的内容和仓库中的内容保持一致<br>git reset  –hard HEAD^  ——&gt;  回到上一个版本<br>git  reset  – hard 版本号  ——&gt;  回到指定的版本 </p>
<p>git checkout  文件名   ——&gt;  从暂存区中恢复工作目录中的内容(让工作区中的指定文件，回到上次提交的时候的状态) </p>
<p>git clone <url>    ——&gt;  将服务器上的项目(仓库)克隆 (使用https地址需要输入密码，使用ssh地址需要添加公钥) </p>
<p>git remote add origin 地址    ——&gt;  关联远程仓库(只需要关联一次)</p>
<p>git push [-u] origin master   ——&gt;  提交(-u在第一次提交分支的时候才用) </p>
<p>git push   ——&gt;  将本地仓库的内容提交到远程仓库master分支上</p>
<p>git push origin 分支名     ——&gt;  将本地仓库的内容提交到远程仓库对应的分支上, 如果分支不存在会自动创建</p>
<p>git pull   ——&gt;  将远程仓库中的内容更新到本地仓库和工作区中</p>
<h1 id="2-分之管理"><a href="#2-分之管理" class="headerlink" title="2.分之管理"></a>2.分之管理</h1><p>创建仓库会默认给我们创建一个master分之,这个分之一般作为提交和发布分之;开发一般会自己创建一个develop分之，用来开发和测试;多人协作的时候还可能根据不同的人或者(不同的功能)创建不同的分之，用来独立开发 </p>
<p>常见分之： master(主要是合并develop), develop(主要合并下面的其他分支), 功能/人员分之(开发)  </p>
<p>git branch [-a]   ——&gt;查看分之<br>git branch 分之名——&gt;创建分之<br>git checkout   分支名——&gt;  切换分之<br>git checkout -b 分之名    ——&gt;切换并创建新的分之<br>git diff  分之1  分之2——&gt;查看两个分之之间的差异<br>git merge 分之名——&gt;让当前分之和指定分之进行合并</p>
<p>注意: 切换分之、push、pull，这些操作前要保证工作区是clean<br>怎么避免冲突：  不要发生多个分之对同一个文件在同一个版本下进行修改(和同伴确认和商量)</p>
]]></content>
      <categories>
        <category>技术文档</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>指令</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux常用指令</title>
    <url>/2019/12/22/Linux%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<p>Linux常用指令集</p>
<a id="more"></a>

<h1 id="1-cd指令-进入文件夹"><a href="#1-cd指令-进入文件夹" class="headerlink" title="1. cd指令  -  进入文件夹"></a>1. cd指令  -  进入文件夹</h1><p><strong>cd</strong>   ——&gt;文件夹路径（路径可以是绝对地址也可以是相对地址）-进入到指定路径对应的文件夹<br><strong>cd  ..</strong>  ——&gt;返回上层目录<br><strong>cd  /</strong>   ——&gt;进入系统根目录<br><strong>cd  ~</strong>  ——&gt;进入电脑根目录</p>
<h1 id="2-ls指令-显示当前目录中的内容"><a href="#2-ls指令-显示当前目录中的内容" class="headerlink" title="2. ls指令  -  显示当前目录中的内容"></a>2. ls指令  -  显示当前目录中的内容</h1><p><strong>ls</strong>   ——&gt;直接显示当前文件夹中的内容的名字（隐藏文件和文件夹`        看不到）<br><strong>ls  -l</strong>   ——&gt;直接显示当前文件夹中的内容的名字（隐藏文件和文件夹看不到）<br><strong>ls  -lh</strong>   ——&gt;显示当前文件夹中的内容和内容的基本信息（隐藏文件和文件夹看不到）<br><strong>ls  -a</strong>   ——&gt;显示当前文件夹中所有的内容（包括隐藏文件）<br><strong>ls  -R</strong>   ——&gt;递归显示当前目录以及当前目录下所有的子目录中的内容<br><strong>ls  -r</strong>   ——&gt;内容倒序显示<br><strong>ls  -S/-t</strong>  ——&gt;显示文件夹中的内容，并且内容按大小/时间从大到小排序<br><strong>ls  -Sr</strong>   ——&gt;按文件大小从小到大排序<br><strong>ls  -Srlh</strong>   ——&gt;按文件大小从小到大排序，并且显示内容的基本信息</p>
<h1 id="3-pwd指令"><a href="#3-pwd指令" class="headerlink" title="3. pwd指令"></a>3. pwd指令</h1><p><strong>pwd</strong>   ——&gt;查看当前目录的绝对路径</p>
<h1 id="4-文件操作"><a href="#4-文件操作" class="headerlink" title="4.文件操作"></a>4.文件操作</h1><h2 id="1-touch指令-新建文件"><a href="#1-touch指令-新建文件" class="headerlink" title="1)touch指令  新建文件"></a>1)touch指令  新建文件</h2><p><strong>touch 文件路径文件名</strong>——&gt;在指定位置创建指定文件</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">touch <span class="keyword">a</span>.txt-在当前目录下新建一个文件<span class="keyword">a</span>.txt</span><br><span class="line">touch ../<span class="keyword">a</span>.txt   <span class="comment">------&gt;在当前目录的上层目录新建一个文件a.txt</span></span><br><span class="line">touch /home/<span class="keyword">a</span>/<span class="keyword">a</span>.txt   <span class="comment">------&gt;在根目录下home目录中的a目录里面创建一个文件a.txtl</span></span><br></pre></td></tr></table></figure>
<h2 id="2-cat指令-查看文件内容-读文件"><a href="#2-cat指令-查看文件内容-读文件" class="headerlink" title="2)cat指令  查看文件内容(读文件)"></a>2)cat指令  查看文件内容(读文件)</h2><p><strong>cat 文件路径文件名</strong>   ——&gt;读取指定路径对应的文件的内容</p>
<h2 id="3-vim指令"><a href="#3-vim指令" class="headerlink" title="3)vim指令"></a>3)vim指令</h2><p><strong>vim 文件路径文件名</strong>   ——&gt;使用vim打开文件</p>
<h1 id="5-文件操作"><a href="#5-文件操作" class="headerlink" title="5.文件操作"></a>5.文件操作</h1><p><strong>mkdir  新文件夹路径文件夹名</strong>   ——&gt;在指定位置创建文件夹,若没有会报错<br><strong>mkdir  -p  新文件夹路径文件夹名</strong>   ——&gt;在指定路径创建指定文件夹,若没有就创建<br><strong>mkdir -p  a/{b,c,…}/{d,e,f,g,…}</strong>   ——&gt;在当前位置创建a,在a内创建多个文件夹,在多个文件夹内再创建多个相同的文件夹</p>
<h1 id="6-删除文件和文件夹"><a href="#6-删除文件和文件夹" class="headerlink" title="6.删除文件和文件夹"></a>6.删除文件和文件夹</h1><h2 id="1-rm指令-删除文件和文件夹"><a href="#1-rm指令-删除文件和文件夹" class="headerlink" title="1)rm指令  删除文件和文件夹"></a>1)rm指令  删除文件和文件夹</h2><p><strong>rm 文件路径文件名</strong>   ——&gt;删除指定文件（删除的时候会循环是否确定删除，y-同意，n-不同意）<br><strong>rm  -f  文件路径文件名</strong>   ——&gt;删除指定文件（删除的时候不询问）<br><strong>rm  -r  文件夹路径文件夹名</strong>   ——&gt;删除指定文件夹</p>
<h2 id="2-rmdir指令-删除空文件夹"><a href="#2-rmdir指令-删除空文件夹" class="headerlink" title="2)rmdir指令  删除空文件夹"></a>2)rmdir指令  删除空文件夹</h2><p><strong>rmdir 文件夹路径</strong>——&gt;删除空文件夹</p>
<h1 id="7拷贝和移动"><a href="#7拷贝和移动" class="headerlink" title="7拷贝和移动"></a>7拷贝和移动</h1><h2 id="1-拷贝"><a href="#1-拷贝" class="headerlink" title="1)拷贝"></a>1)拷贝</h2><p><strong>cp 文件路径1 文件路径2</strong>——&gt;将文件1中的内容复制粘贴到文件2（如果文件2不存，会自动创建；如果存在会询问是否覆盖）<br><strong>cp 文件路径 文件夹路径</strong>——&gt;将指定文件复制粘贴到指定文件夹中<br><strong>cp -r 文件夹路径1 文件夹路径2</strong>——&gt;将文件夹1复制粘贴到文件夹2中</p>
<h2 id="2-移动"><a href="#2-移动" class="headerlink" title="2)移动"></a>2)移动</h2><p><strong>mv 文件路径1 文件路径2</strong>   ——&gt;将文件1移动到文件2所在的位置<br><strong>mv 文件名1 文件名2 **  ——&gt;将文件1重命名为文件2(若两个文件同时存在同一文件夹中,则重命名后文件2会被删除,文件1会被重命名)<br>**mv 文件路径 文件夹路径</strong>   ——&gt;将文件直接移动到指定文件夹中<br>*<em>mv 文件夹路径1 文件夹路径2 *</em>  ——&gt;将文件夹1移动到文件夹2中</p>
<h1 id="8获取指令的历史记录"><a href="#8获取指令的历史记录" class="headerlink" title="8获取指令的历史记录"></a>8获取指令的历史记录</h1><p><strong>history</strong>   ——&gt;显示当前系统已经执行过的所有指令</p>
<blockquote>
<p>如果想要显示历史记录的时候显示指令执行的时间需要修改~/.bashrc文件：<br>export HISTTIMEFORMAT=”[%y-%m-%d_%T%M%S]”<br>修改完成后需要通过指令：source ~/.bashrc去执行这个配置文件，最后历史记录的时间才会生效</p>
</blockquote>
<h1 id="9创建链接"><a href="#9创建链接" class="headerlink" title="9创建链接"></a>9创建链接</h1><h2 id="1-创建软链接"><a href="#1-创建软链接" class="headerlink" title="1)创建软链接"></a>1)创建软链接</h2><p><strong>ln -s 源文件路径  入口文件位置</strong>    ——&gt; 给源文件在指定位置创建一个软链接(软连接本质就是用来保存源文件绝对地址的一个文件)</p>
<blockquote>
<p>注:源文件路径必须是绝对路径,如果删除或者移动源文件，软连接会直接无效</p>
</blockquote>
<h2 id="2-创建硬链接"><a href="#2-创建硬链接" class="headerlink" title="2)创建硬链接"></a>2)创建硬链接</h2><p><strong>ln 源文件路径  硬连接文件地址</strong>   —–&gt;给源文件在指定位置创建一个硬链接硬链接的本质就是源文件内容的另外一个引用(相当于文件的另一个文件名)，所以删除或者移动源文件硬链接仍然有效，只是删除硬链接会变成普通文件</p>
<h1 id="10进程相关指令"><a href="#10进程相关指令" class="headerlink" title="10进程相关指令"></a>10进程相关指令</h1><h2 id="1-ps指令"><a href="#1-ps指令" class="headerlink" title="1)ps指令"></a>1)ps指令</h2><p><strong>ps</strong>   ——&gt;查看当前进程状态<br><strong>ps -aux</strong>   ——&gt;查看当前进程所有状态<br><strong>ps grep  进程名/id</strong>   ——&gt;根据进程名/进程ID查看指定进程</p>
<h2 id="2-top指令"><a href="#2-top指令" class="headerlink" title="2)top指令"></a>2)top指令</h2><p><strong>top</strong>  ——&gt;实时查看当前所有的进程信息和系统信息<br><strong>top -p PID1,PID2,…</strong>   ——&gt;实时监测指定的进程</p>
<h2 id="3-free指令"><a href="#3-free指令" class="headerlink" title="3)free指令"></a>3)free指令</h2><p><strong>free</strong>   ——&gt;显示当前系统的内存信息，显示的时候以kb为单位<br><strong>free  -单位</strong>   ——&gt;显示当前系统的内存信息，以指定单位来显示</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">free</span> -m    - 显示当前系统的内存信息，以Mb为单位</span><br></pre></td></tr></table></figure>

<h2 id="4-kill指令"><a href="#4-kill指令" class="headerlink" title="4)kill指令"></a>4)kill指令</h2><p><strong>kill 进程ID</strong>   ——&gt;杀掉指定ID对应的进程<br>kill -1/-9/-15进程ID   ——&gt;以指定的方式杀掉进程(-1表示不间断重启；-9表示强制杀死进程；-15表示正常结束进程)<br><strong>pkill  进程名</strong>   ——&gt;杀死指定进程名对应的进程（中间可以加-1/-9/-15）<br><strong>killall  进程名</strong>   ——&gt;杀死和进程名相关的所有进程</p>
<h2 id="5-uptime指令"><a href="#5-uptime指令" class="headerlink" title="5)uptime指令"></a>5)uptime指令</h2><p><strong>uptime</strong>   ——&gt;查看系统的基本信息(启动时间等)</p>
<h1 id="11用户管理"><a href="#11用户管理" class="headerlink" title="11用户管理"></a>11用户管理</h1><p>一个Linux操作系统可以有多个用户（user），也可以有多个用户组（group）；<br><strong>users</strong>   ——&gt;查看当前用户<br><strong>groups</strong>   ——&gt;查看当前分组<br><strong>groupadd  分组名</strong>   ——&gt;创建分组(管理员才能创建;可以通过查看/etc/group文件来查看当前系统所有的分组)<br><strong>useradd  用户名</strong>    ——&gt;创建指定用户(1.用户创建成功后系统会自动在/home目录下创建一个和用户名同名的文件夹;2.会自动创建和用户名同名的分组,并且将当前用户添加到这个分组中)<br><strong>useradd  -G  分组1,分组2…   用户名</strong>  ——&gt;创建指定用户,并且将用户添加到指定分组<br><strong>usermod  -G  分组1,分组2   用户名</strong>——&gt;修改用户分组<br><strong>password  用户名</strong>   ——&gt;修改用户密码(需要root权限)<br><strong>su  用户名</strong>   ——&gt;切换账号(root登录的时候切换不需要密码)<br><strong>exit</strong>   ——&gt;退出当前账号</p>
<p>sudo  -在命令前sudo是以管理员身份执行指令<br>注意：不是所有的用户都可以通过sudo来以管理员身份执行指令，如果想要能够使用sudo必须添加配置<br>  ①.  ubuntu：将需要有管理员身份的账号添加到sudo分组中<br>  ②.  redhat和contos：在/etc/sudoers配置文件中添加代码：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Allow root to run any commands anywhere</span></span><br><span class="line"><span class="attribute">root</span> <span class="literal">ALL</span>=（<span class="literal">ALL</span>）<span class="literal">ALL</span>#（默认有的）</span><br><span class="line"><span class="attribute">xiaoming</span> <span class="literal">ALL</span>=（<span class="literal">ALL</span>）<span class="literal">ALL</span>#（自己添加的，xiaoming是用户名）</span><br></pre></td></tr></table></figure>

<h1 id="12文件权限"><a href="#12文件权限" class="headerlink" title="12文件权限"></a>12文件权限</h1><p>默认情况下文件和文件夹的权限:文件所有者有读写权限,同组用户和其他用户都是只读权限.</p>
<table>
<thead>
<tr>
<th>文件类型</th>
<th>所有者权限</th>
<th>同组用户权限</th>
<th>其他用户权限</th>
</tr>
</thead>
<tbody><tr>
<td>d（目录）</td>
<td>rwx</td>
<td>r–</td>
<td>—</td>
</tr>
<tr>
<td>-（文件）</td>
<td>rwx</td>
<td>r–</td>
<td>—</td>
</tr>
<tr>
<td>l（连接）</td>
<td>rwx</td>
<td>r–</td>
<td>—</td>
</tr>
</tbody></table>
<p><strong>chmod  权限值  文件路径</strong>   ——&gt;将指定文件的权限修改成指定值<br><strong>chmod  [a,u,g,o]/[+-]/[r,w,x] 文件地址</strong>   ——&gt;给指定文件对应指定用户添加或者删除指定权限(a-所有用户,u-文件所有者,g-同组用户,o-其他用户;+表示添加权限,表示删除权限;r-表示读权限,w表示写权限,x表示执行权限)</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">chmod</span> a-<span class="keyword">x</span> 文件地址  <span class="comment">#删除所有用户的执行权限</span></span><br><span class="line"><span class="keyword">chmod</span> u+w 文件地址  <span class="comment">#给文件所有者添加写的权限</span></span><br></pre></td></tr></table></figure>

<h1 id="13日志管理"><a href="#13日志管理" class="headerlink" title="13日志管理"></a>13日志管理</h1><h2 id="1-查看文件"><a href="#1-查看文件" class="headerlink" title="1)查看文件"></a>1)查看文件</h2><p><strong>cat 文件</strong>   ——&gt;直接查看文件所有内容(查看文件内容的时候可以加参数-n，让内容在显示的时候显示行号)</p>
<p><strong>head  -N 文件地址文件名</strong>   ——&gt;显示指定文件前N行内容<br><strong>tail -N 文件地址文件名</strong>   ——&gt;显示指定文件后N行内容</p>
<p><strong>less  文件</strong>   ——&gt;按页显示文件内容(通过快捷键控制内容显示过程;文件内容不会打印到shel/终端里)<br><strong>less -N 文件</strong>   ——&gt;按页显示文件内容,每次翻页的时候翻N行<br><strong>more 文件</strong>   ——&gt;按页显示文件内容(通过快捷键控制内容显示过程;文件内容会打印到shell/终端里)<br><strong>more -N 文件</strong>   ——&gt;按页显示文件内容,每次翻页的时候翻N行</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">快捷键:</span><br><span class="line">按<span class="keyword">j向下一行</span></span><br><span class="line"><span class="keyword">按k向上一行</span></span><br><span class="line"><span class="keyword">按f向下翻一页</span></span><br><span class="line"><span class="keyword">按b向上翻一页</span></span><br><span class="line"><span class="keyword">按g到全文开头</span></span><br><span class="line"><span class="keyword">按G到全文结尾</span></span><br><span class="line"><span class="keyword">按Q退出</span></span><br></pre></td></tr></table></figure>

<h2 id="2-文件处理"><a href="#2-文件处理" class="headerlink" title="2)文件处理"></a>2)文件处理</h2><p>凡是有的打印结果的指令,我们都可以通过相关指令对应结果进行处理<br>如果需要对某一个指令的结果使用另外的指令进行二次处理的时候，就需要用到<strong>管道 |</strong></p>
<p><strong>sort-排序</strong><br>sort   ——&gt;从小到大排序(将一行内容作为一个字符串,按字符串大小对应内容进行排序,默认不区分大小写)</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">cat <span class="keyword">a</span>.txt | <span class="built_in">sort</span>   <span class="comment">------&gt;对a.txt的文件内容从小到大排序显示</span></span><br><span class="line"></span><br><span class="line">参数:</span><br><span class="line">-r  <span class="comment">------&gt; 逆序</span></span><br><span class="line">-nk <span class="number">1</span>  <span class="comment">------&gt;数值大小排序</span></span><br><span class="line">-nk <span class="number">2</span>  <span class="comment">------&gt;字符大小排序(默认)</span></span><br><span class="line">cat <span class="keyword">a</span>.txt|<span class="built_in">sort</span> -nk <span class="number">1</span>  <span class="comment">------&gt;对a.txt的文件内容按数字大小从小到大排序</span></span><br><span class="line">cat <span class="keyword">a</span>.txt|<span class="built_in">sort</span> -rnk <span class="number">1</span>  <span class="comment">------&gt;对a.txt的文件内容按数字大小从大到小排序</span></span><br><span class="line">cat <span class="keyword">a</span>.txt|<span class="built_in">sort</span> -nk <span class="number">2</span>  <span class="comment">------&gt;对a.txt的文件内容按字符大小从小到大排序(默)</span></span><br><span class="line">cat <span class="keyword">a</span>.txt|<span class="built_in">sort</span> -rnk <span class="number">2</span>  <span class="comment">------&gt;对a.txt的文件内容按字符大小从大到小排序</span></span><br></pre></td></tr></table></figure>

<p><strong>uniq-去重</strong><br>uniq   ——&gt;只能将紧挨着的相同行去掉重复的(如果需要去掉所有重复的行,先排序将相同的行放到一起)</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">cat <span class="keyword">a</span>.txt | unkq   <span class="comment">------&gt;去掉a.txt文件内容中相邻重复的行</span></span><br><span class="line">cat <span class="keyword">a</span>.txt | sortluniq   <span class="comment">------&gt;去掉a.txt文件内容中所有重复的行</span></span><br><span class="line">-c   <span class="comment">------&gt;重复欠数</span></span><br></pre></td></tr></table></figure>

<p><strong>awk-获取列</strong><br>awk ‘{print $N}’   ——&gt;获取内容中第N列的数据</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">historylawk '&#123;print $<span class="number">2</span>&#125;'------&gt;获取历史记录第<span class="number">2</span>列的内容</span><br><span class="line">historylawk'&#123;print $<span class="number">2</span>,$<span class="number">3</span>&#125;'------&gt;获取历史记录第<span class="number">2</span>列和第<span class="number">3</span>列的内容</span><br></pre></td></tr></table></figure>

<blockquote>
<p>练习:<br>history | awk ‘{print $4}’|sort|uniq -c|sort -rnk 1|head -5<br>显示最常用的指令和使用次数</p>
</blockquote>
<h2 id="3-输出重定向"><a href="#3-输出重定向" class="headerlink" title="3)输出重定向"></a>3)输出重定向</h2><p><strong>执行有打印结果的指令  &gt;  文件地址</strong>   ——&gt;将指定指令执行的结果保存到指定文件中(先清除原文件内容再添加)<br><strong>执行有打印结果的指令  &gt;&gt;  文件地址</strong>   ——&gt;将指定指令执行的结果保存到指定文件中(直接将结果追加到原文件中)</p>
<blockquote>
<p>history &gt; a.txt   ——&gt;将当前历史记录直接保存到a.txt文件中</p>
<p>将最常用的3个指令及其使用次数保存到a.txt文件中<br>history l awk’{print $4}’lsort luniq-c I sort-rnk 1 I head-n3&gt;a.txt</p>
</blockquote>
<h2 id="4-统计"><a href="#4-统计" class="headerlink" title="4)统计"></a>4)统计</h2><p>wc   -c/-w/-l  文件地址   ——&gt;统计指定文件中字符/单词/行的数量</p>
<h2 id="5-查找"><a href="#5-查找" class="headerlink" title="5)查找"></a>5)查找</h2><ul>
<li><strong>查找文件内容  grep</strong></li>
</ul>
<p>①:  <strong>grep  内容  文件地址文件名</strong>   ——&gt;在指定文件中查找指定内容(返回文件中所有包含指定内容的行)</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">grep you <span class="keyword">a</span>.txt  <span class="comment">------&gt;获取a.txt中包含you的所有的行</span></span><br><span class="line"></span><br><span class="line">grep的参数:</span><br><span class="line">-n  <span class="comment">------&gt;显示结果的时候显示行号</span></span><br><span class="line">-i  <span class="comment">------&gt;查找内容的时候忽略大小写</span></span><br><span class="line">-E  <span class="comment">------&gt;按正则表达式进行匹配</span></span><br><span class="line">		 使用方法: grep -E <span class="string">'正则表达式'</span> 文件</span><br><span class="line">注意:Linux操作系统中正则表达式不支持:\d,\D,\w,\w,\s,\S,\b,\B;其他语法都支持</span><br><span class="line">-v  <span class="comment">------&gt;忽略字段</span></span><br><span class="line">         grep you <span class="keyword">a</span>.txt-v<span class="comment">------&gt;获取a.txt中不包含you的所有的行</span></span><br></pre></td></tr></table></figure>

<p>②:  <strong>执行有打印结果的指令  |</strong><br>  *<em>grep 内容 *</em>  ——&gt;在指令执行结果中查找指定内容</p>
<p>③:  <strong>grep  -r  内容  文件夹地址</strong>   ——&gt;在指定文件夹中所有的文件内容中查找指定内容</p>
<ul>
<li><strong>查找文件名   find</strong></li>
</ul>
<p>①:  <strong>find  文件夹路径  -name  文件名</strong>   ——&gt;在指定文件夹下按文件名找指定文件</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">找指定文件名</span><br><span class="line"><span class="builtin-name">find</span> dirl -name <span class="string">'test1.py'</span>  #在文件夹dir1找名字是test1.py的文件</span><br><span class="line"><span class="builtin-name">find</span> dirl -name <span class="string">'*.txt'</span>  #在文件夹dir1找后缀是txt的所有文件</span><br><span class="line"><span class="builtin-name">find</span> dirl -name <span class="string">' test*. txt'</span></span><br><span class="line"><span class="builtin-name">find</span> dirl -name <span class="string">' test*'</span></span><br><span class="line"><span class="builtin-name">find</span> dirl -name <span class="string">'*c. txt'</span></span><br></pre></td></tr></table></figure>

<p>②:  <strong>find  文件夹路径  -size  +/-文件大小</strong>   ——&gt;在指定文件夹下找文件大小满足条件的所有的文件</p>
<figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line"><span class="built_in">find</span> dirl -<span class="built_in">size</span> +<span class="number">4</span>k------&gt;查找在文件夹dir1中所有大于<span class="number">4</span>k的文件</span><br><span class="line"><span class="built_in">find</span> dirl -<span class="built_in">size</span> -<span class="number">4</span>k------&gt;查找在文件夹dir1中所有小于<span class="number">4</span>k的文件</span><br><span class="line"><span class="built_in">find</span> dirl -<span class="built_in">size</span> +<span class="number">5</span>k -<span class="built_in">size</span> -<span class="number">10</span>k ------&gt;查找在文件夹dir1中所有大于<span class="number">5</span>k并且小于<span class="number">10</span>k的文件(文件大小如果是小数,算</span><br><span class="line">的时候向上取整)</span><br><span class="line"><span class="built_in">find</span> dirl -<span class="built_in">size</span> +<span class="number">4</span>k -<span class="built_in">name</span> <span class="string">'*.txt'</span>------&gt;查找在文件夹dir1中所有大于<span class="number">4</span>k的txt文件</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>查指令</strong></li>
</ul>
<p><strong>which 指令名</strong>    ——&gt;精确查找当前指令对应的文件的路径<br><strong>whereis  指令名</strong>   ——&gt;查找和指定指令相关的所有的文件的路径<br><strong>man  指令名</strong>   ——&gt;获取指定指定的使用手册<br><strong>指令名  –help</strong>   ——&gt;获取指定指令的帮助文档</p>
<h1 id="14网络管理"><a href="#14网络管理" class="headerlink" title="14网络管理"></a>14网络管理</h1><p><strong>ifconfig</strong>   ——&gt;查看网卡状态<br><strong>netstat  -natp</strong>   ——&gt;查看网络连接状态<br><strong>netstat  -natp | grep</strong>  端口号   ——&gt;查看指定端口的网络连接状态</p>
<p><strong>ping ip地址</strong>   ——&gt;给指定地址的服务器发送数据(主要用来检测当前网络通不通)<br><strong>ping  -i  时间(秒)  IP地址</strong>   ——&gt;每隔指定时间ping一次（时间可以是小数）<br><strong>ping  -c  次数  IP地址</strong>   ——&gt;ping指定次数(不限制次数的时候会不断的ping)</p>
<p><strong>wget 地址</strong>——&gt;下载</p>
<h1 id="15压缩和归档"><a href="#15压缩和归档" class="headerlink" title="15压缩和归档"></a>15压缩和归档</h1><p>压缩可以让文件变小,一般在需要传输前都会先对文件进行压缩.注意,压缩指令只针对文件有效,并且一次只能压缩一个文件.<br>归档可以将一个文件夹变成一个文件(tar文件)</p>
<h2 id="1-归档和解归档"><a href="#1-归档和解归档" class="headerlink" title="1)归档和解归档"></a>1)归档和解归档</h2><p><strong>tar  -cvf  归档后文件存放的地址(归档后的文件名)  需要归档的文件</strong>   ——&gt;将文件进行归档操作(既可以对文件进行归档也可以对文件夹归档)<br><strong>tar -xvf  归档文件地址</strong>   ——&gt;将指定的归档文件解归档</p>
<h2 id="2-压缩和解压缩"><a href="#2-压缩和解压缩" class="headerlink" title="2)压缩和解压缩"></a>2)压缩和解压缩</h2><p><strong>gzip  文件地址   *<em>——&gt;压缩指定文件(压缩后会生成一个gz文件,并且会删除原文件)<br>*</em>gzip  -c  需要压缩的文件地址文件名  &gt;  压缩文件地址</strong>   ——&gt;将指定文件压缩到指定位置,并且保留原文件<br><strong>gzip  -d  压缩文件地址</strong>   ——&gt;解压指定文件(解压完成后会删除原压缩文件)<br><strong>gzip  -l   压缩文件地址</strong>   ——&gt;列出压缩文件中的内容</p>
<p><strong>xz 文件地址</strong>   ——&gt;压缩指定文件(压缩文件后缀是xz)<br><strong>xz  -d  压缩文件地址</strong>   ——&gt;解压指定文件</p>
<p><strong>gunzip  压缩文件地址</strong>    ——&gt;解压指定文件(解压完成后会删除原压缩文件)</p>
<h1 id="16包管理工具-软件安装"><a href="#16包管理工具-软件安装" class="headerlink" title="16包管理工具(软件安装)"></a>16包管理工具(软件安装)</h1><p>包管理工具: yum</p>
<ul>
<li>yum search: 搜索软件包,例如yum search nginx.</li>
<li>yun list installed:列出已经安装的软件包,例如yum list installed I grep z1ib.</li>
<li>yum instal1:安装软件包,例如yum insta11 nginx.</li>
<li>yum remove:删除软件包,例如yum remove nginx.</li>
<li>yum update:更新软件包,例如yum update可以更新所有软件包,而yum update tar只会更新tar.</li>
<li>yum check-update:检查有哪些可以更新的软件包.</li>
<li>yum info:显示软件包的相关信息,例如yum info nginx.</li>
</ul>
<p>源代码构建安装软件:</p>
<ol>
<li>wget  安装包的路径        -下载安装包</li>
<li>gunzip/tar  压缩包         - 解压、解归档</li>
<li>(设置安装路径)</li>
<li>cd 安装包目录 执行: make &amp;&amp; make install       -编译安装包程序</li>
<li>给可执行文件添加软连接到usr/bin目录下            -添加快捷方式</li>
</ol>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="meta">#源代码构建python3.x</span></span><br><span class="line"></span><br><span class="line">[<span class="meta">root ~</span>]<span class="meta"># yum install gcc     (安装编译环境)</span></span><br><span class="line">[<span class="meta">root ~</span>]<span class="meta"># wget https://www.python.org/ftp/python/3.6.5/Python-3.6.5.tgz    (下载安装包)</span></span><br><span class="line">[<span class="meta">root ~</span>]<span class="meta"># gunzip Python-3.6.5.tgz     (解压)</span></span><br><span class="line">[<span class="meta">root ~</span>]<span class="meta"># tar -xvf Python-3.6.5.tar    (解归档)</span></span><br><span class="line">[<span class="meta">root ~</span>]<span class="meta"># cd Python-3.6.5            (进入安装包)</span></span><br><span class="line">[<span class="meta">root ~</span>]<span class="meta"># ./configure --prefix=/usr/local/python36 --enable-optimizations   (设置安装路径)</span></span><br><span class="line">[<span class="meta">root ~</span>]<span class="meta"># yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel    (安装相关依赖库)</span></span><br><span class="line">[<span class="meta">root ~</span>]<span class="meta"># make &amp;&amp; make install       (编译执行安装文件)</span></span><br><span class="line">...</span><br><span class="line">[<span class="meta">root ~</span>]<span class="meta"># ln -s /usr/local/python36/bin/python3.6 /usr/bin/python3      (给python指令文件创建快捷方式python3)</span></span><br><span class="line">[<span class="meta">root ~</span>]<span class="meta"># python3 --version</span></span><br><span class="line">Python <span class="number">3.6</span><span class="number">.5</span></span><br><span class="line">[<span class="meta">root ~</span>]<span class="meta"># python3 -m pip install -U pip     (安装pip)</span></span><br><span class="line">[<span class="meta">root ~</span>]<span class="meta"># ln -s /usr/local/python36/bin/pip /usr/bin/pip3      (给pip指令创建快捷方式pip3)</span></span><br><span class="line">[<span class="meta">root ~</span>]<span class="meta"># pip3 --version</span></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>指令</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux定时任务</title>
    <url>/2019/12/20/Linux%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
    <content><![CDATA[<p>通过制定 <code>crontab -e</code> 编辑和开启定时任务</p>
<a id="more"></a>


<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建一个完整的定时任务，需要确定时间和任务</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1.时间</span></span><br><span class="line"> .---------------- minute (0 - 59)   # 分</span><br><span class="line"> |  .------------- hour (0 - 23)     # 时</span><br><span class="line"> |  |  .---------- day of month (1 - 31)  # 日</span><br><span class="line"> |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...  # 月</span><br><span class="line"> |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span><br><span class="line"> |  |  |  |  |</span><br><span class="line"> *  *  *  *  * user-name  command to be executed</span><br><span class="line"></span><br><span class="line"> * * * * *   		- 每分钟执行一次任务(每隔一分钟)</span><br><span class="line"> */1 * * * *        - 每分钟执行一次任务(每隔一分钟)</span><br><span class="line"> */2 * * * *        - 每2分钟执行一次任务(每隔2分钟)</span><br><span class="line"> * */1 * * *        - 每隔1小时</span><br><span class="line"> * * */1 * *        - 每隔1天</span><br><span class="line"> * * * */2 *        - 每隔两个月</span><br><span class="line"> * * * *  fri       - 每周五执行任务</span><br><span class="line"></span><br><span class="line"> 30 * * * *         - 时间点到30分的时候做</span><br><span class="line"> 0  * * * *         - 时间点到整点的时候执行任务</span><br><span class="line"> 30 2 * * *         - 时间到 02:30 的时候执行任务</span><br><span class="line"> 0  12 28 * *       - 每月28号12:00执行任务</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.任务</span></span><br><span class="line">写Linux指令, 指令如果有结果，结果看不到</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>Linux</tag>
        <tag>shell</tag>
        <tag>脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux中python相关软件安装记录</title>
    <url>/2019/12/20/Centos7.x%E5%8F%8A%E4%BB%A5%E4%B8%8Amysql%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>Linux中的Python, MySQL, Redis, Nginx安装,基础环境配置</p>
<a id="more"></a>

<h1 id="Linux基本配置"><a href="#Linux基本配置" class="headerlink" title="Linux基本配置"></a>Linux基本配置</h1><h2 id="配置vim编辑器"><a href="#配置vim编辑器" class="headerlink" title="配置vim编辑器"></a>配置vim编辑器</h2><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">cd ~</span><br><span class="line">vim .vimrc</span><br><span class="line">    <span class="keyword">set</span> nu   <span class="comment"># 行号</span></span><br><span class="line">    <span class="keyword">set</span> ts=<span class="number">4</span>   <span class="comment"># 设置制表键空格数量</span></span><br><span class="line">    <span class="keyword">set</span> autoindent   <span class="comment"># 自动缩进</span></span><br><span class="line">    <span class="keyword">set</span> expandtab   <span class="comment"># 制表键自动变空格</span></span><br><span class="line">    <span class="keyword">set</span> ruler   <span class="comment"># 显示光标位置</span></span><br><span class="line">    <span class="keyword">set</span> nohls   <span class="comment"># 选中的代码不高亮</span></span><br><span class="line">    syntax <span class="keyword">on</span>   <span class="comment"># 语法高亮</span></span><br></pre></td></tr></table></figure>

<h2 id="查看命令别名"><a href="#查看命令别名" class="headerlink" title="查看命令别名"></a>查看命令别名</h2><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> ~</span><br><span class="line">vim <span class="string">.bashrc</span></span><br></pre></td></tr></table></figure>

<h2 id="修改用户名前的一长串"><a href="#修改用户名前的一长串" class="headerlink" title="修改用户名前的一长串"></a>修改用户名前的一长串</h2><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">vim /etc/bashrc</span><br><span class="line"><span class="number">41</span>行删除@\h</span><br></pre></td></tr></table></figure>


<h1 id="后端相关的开发工具安装"><a href="#后端相关的开发工具安装" class="headerlink" title="后端相关的开发工具安装"></a>后端相关的开发工具安装</h1><h2 id="Linux软件安装方法"><a href="#Linux软件安装方法" class="headerlink" title="Linux软件安装方法"></a>Linux软件安装方法</h2><figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">1. 包管理工具 </span><br><span class="line">    -<span class="ruby"> yum CentOS</span></span><br><span class="line"><span class="ruby">        ~ yum search nginx   ---&gt;   查看安装库内是否已经安装nginx</span></span><br><span class="line"><span class="ruby">        ~ yum install nginx   ---&gt;   安装</span></span><br><span class="line"><span class="ruby">        ~ yum erase nginx / yum remove nginx   ---&gt;   卸载</span></span><br><span class="line"><span class="ruby">        ~ yum info nginx   ---&gt;   查看软件信息</span></span><br><span class="line"><span class="ruby">        ~ yum list installed <span class="params">| grep nginx   ---&gt;   查看是否已经安装</span></span></span><br><span class="line"><span class="ruby">    - rpm Redhat</span></span><br><span class="line"><span class="ruby">        ~ rpm -ivh 下载的rpm包文件名</span></span><br><span class="line"><span class="ruby">        ~ rpm -e</span></span><br><span class="line"><span class="ruby">        ~ rpm -qa</span></span><br><span class="line"><span class="ruby">    - apt Ubuntu</span></span><br><span class="line"><span class="ruby"><span class="number">2</span>. 源代码构建安装</span></span><br></pre></td></tr></table></figure>

<h2 id="Nginx安装"><a href="#Nginx安装" class="headerlink" title="Nginx安装"></a>Nginx安装</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">yum</span> <span class="string">install -y nginx</span></span><br><span class="line"><span class="attr">systemctl</span> <span class="string">start nginx</span></span><br><span class="line"><span class="attr">systemctl</span> <span class="string">stop nginx</span></span><br></pre></td></tr></table></figure>
<h2 id="MariaDB安装-MySQL-5-x-的一个分支-和5-x版本基本相同"><a href="#MariaDB安装-MySQL-5-x-的一个分支-和5-x版本基本相同" class="headerlink" title="MariaDB安装(MySQL 5.x 的一个分支,和5.x版本基本相同)"></a>MariaDB安装(MySQL 5.x 的一个分支,和5.x版本基本相同)</h2><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">yum</span> install -y <span class="keyword">mariadb </span><span class="keyword">mariadb-server</span></span><br><span class="line"><span class="keyword">systemctl </span>start <span class="keyword">mariadb</span></span><br><span class="line"><span class="keyword">mysql </span>-u root</span><br></pre></td></tr></table></figure>
<h2 id="MySQL安装"><a href="#MySQL安装" class="headerlink" title="MySQL安装"></a>MySQL安装</h2><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 清除掉所有跟mariadb相关的东西</span><br><span class="line">  yum list installed | grep mariadb | awk <span class="string">'&#123;print $1&#125;'</span> | xargs yum erase -y</span><br><span class="line"><span class="number">2.</span> 清理之前的数据和日志文件（如果存在）</span><br><span class="line">  rm -rf /var/lib/mysql</span><br><span class="line">  rm -f /var/log/mysqld.log</span><br><span class="line"><span class="number">3.</span> 下载MySQL官方提供的RPM包并解归档</span><br><span class="line">  wget https:<span class="comment">//dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.28-1.el7.x86_64.rpm-bundle.tar</span></span><br><span class="line">  tar -xvf mysql<span class="number">-5.7</span><span class="number">.28</span><span class="number">-1.</span>el7.x86_64.rpm-bundle.tar</span><br><span class="line"><span class="number">4.</span> 安装依赖库</span><br><span class="line">  yum install -y libaio</span><br><span class="line"><span class="number">5.</span> 使用rpm包管理工具安装MySQL</span><br><span class="line">  rpm -ivh mysql-community-common<span class="number">-5.7</span><span class="number">.28</span><span class="number">-1.</span>el7.x86_64.rpm</span><br><span class="line">  rpm -ivh mysql-community-libs<span class="number">-5.7</span><span class="number">.28</span><span class="number">-1.</span>el7.x86_64.rpm</span><br><span class="line">  rpm -ivh mysql-community-client<span class="number">-5.7</span><span class="number">.28</span><span class="number">-1.</span>el7.x86_64.rpm</span><br><span class="line">  rpm -ivh mysql-community-server<span class="number">-5.7</span><span class="number">.28</span><span class="number">-1.</span>el7.x86_64.rpm</span><br><span class="line"><span class="number">6.</span> 启动服务查看随机密码</span><br><span class="line">  systemctl start mysqld</span><br><span class="line">  cat /var/log/mysqld.log | grep password</span><br><span class="line"><span class="number">7.</span> 用客户端工具连接MySQL</span><br><span class="line">  mysql -u root -p</span><br><span class="line"><span class="number">8.</span> 修改root用户口令</span><br><span class="line">  <span class="keyword">set</span> global validate_password_policy=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">set</span> global validate_password_length=<span class="number">6</span>;</span><br><span class="line">  alter user <span class="string">'root'</span>@<span class="string">'localhost'</span> identified by <span class="string">'123456'</span>;</span><br></pre></td></tr></table></figure>
<h2 id="Redis安装"><a href="#Redis安装" class="headerlink" title="Redis安装"></a>Redis安装</h2><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">安装Redis官方最新版</span><br><span class="line">wget http:<span class="comment">//download.redis.io/releases/redis-5.0.7.tar.gz</span></span><br><span class="line">gunzip redis<span class="number">-5.0</span><span class="number">.7</span>.tar.gz</span><br><span class="line">tar -xvf redis<span class="number">-5.0</span><span class="number">.7</span>.tar</span><br><span class="line">cd redis<span class="number">-5.0</span><span class="number">.7</span></span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<h2 id="GIt安装"><a href="#GIt安装" class="headerlink" title="GIt安装"></a>GIt安装</h2><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">安装Git官方最新版</span><br><span class="line">wget https:<span class="comment">//mirrors.edge.kernel.org/pub/software/scm/git/git-2.24.1.tar.xz</span></span><br><span class="line">xz -d git<span class="number">-2.24</span><span class="number">.1</span>.tar.xz</span><br><span class="line">tar -xf git<span class="number">-2.24</span><span class="number">.1</span>.tar</span><br><span class="line">cd git<span class="number">-2.24</span><span class="number">.1</span></span><br><span class="line">yum install -y curl libcurl-devel</span><br><span class="line">./configure --prefix=/usr/local</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<h2 id="Python3安装"><a href="#Python3安装" class="headerlink" title="Python3安装"></a>Python3安装</h2><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 安装依赖项</span><br><span class="line">    yum install -y zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel libffi-devel</span><br><span class="line"><span class="number">2.</span> 下载Python3源代码</span><br><span class="line">    wget https:<span class="comment">//www.python.org/ftp/python/3.7.6/Python-3.7.6.tar.xz</span></span><br><span class="line"><span class="number">3.</span> 解压缩和解归档</span><br><span class="line">    xz -d Python<span class="number">-3.7</span><span class="number">.6</span>.tar.xz</span><br><span class="line">    tar -xvf Python<span class="number">-3.7</span><span class="number">.6</span>.tar</span><br><span class="line"><span class="number">4.</span> 执行安装前的配置</span><br><span class="line">    cd Python<span class="number">-3.7</span><span class="number">.6</span></span><br><span class="line">    ./configure --prefix=/usr/local/python37 --enable-optimizations</span><br><span class="line"><span class="number">5.</span> 构建和安装</span><br><span class="line">    make &amp;&amp; make install</span><br><span class="line"><span class="number">6.</span> 注册环境变量</span><br><span class="line">    vim ~/.bash_profile</span><br><span class="line">        PATH=$PATH:/usr/local/python37/bin</span><br><span class="line">        export PATH</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术文档</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>分享</tag>
        <tag>Linux软件</tag>
        <tag>服务器</tag>
        <tag>配置</tag>
      </tags>
  </entry>
</search>
